{"version":3,"file":"static/chunks/396464d2-ad93403b855ee4d3.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@sentry/replay/esm/index.js?3de1","webpack://_N_E/<anon>"],"sourcesContent":["import { _nullishCoalesce, _optionalChain } from '@sentry/utils';\nimport { addBreadcrumb, getClient, isSentryRequestUrl, getCurrentScope, addEventProcessor, prepareEvent, getIsolationScope, setContext, captureException, spanToJSON, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE } from '@sentry/core';\nimport { GLOBAL_OBJ, normalize, fill, htmlTreeAsString, browserPerformanceTimeOrigin, logger, uuid4, SENTRY_XHR_DATA_KEY, dropUndefinedKeys, stringMatchesSomePattern, addFetchInstrumentationHandler, addXhrInstrumentationHandler, addClickKeypressInstrumentationHandler, addHistoryInstrumentationHandler, createEnvelope, createEventEnvelopeHeaders, getSdkMetadataForEnvelopeHeader, updateRateLimits, isRateLimited, consoleSandbox, isBrowser } from '@sentry/utils';\nimport { addPerformanceInstrumentationHandler, addLcpInstrumentationHandler } from '@sentry-internal/tracing';\n\n// exporting a separate copy of `WINDOW` rather than exporting the one from `@sentry/browser`\n// prevents the browser package from being bundled in the CDN bundle, and avoids a\n// circular dependency between the browser and replay packages should `@sentry/browser` import\n// from `@sentry/replay` in the future\nconst WINDOW = GLOBAL_OBJ ;\n\nconst REPLAY_SESSION_KEY = 'sentryReplaySession';\nconst REPLAY_EVENT_NAME = 'replay_event';\nconst UNABLE_TO_SEND_REPLAY = 'Unable to send Replay';\n\n// The idle limit for a session after which recording is paused.\nconst SESSION_IDLE_PAUSE_DURATION = 300000; // 5 minutes in ms\n\n// The idle limit for a session after which the session expires.\nconst SESSION_IDLE_EXPIRE_DURATION = 900000; // 15 minutes in ms\n\n/** Default flush delays */\nconst DEFAULT_FLUSH_MIN_DELAY = 5000;\n// XXX: Temp fix for our debounce logic where `maxWait` would never occur if it\n// was the same as `wait`\nconst DEFAULT_FLUSH_MAX_DELAY = 5500;\n\n/* How long to wait for error checkouts */\nconst BUFFER_CHECKOUT_TIME = 60000;\n\nconst RETRY_BASE_INTERVAL = 5000;\nconst RETRY_MAX_COUNT = 3;\n\n/* The max (uncompressed) size in bytes of a network body. Any body larger than this will be truncated. */\nconst NETWORK_BODY_MAX_SIZE = 150000;\n\n/* The max size of a single console arg that is captured. Any arg larger than this will be truncated. */\nconst CONSOLE_ARG_MAX_SIZE = 5000;\n\n/* Min. time to wait before we consider something a slow click. */\nconst SLOW_CLICK_THRESHOLD = 3000;\n/* For scroll actions after a click, we only look for a very short time period to detect programmatic scrolling. */\nconst SLOW_CLICK_SCROLL_TIMEOUT = 300;\n\n/** When encountering a total segment size exceeding this size, stop the replay (as we cannot properly ingest it). */\nconst REPLAY_MAX_EVENT_BUFFER_SIZE = 20000000; // ~20MB\n\n/** Replays must be min. 5s long before we send them. */\nconst MIN_REPLAY_DURATION = 4999;\n/* The max. allowed value that the minReplayDuration can be set to. */\nconst MIN_REPLAY_DURATION_LIMIT = 15000;\n\n/** The max. length of a replay. */\nconst MAX_REPLAY_DURATION = 3600000; // 60 minutes in ms;\n\nfunction _nullishCoalesce$1(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } }function _optionalChain$5(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }var NodeType$1;\n(function (NodeType) {\n    NodeType[NodeType[\"Document\"] = 0] = \"Document\";\n    NodeType[NodeType[\"DocumentType\"] = 1] = \"DocumentType\";\n    NodeType[NodeType[\"Element\"] = 2] = \"Element\";\n    NodeType[NodeType[\"Text\"] = 3] = \"Text\";\n    NodeType[NodeType[\"CDATA\"] = 4] = \"CDATA\";\n    NodeType[NodeType[\"Comment\"] = 5] = \"Comment\";\n})(NodeType$1 || (NodeType$1 = {}));\n\nfunction isElement$1(n) {\n    return n.nodeType === n.ELEMENT_NODE;\n}\nfunction isShadowRoot(n) {\n    const host = _optionalChain$5([n, 'optionalAccess', _ => _.host]);\n    return Boolean(_optionalChain$5([host, 'optionalAccess', _2 => _2.shadowRoot]) === n);\n}\nfunction isNativeShadowDom(shadowRoot) {\n    return Object.prototype.toString.call(shadowRoot) === '[object ShadowRoot]';\n}\nfunction fixBrowserCompatibilityIssuesInCSS(cssText) {\n    if (cssText.includes(' background-clip: text;') &&\n        !cssText.includes(' -webkit-background-clip: text;')) {\n        cssText = cssText.replace(' background-clip: text;', ' -webkit-background-clip: text; background-clip: text;');\n    }\n    return cssText;\n}\nfunction escapeImportStatement(rule) {\n    const { cssText } = rule;\n    if (cssText.split('\"').length < 3)\n        return cssText;\n    const statement = ['@import', `url(${JSON.stringify(rule.href)})`];\n    if (rule.layerName === '') {\n        statement.push(`layer`);\n    }\n    else if (rule.layerName) {\n        statement.push(`layer(${rule.layerName})`);\n    }\n    if (rule.supportsText) {\n        statement.push(`supports(${rule.supportsText})`);\n    }\n    if (rule.media.length) {\n        statement.push(rule.media.mediaText);\n    }\n    return statement.join(' ') + ';';\n}\nfunction stringifyStylesheet(s) {\n    try {\n        const rules = s.rules || s.cssRules;\n        return rules\n            ? fixBrowserCompatibilityIssuesInCSS(Array.from(rules, stringifyRule).join(''))\n            : null;\n    }\n    catch (error) {\n        return null;\n    }\n}\nfunction stringifyRule(rule) {\n    let importStringified;\n    if (isCSSImportRule(rule)) {\n        try {\n            importStringified =\n                stringifyStylesheet(rule.styleSheet) ||\n                    escapeImportStatement(rule);\n        }\n        catch (error) {\n        }\n    }\n    else if (isCSSStyleRule(rule) && rule.selectorText.includes(':')) {\n        return fixSafariColons(rule.cssText);\n    }\n    return importStringified || rule.cssText;\n}\nfunction fixSafariColons(cssStringified) {\n    const regex = /(\\[(?:[\\w-]+)[^\\\\])(:(?:[\\w-]+)\\])/gm;\n    return cssStringified.replace(regex, '$1\\\\$2');\n}\nfunction isCSSImportRule(rule) {\n    return 'styleSheet' in rule;\n}\nfunction isCSSStyleRule(rule) {\n    return 'selectorText' in rule;\n}\nclass Mirror {\n    constructor() {\n        this.idNodeMap = new Map();\n        this.nodeMetaMap = new WeakMap();\n    }\n    getId(n) {\n        if (!n)\n            return -1;\n        const id = _optionalChain$5([this, 'access', _3 => _3.getMeta, 'call', _4 => _4(n), 'optionalAccess', _5 => _5.id]);\n        return _nullishCoalesce$1(id, () => ( -1));\n    }\n    getNode(id) {\n        return this.idNodeMap.get(id) || null;\n    }\n    getIds() {\n        return Array.from(this.idNodeMap.keys());\n    }\n    getMeta(n) {\n        return this.nodeMetaMap.get(n) || null;\n    }\n    removeNodeFromMap(n) {\n        const id = this.getId(n);\n        this.idNodeMap.delete(id);\n        if (n.childNodes) {\n            n.childNodes.forEach((childNode) => this.removeNodeFromMap(childNode));\n        }\n    }\n    has(id) {\n        return this.idNodeMap.has(id);\n    }\n    hasNode(node) {\n        return this.nodeMetaMap.has(node);\n    }\n    add(n, meta) {\n        const id = meta.id;\n        this.idNodeMap.set(id, n);\n        this.nodeMetaMap.set(n, meta);\n    }\n    replace(id, n) {\n        const oldNode = this.getNode(id);\n        if (oldNode) {\n            const meta = this.nodeMetaMap.get(oldNode);\n            if (meta)\n                this.nodeMetaMap.set(n, meta);\n        }\n        this.idNodeMap.set(id, n);\n    }\n    reset() {\n        this.idNodeMap = new Map();\n        this.nodeMetaMap = new WeakMap();\n    }\n}\nfunction createMirror() {\n    return new Mirror();\n}\nfunction shouldMaskInput({ maskInputOptions, tagName, type, }) {\n    if (tagName === 'OPTION') {\n        tagName = 'SELECT';\n    }\n    return Boolean(maskInputOptions[tagName.toLowerCase()] ||\n        (type && maskInputOptions[type]) ||\n        type === 'password' ||\n        (tagName === 'INPUT' && !type && maskInputOptions['text']));\n}\nfunction maskInputValue({ isMasked, element, value, maskInputFn, }) {\n    let text = value || '';\n    if (!isMasked) {\n        return text;\n    }\n    if (maskInputFn) {\n        text = maskInputFn(text, element);\n    }\n    return '*'.repeat(text.length);\n}\nfunction toLowerCase(str) {\n    return str.toLowerCase();\n}\nfunction toUpperCase(str) {\n    return str.toUpperCase();\n}\nconst ORIGINAL_ATTRIBUTE_NAME = '__rrweb_original__';\nfunction is2DCanvasBlank(canvas) {\n    const ctx = canvas.getContext('2d');\n    if (!ctx)\n        return true;\n    const chunkSize = 50;\n    for (let x = 0; x < canvas.width; x += chunkSize) {\n        for (let y = 0; y < canvas.height; y += chunkSize) {\n            const getImageData = ctx.getImageData;\n            const originalGetImageData = ORIGINAL_ATTRIBUTE_NAME in getImageData\n                ? getImageData[ORIGINAL_ATTRIBUTE_NAME]\n                : getImageData;\n            const pixelBuffer = new Uint32Array(originalGetImageData.call(ctx, x, y, Math.min(chunkSize, canvas.width - x), Math.min(chunkSize, canvas.height - y)).data.buffer);\n            if (pixelBuffer.some((pixel) => pixel !== 0))\n                return false;\n        }\n    }\n    return true;\n}\nfunction getInputType(element) {\n    const type = element.type;\n    return element.hasAttribute('data-rr-is-password')\n        ? 'password'\n        : type\n            ?\n                toLowerCase(type)\n            : null;\n}\nfunction getInputValue(el, tagName, type) {\n    if (tagName === 'INPUT' && (type === 'radio' || type === 'checkbox')) {\n        return el.getAttribute('value') || '';\n    }\n    return el.value;\n}\n\nlet _id = 1;\nconst tagNameRegex = new RegExp('[^a-z0-9-_:]');\nconst IGNORED_NODE = -2;\nfunction genId() {\n    return _id++;\n}\nfunction getValidTagName(element) {\n    if (element instanceof HTMLFormElement) {\n        return 'form';\n    }\n    const processedTagName = toLowerCase(element.tagName);\n    if (tagNameRegex.test(processedTagName)) {\n        return 'div';\n    }\n    return processedTagName;\n}\nfunction extractOrigin(url) {\n    let origin = '';\n    if (url.indexOf('//') > -1) {\n        origin = url.split('/').slice(0, 3).join('/');\n    }\n    else {\n        origin = url.split('/')[0];\n    }\n    origin = origin.split('?')[0];\n    return origin;\n}\nlet canvasService;\nlet canvasCtx;\nconst URL_IN_CSS_REF = /url\\((?:(')([^']*)'|(\")(.*?)\"|([^)]*))\\)/gm;\nconst URL_PROTOCOL_MATCH = /^(?:[a-z+]+:)?\\/\\//i;\nconst URL_WWW_MATCH = /^www\\..*/i;\nconst DATA_URI = /^(data:)([^,]*),(.*)/i;\nfunction absoluteToStylesheet(cssText, href) {\n    return (cssText || '').replace(URL_IN_CSS_REF, (origin, quote1, path1, quote2, path2, path3) => {\n        const filePath = path1 || path2 || path3;\n        const maybeQuote = quote1 || quote2 || '';\n        if (!filePath) {\n            return origin;\n        }\n        if (URL_PROTOCOL_MATCH.test(filePath) || URL_WWW_MATCH.test(filePath)) {\n            return `url(${maybeQuote}${filePath}${maybeQuote})`;\n        }\n        if (DATA_URI.test(filePath)) {\n            return `url(${maybeQuote}${filePath}${maybeQuote})`;\n        }\n        if (filePath[0] === '/') {\n            return `url(${maybeQuote}${extractOrigin(href) + filePath}${maybeQuote})`;\n        }\n        const stack = href.split('/');\n        const parts = filePath.split('/');\n        stack.pop();\n        for (const part of parts) {\n            if (part === '.') {\n                continue;\n            }\n            else if (part === '..') {\n                stack.pop();\n            }\n            else {\n                stack.push(part);\n            }\n        }\n        return `url(${maybeQuote}${stack.join('/')}${maybeQuote})`;\n    });\n}\nconst SRCSET_NOT_SPACES = /^[^ \\t\\n\\r\\u000c]+/;\nconst SRCSET_COMMAS_OR_SPACES = /^[, \\t\\n\\r\\u000c]+/;\nfunction getAbsoluteSrcsetString(doc, attributeValue) {\n    if (attributeValue.trim() === '') {\n        return attributeValue;\n    }\n    let pos = 0;\n    function collectCharacters(regEx) {\n        let chars;\n        const match = regEx.exec(attributeValue.substring(pos));\n        if (match) {\n            chars = match[0];\n            pos += chars.length;\n            return chars;\n        }\n        return '';\n    }\n    const output = [];\n    while (true) {\n        collectCharacters(SRCSET_COMMAS_OR_SPACES);\n        if (pos >= attributeValue.length) {\n            break;\n        }\n        let url = collectCharacters(SRCSET_NOT_SPACES);\n        if (url.slice(-1) === ',') {\n            url = absoluteToDoc(doc, url.substring(0, url.length - 1));\n            output.push(url);\n        }\n        else {\n            let descriptorsStr = '';\n            url = absoluteToDoc(doc, url);\n            let inParens = false;\n            while (true) {\n                const c = attributeValue.charAt(pos);\n                if (c === '') {\n                    output.push((url + descriptorsStr).trim());\n                    break;\n                }\n                else if (!inParens) {\n                    if (c === ',') {\n                        pos += 1;\n                        output.push((url + descriptorsStr).trim());\n                        break;\n                    }\n                    else if (c === '(') {\n                        inParens = true;\n                    }\n                }\n                else {\n                    if (c === ')') {\n                        inParens = false;\n                    }\n                }\n                descriptorsStr += c;\n                pos += 1;\n            }\n        }\n    }\n    return output.join(', ');\n}\nfunction absoluteToDoc(doc, attributeValue) {\n    if (!attributeValue || attributeValue.trim() === '') {\n        return attributeValue;\n    }\n    const a = doc.createElement('a');\n    a.href = attributeValue;\n    return a.href;\n}\nfunction isSVGElement(el) {\n    return Boolean(el.tagName === 'svg' || el.ownerSVGElement);\n}\nfunction getHref() {\n    const a = document.createElement('a');\n    a.href = '';\n    return a.href;\n}\nfunction transformAttribute(doc, tagName, name, value, element, maskAttributeFn) {\n    if (!value) {\n        return value;\n    }\n    if (name === 'src' ||\n        (name === 'href' && !(tagName === 'use' && value[0] === '#'))) {\n        return absoluteToDoc(doc, value);\n    }\n    else if (name === 'xlink:href' && value[0] !== '#') {\n        return absoluteToDoc(doc, value);\n    }\n    else if (name === 'background' &&\n        (tagName === 'table' || tagName === 'td' || tagName === 'th')) {\n        return absoluteToDoc(doc, value);\n    }\n    else if (name === 'srcset') {\n        return getAbsoluteSrcsetString(doc, value);\n    }\n    else if (name === 'style') {\n        return absoluteToStylesheet(value, getHref());\n    }\n    else if (tagName === 'object' && name === 'data') {\n        return absoluteToDoc(doc, value);\n    }\n    if (typeof maskAttributeFn === 'function') {\n        return maskAttributeFn(name, value, element);\n    }\n    return value;\n}\nfunction ignoreAttribute(tagName, name, _value) {\n    return (tagName === 'video' || tagName === 'audio') && name === 'autoplay';\n}\nfunction _isBlockedElement(element, blockClass, blockSelector, unblockSelector) {\n    try {\n        if (unblockSelector && element.matches(unblockSelector)) {\n            return false;\n        }\n        if (typeof blockClass === 'string') {\n            if (element.classList.contains(blockClass)) {\n                return true;\n            }\n        }\n        else {\n            for (let eIndex = element.classList.length; eIndex--;) {\n                const className = element.classList[eIndex];\n                if (blockClass.test(className)) {\n                    return true;\n                }\n            }\n        }\n        if (blockSelector) {\n            return element.matches(blockSelector);\n        }\n    }\n    catch (e) {\n    }\n    return false;\n}\nfunction elementClassMatchesRegex(el, regex) {\n    for (let eIndex = el.classList.length; eIndex--;) {\n        const className = el.classList[eIndex];\n        if (regex.test(className)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction distanceToMatch(node, matchPredicate, limit = Infinity, distance = 0) {\n    if (!node)\n        return -1;\n    if (node.nodeType !== node.ELEMENT_NODE)\n        return -1;\n    if (distance > limit)\n        return -1;\n    if (matchPredicate(node))\n        return distance;\n    return distanceToMatch(node.parentNode, matchPredicate, limit, distance + 1);\n}\nfunction createMatchPredicate(className, selector) {\n    return (node) => {\n        const el = node;\n        if (el === null)\n            return false;\n        try {\n            if (className) {\n                if (typeof className === 'string') {\n                    if (el.matches(`.${className}`))\n                        return true;\n                }\n                else if (elementClassMatchesRegex(el, className)) {\n                    return true;\n                }\n            }\n            if (selector && el.matches(selector))\n                return true;\n            return false;\n        }\n        catch (e2) {\n            return false;\n        }\n    };\n}\nfunction needMaskingText(node, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, maskAllText) {\n    try {\n        const el = node.nodeType === node.ELEMENT_NODE\n            ? node\n            : node.parentElement;\n        if (el === null)\n            return false;\n        if (el.tagName === 'INPUT') {\n            const autocomplete = el.getAttribute('autocomplete');\n            const disallowedAutocompleteValues = [\n                'current-password',\n                'new-password',\n                'cc-number',\n                'cc-exp',\n                'cc-exp-month',\n                'cc-exp-year',\n                'cc-csc',\n            ];\n            if (disallowedAutocompleteValues.includes(autocomplete)) {\n                return true;\n            }\n        }\n        let maskDistance = -1;\n        let unmaskDistance = -1;\n        if (maskAllText) {\n            unmaskDistance = distanceToMatch(el, createMatchPredicate(unmaskTextClass, unmaskTextSelector));\n            if (unmaskDistance < 0) {\n                return true;\n            }\n            maskDistance = distanceToMatch(el, createMatchPredicate(maskTextClass, maskTextSelector), unmaskDistance >= 0 ? unmaskDistance : Infinity);\n        }\n        else {\n            maskDistance = distanceToMatch(el, createMatchPredicate(maskTextClass, maskTextSelector));\n            if (maskDistance < 0) {\n                return false;\n            }\n            unmaskDistance = distanceToMatch(el, createMatchPredicate(unmaskTextClass, unmaskTextSelector), maskDistance >= 0 ? maskDistance : Infinity);\n        }\n        return maskDistance >= 0\n            ? unmaskDistance >= 0\n                ? maskDistance <= unmaskDistance\n                : true\n            : unmaskDistance >= 0\n                ? false\n                : !!maskAllText;\n    }\n    catch (e) {\n    }\n    return !!maskAllText;\n}\nfunction onceIframeLoaded(iframeEl, listener, iframeLoadTimeout) {\n    const win = iframeEl.contentWindow;\n    if (!win) {\n        return;\n    }\n    let fired = false;\n    let readyState;\n    try {\n        readyState = win.document.readyState;\n    }\n    catch (error) {\n        return;\n    }\n    if (readyState !== 'complete') {\n        const timer = setTimeout(() => {\n            if (!fired) {\n                listener();\n                fired = true;\n            }\n        }, iframeLoadTimeout);\n        iframeEl.addEventListener('load', () => {\n            clearTimeout(timer);\n            fired = true;\n            listener();\n        });\n        return;\n    }\n    const blankUrl = 'about:blank';\n    if (win.location.href !== blankUrl ||\n        iframeEl.src === blankUrl ||\n        iframeEl.src === '') {\n        setTimeout(listener, 0);\n        return iframeEl.addEventListener('load', listener);\n    }\n    iframeEl.addEventListener('load', listener);\n}\nfunction onceStylesheetLoaded(link, listener, styleSheetLoadTimeout) {\n    let fired = false;\n    let styleSheetLoaded;\n    try {\n        styleSheetLoaded = link.sheet;\n    }\n    catch (error) {\n        return;\n    }\n    if (styleSheetLoaded)\n        return;\n    const timer = setTimeout(() => {\n        if (!fired) {\n            listener();\n            fired = true;\n        }\n    }, styleSheetLoadTimeout);\n    link.addEventListener('load', () => {\n        clearTimeout(timer);\n        fired = true;\n        listener();\n    });\n}\nfunction serializeNode(n, options) {\n    const { doc, mirror, blockClass, blockSelector, unblockSelector, maskAllText, maskAttributeFn, maskTextClass, unmaskTextClass, maskTextSelector, unmaskTextSelector, inlineStylesheet, maskInputOptions = {}, maskTextFn, maskInputFn, dataURLOptions = {}, inlineImages, recordCanvas, keepIframeSrcFn, newlyAddedElement = false, } = options;\n    const rootId = getRootId(doc, mirror);\n    switch (n.nodeType) {\n        case n.DOCUMENT_NODE:\n            if (n.compatMode !== 'CSS1Compat') {\n                return {\n                    type: NodeType$1.Document,\n                    childNodes: [],\n                    compatMode: n.compatMode,\n                };\n            }\n            else {\n                return {\n                    type: NodeType$1.Document,\n                    childNodes: [],\n                };\n            }\n        case n.DOCUMENT_TYPE_NODE:\n            return {\n                type: NodeType$1.DocumentType,\n                name: n.name,\n                publicId: n.publicId,\n                systemId: n.systemId,\n                rootId,\n            };\n        case n.ELEMENT_NODE:\n            return serializeElementNode(n, {\n                doc,\n                blockClass,\n                blockSelector,\n                unblockSelector,\n                inlineStylesheet,\n                maskAttributeFn,\n                maskInputOptions,\n                maskInputFn,\n                dataURLOptions,\n                inlineImages,\n                recordCanvas,\n                keepIframeSrcFn,\n                newlyAddedElement,\n                rootId,\n                maskAllText,\n                maskTextClass,\n                unmaskTextClass,\n                maskTextSelector,\n                unmaskTextSelector,\n            });\n        case n.TEXT_NODE:\n            return serializeTextNode(n, {\n                maskAllText,\n                maskTextClass,\n                unmaskTextClass,\n                maskTextSelector,\n                unmaskTextSelector,\n                maskTextFn,\n                maskInputOptions,\n                maskInputFn,\n                rootId,\n            });\n        case n.CDATA_SECTION_NODE:\n            return {\n                type: NodeType$1.CDATA,\n                textContent: '',\n                rootId,\n            };\n        case n.COMMENT_NODE:\n            return {\n                type: NodeType$1.Comment,\n                textContent: n.textContent || '',\n                rootId,\n            };\n        default:\n            return false;\n    }\n}\nfunction getRootId(doc, mirror) {\n    if (!mirror.hasNode(doc))\n        return undefined;\n    const docId = mirror.getId(doc);\n    return docId === 1 ? undefined : docId;\n}\nfunction serializeTextNode(n, options) {\n    const { maskAllText, maskTextClass, unmaskTextClass, maskTextSelector, unmaskTextSelector, maskTextFn, maskInputOptions, maskInputFn, rootId, } = options;\n    const parentTagName = n.parentNode && n.parentNode.tagName;\n    let textContent = n.textContent;\n    const isStyle = parentTagName === 'STYLE' ? true : undefined;\n    const isScript = parentTagName === 'SCRIPT' ? true : undefined;\n    const isTextarea = parentTagName === 'TEXTAREA' ? true : undefined;\n    if (isStyle && textContent) {\n        try {\n            if (n.nextSibling || n.previousSibling) {\n            }\n            else if (_optionalChain$5([n, 'access', _6 => _6.parentNode, 'access', _7 => _7.sheet, 'optionalAccess', _8 => _8.cssRules])) {\n                textContent = stringifyStylesheet(n.parentNode.sheet);\n            }\n        }\n        catch (err) {\n            console.warn(`Cannot get CSS styles from text's parentNode. Error: ${err}`, n);\n        }\n        textContent = absoluteToStylesheet(textContent, getHref());\n    }\n    if (isScript) {\n        textContent = 'SCRIPT_PLACEHOLDER';\n    }\n    const forceMask = needMaskingText(n, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, maskAllText);\n    if (!isStyle && !isScript && !isTextarea && textContent && forceMask) {\n        textContent = maskTextFn\n            ? maskTextFn(textContent, n.parentElement)\n            : textContent.replace(/[\\S]/g, '*');\n    }\n    if (isTextarea && textContent && (maskInputOptions.textarea || forceMask)) {\n        textContent = maskInputFn\n            ? maskInputFn(textContent, n.parentNode)\n            : textContent.replace(/[\\S]/g, '*');\n    }\n    if (parentTagName === 'OPTION' && textContent) {\n        const isInputMasked = shouldMaskInput({\n            type: null,\n            tagName: parentTagName,\n            maskInputOptions,\n        });\n        textContent = maskInputValue({\n            isMasked: needMaskingText(n, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, isInputMasked),\n            element: n,\n            value: textContent,\n            maskInputFn,\n        });\n    }\n    return {\n        type: NodeType$1.Text,\n        textContent: textContent || '',\n        isStyle,\n        rootId,\n    };\n}\nfunction serializeElementNode(n, options) {\n    const { doc, blockClass, blockSelector, unblockSelector, inlineStylesheet, maskInputOptions = {}, maskAttributeFn, maskInputFn, dataURLOptions = {}, inlineImages, recordCanvas, keepIframeSrcFn, newlyAddedElement = false, rootId, maskAllText, maskTextClass, unmaskTextClass, maskTextSelector, unmaskTextSelector, } = options;\n    const needBlock = _isBlockedElement(n, blockClass, blockSelector, unblockSelector);\n    const tagName = getValidTagName(n);\n    let attributes = {};\n    const len = n.attributes.length;\n    for (let i = 0; i < len; i++) {\n        const attr = n.attributes[i];\n        if (attr.name && !ignoreAttribute(tagName, attr.name, attr.value)) {\n            attributes[attr.name] = transformAttribute(doc, tagName, toLowerCase(attr.name), attr.value, n, maskAttributeFn);\n        }\n    }\n    if (tagName === 'link' && inlineStylesheet) {\n        const stylesheet = Array.from(doc.styleSheets).find((s) => {\n            return s.href === n.href;\n        });\n        let cssText = null;\n        if (stylesheet) {\n            cssText = stringifyStylesheet(stylesheet);\n        }\n        if (cssText) {\n            delete attributes.rel;\n            delete attributes.href;\n            attributes._cssText = absoluteToStylesheet(cssText, stylesheet.href);\n        }\n    }\n    if (tagName === 'style' &&\n        n.sheet &&\n        !(n.innerText || n.textContent || '').trim().length) {\n        const cssText = stringifyStylesheet(n.sheet);\n        if (cssText) {\n            attributes._cssText = absoluteToStylesheet(cssText, getHref());\n        }\n    }\n    if (tagName === 'input' ||\n        tagName === 'textarea' ||\n        tagName === 'select' ||\n        tagName === 'option') {\n        const el = n;\n        const type = getInputType(el);\n        const value = getInputValue(el, toUpperCase(tagName), type);\n        const checked = el.checked;\n        if (type !== 'submit' && type !== 'button' && value) {\n            const forceMask = needMaskingText(el, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, shouldMaskInput({\n                type,\n                tagName: toUpperCase(tagName),\n                maskInputOptions,\n            }));\n            attributes.value = maskInputValue({\n                isMasked: forceMask,\n                element: el,\n                value,\n                maskInputFn,\n            });\n        }\n        if (checked) {\n            attributes.checked = checked;\n        }\n    }\n    if (tagName === 'option') {\n        if (n.selected && !maskInputOptions['select']) {\n            attributes.selected = true;\n        }\n        else {\n            delete attributes.selected;\n        }\n    }\n    if (tagName === 'canvas' && recordCanvas) {\n        if (n.__context === '2d') {\n            if (!is2DCanvasBlank(n)) {\n                attributes.rr_dataURL = n.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n            }\n        }\n        else if (!('__context' in n)) {\n            const canvasDataURL = n.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n            const blankCanvas = document.createElement('canvas');\n            blankCanvas.width = n.width;\n            blankCanvas.height = n.height;\n            const blankCanvasDataURL = blankCanvas.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n            if (canvasDataURL !== blankCanvasDataURL) {\n                attributes.rr_dataURL = canvasDataURL;\n            }\n        }\n    }\n    if (tagName === 'img' && inlineImages) {\n        if (!canvasService) {\n            canvasService = doc.createElement('canvas');\n            canvasCtx = canvasService.getContext('2d');\n        }\n        const image = n;\n        const oldValue = image.crossOrigin;\n        image.crossOrigin = 'anonymous';\n        const recordInlineImage = () => {\n            image.removeEventListener('load', recordInlineImage);\n            try {\n                canvasService.width = image.naturalWidth;\n                canvasService.height = image.naturalHeight;\n                canvasCtx.drawImage(image, 0, 0);\n                attributes.rr_dataURL = canvasService.toDataURL(dataURLOptions.type, dataURLOptions.quality);\n            }\n            catch (err) {\n                console.warn(`Cannot inline img src=${image.currentSrc}! Error: ${err}`);\n            }\n            oldValue\n                ? (attributes.crossOrigin = oldValue)\n                : image.removeAttribute('crossorigin');\n        };\n        if (image.complete && image.naturalWidth !== 0)\n            recordInlineImage();\n        else\n            image.addEventListener('load', recordInlineImage);\n    }\n    if (tagName === 'audio' || tagName === 'video') {\n        attributes.rr_mediaState = n.paused\n            ? 'paused'\n            : 'played';\n        attributes.rr_mediaCurrentTime = n.currentTime;\n    }\n    if (!newlyAddedElement) {\n        if (n.scrollLeft) {\n            attributes.rr_scrollLeft = n.scrollLeft;\n        }\n        if (n.scrollTop) {\n            attributes.rr_scrollTop = n.scrollTop;\n        }\n    }\n    if (needBlock) {\n        const { width, height } = n.getBoundingClientRect();\n        attributes = {\n            class: attributes.class,\n            rr_width: `${width}px`,\n            rr_height: `${height}px`,\n        };\n    }\n    if (tagName === 'iframe' && !keepIframeSrcFn(attributes.src)) {\n        if (!n.contentDocument) {\n            attributes.rr_src = attributes.src;\n        }\n        delete attributes.src;\n    }\n    let isCustomElement;\n    try {\n        if (customElements.get(tagName))\n            isCustomElement = true;\n    }\n    catch (e) {\n    }\n    return {\n        type: NodeType$1.Element,\n        tagName,\n        attributes,\n        childNodes: [],\n        isSVG: isSVGElement(n) || undefined,\n        needBlock,\n        rootId,\n        isCustom: isCustomElement,\n    };\n}\nfunction lowerIfExists(maybeAttr) {\n    if (maybeAttr === undefined || maybeAttr === null) {\n        return '';\n    }\n    else {\n        return maybeAttr.toLowerCase();\n    }\n}\nfunction slimDOMExcluded(sn, slimDOMOptions) {\n    if (slimDOMOptions.comment && sn.type === NodeType$1.Comment) {\n        return true;\n    }\n    else if (sn.type === NodeType$1.Element) {\n        if (slimDOMOptions.script &&\n            (sn.tagName === 'script' ||\n                (sn.tagName === 'link' &&\n                    (sn.attributes.rel === 'preload' ||\n                        sn.attributes.rel === 'modulepreload') &&\n                    sn.attributes.as === 'script') ||\n                (sn.tagName === 'link' &&\n                    sn.attributes.rel === 'prefetch' &&\n                    typeof sn.attributes.href === 'string' &&\n                    sn.attributes.href.endsWith('.js')))) {\n            return true;\n        }\n        else if (slimDOMOptions.headFavicon &&\n            ((sn.tagName === 'link' && sn.attributes.rel === 'shortcut icon') ||\n                (sn.tagName === 'meta' &&\n                    (lowerIfExists(sn.attributes.name).match(/^msapplication-tile(image|color)$/) ||\n                        lowerIfExists(sn.attributes.name) === 'application-name' ||\n                        lowerIfExists(sn.attributes.rel) === 'icon' ||\n                        lowerIfExists(sn.attributes.rel) === 'apple-touch-icon' ||\n                        lowerIfExists(sn.attributes.rel) === 'shortcut icon')))) {\n            return true;\n        }\n        else if (sn.tagName === 'meta') {\n            if (slimDOMOptions.headMetaDescKeywords &&\n                lowerIfExists(sn.attributes.name).match(/^description|keywords$/)) {\n                return true;\n            }\n            else if (slimDOMOptions.headMetaSocial &&\n                (lowerIfExists(sn.attributes.property).match(/^(og|twitter|fb):/) ||\n                    lowerIfExists(sn.attributes.name).match(/^(og|twitter):/) ||\n                    lowerIfExists(sn.attributes.name) === 'pinterest')) {\n                return true;\n            }\n            else if (slimDOMOptions.headMetaRobots &&\n                (lowerIfExists(sn.attributes.name) === 'robots' ||\n                    lowerIfExists(sn.attributes.name) === 'googlebot' ||\n                    lowerIfExists(sn.attributes.name) === 'bingbot')) {\n                return true;\n            }\n            else if (slimDOMOptions.headMetaHttpEquiv &&\n                sn.attributes['http-equiv'] !== undefined) {\n                return true;\n            }\n            else if (slimDOMOptions.headMetaAuthorship &&\n                (lowerIfExists(sn.attributes.name) === 'author' ||\n                    lowerIfExists(sn.attributes.name) === 'generator' ||\n                    lowerIfExists(sn.attributes.name) === 'framework' ||\n                    lowerIfExists(sn.attributes.name) === 'publisher' ||\n                    lowerIfExists(sn.attributes.name) === 'progid' ||\n                    lowerIfExists(sn.attributes.property).match(/^article:/) ||\n                    lowerIfExists(sn.attributes.property).match(/^product:/))) {\n                return true;\n            }\n            else if (slimDOMOptions.headMetaVerification &&\n                (lowerIfExists(sn.attributes.name) === 'google-site-verification' ||\n                    lowerIfExists(sn.attributes.name) === 'yandex-verification' ||\n                    lowerIfExists(sn.attributes.name) === 'csrf-token' ||\n                    lowerIfExists(sn.attributes.name) === 'p:domain_verify' ||\n                    lowerIfExists(sn.attributes.name) === 'verify-v1' ||\n                    lowerIfExists(sn.attributes.name) === 'verification' ||\n                    lowerIfExists(sn.attributes.name) === 'shopify-checkout-api-token')) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nfunction serializeNodeWithId(n, options) {\n    const { doc, mirror, blockClass, blockSelector, unblockSelector, maskAllText, maskTextClass, unmaskTextClass, maskTextSelector, unmaskTextSelector, skipChild = false, inlineStylesheet = true, maskInputOptions = {}, maskAttributeFn, maskTextFn, maskInputFn, slimDOMOptions, dataURLOptions = {}, inlineImages = false, recordCanvas = false, onSerialize, onIframeLoad, iframeLoadTimeout = 5000, onStylesheetLoad, stylesheetLoadTimeout = 5000, keepIframeSrcFn = () => false, newlyAddedElement = false, } = options;\n    let { preserveWhiteSpace = true } = options;\n    const _serializedNode = serializeNode(n, {\n        doc,\n        mirror,\n        blockClass,\n        blockSelector,\n        maskAllText,\n        unblockSelector,\n        maskTextClass,\n        unmaskTextClass,\n        maskTextSelector,\n        unmaskTextSelector,\n        inlineStylesheet,\n        maskInputOptions,\n        maskAttributeFn,\n        maskTextFn,\n        maskInputFn,\n        dataURLOptions,\n        inlineImages,\n        recordCanvas,\n        keepIframeSrcFn,\n        newlyAddedElement,\n    });\n    if (!_serializedNode) {\n        console.warn(n, 'not serialized');\n        return null;\n    }\n    let id;\n    if (mirror.hasNode(n)) {\n        id = mirror.getId(n);\n    }\n    else if (slimDOMExcluded(_serializedNode, slimDOMOptions) ||\n        (!preserveWhiteSpace &&\n            _serializedNode.type === NodeType$1.Text &&\n            !_serializedNode.isStyle &&\n            !_serializedNode.textContent.replace(/^\\s+|\\s+$/gm, '').length)) {\n        id = IGNORED_NODE;\n    }\n    else {\n        id = genId();\n    }\n    const serializedNode = Object.assign(_serializedNode, { id });\n    mirror.add(n, serializedNode);\n    if (id === IGNORED_NODE) {\n        return null;\n    }\n    if (onSerialize) {\n        onSerialize(n);\n    }\n    let recordChild = !skipChild;\n    if (serializedNode.type === NodeType$1.Element) {\n        recordChild = recordChild && !serializedNode.needBlock;\n        delete serializedNode.needBlock;\n        const shadowRoot = n.shadowRoot;\n        if (shadowRoot && isNativeShadowDom(shadowRoot))\n            serializedNode.isShadowHost = true;\n    }\n    if ((serializedNode.type === NodeType$1.Document ||\n        serializedNode.type === NodeType$1.Element) &&\n        recordChild) {\n        if (slimDOMOptions.headWhitespace &&\n            serializedNode.type === NodeType$1.Element &&\n            serializedNode.tagName === 'head') {\n            preserveWhiteSpace = false;\n        }\n        const bypassOptions = {\n            doc,\n            mirror,\n            blockClass,\n            blockSelector,\n            maskAllText,\n            unblockSelector,\n            maskTextClass,\n            unmaskTextClass,\n            maskTextSelector,\n            unmaskTextSelector,\n            skipChild,\n            inlineStylesheet,\n            maskInputOptions,\n            maskAttributeFn,\n            maskTextFn,\n            maskInputFn,\n            slimDOMOptions,\n            dataURLOptions,\n            inlineImages,\n            recordCanvas,\n            preserveWhiteSpace,\n            onSerialize,\n            onIframeLoad,\n            iframeLoadTimeout,\n            onStylesheetLoad,\n            stylesheetLoadTimeout,\n            keepIframeSrcFn,\n        };\n        for (const childN of Array.from(n.childNodes)) {\n            const serializedChildNode = serializeNodeWithId(childN, bypassOptions);\n            if (serializedChildNode) {\n                serializedNode.childNodes.push(serializedChildNode);\n            }\n        }\n        if (isElement$1(n) && n.shadowRoot) {\n            for (const childN of Array.from(n.shadowRoot.childNodes)) {\n                const serializedChildNode = serializeNodeWithId(childN, bypassOptions);\n                if (serializedChildNode) {\n                    isNativeShadowDom(n.shadowRoot) &&\n                        (serializedChildNode.isShadow = true);\n                    serializedNode.childNodes.push(serializedChildNode);\n                }\n            }\n        }\n    }\n    if (n.parentNode &&\n        isShadowRoot(n.parentNode) &&\n        isNativeShadowDom(n.parentNode)) {\n        serializedNode.isShadow = true;\n    }\n    if (serializedNode.type === NodeType$1.Element &&\n        serializedNode.tagName === 'iframe') {\n        onceIframeLoaded(n, () => {\n            const iframeDoc = n.contentDocument;\n            if (iframeDoc && onIframeLoad) {\n                const serializedIframeNode = serializeNodeWithId(iframeDoc, {\n                    doc: iframeDoc,\n                    mirror,\n                    blockClass,\n                    blockSelector,\n                    unblockSelector,\n                    maskAllText,\n                    maskTextClass,\n                    unmaskTextClass,\n                    maskTextSelector,\n                    unmaskTextSelector,\n                    skipChild: false,\n                    inlineStylesheet,\n                    maskInputOptions,\n                    maskAttributeFn,\n                    maskTextFn,\n                    maskInputFn,\n                    slimDOMOptions,\n                    dataURLOptions,\n                    inlineImages,\n                    recordCanvas,\n                    preserveWhiteSpace,\n                    onSerialize,\n                    onIframeLoad,\n                    iframeLoadTimeout,\n                    onStylesheetLoad,\n                    stylesheetLoadTimeout,\n                    keepIframeSrcFn,\n                });\n                if (serializedIframeNode) {\n                    onIframeLoad(n, serializedIframeNode);\n                }\n            }\n        }, iframeLoadTimeout);\n    }\n    if (serializedNode.type === NodeType$1.Element &&\n        serializedNode.tagName === 'link' &&\n        serializedNode.attributes.rel === 'stylesheet') {\n        onceStylesheetLoaded(n, () => {\n            if (onStylesheetLoad) {\n                const serializedLinkNode = serializeNodeWithId(n, {\n                    doc,\n                    mirror,\n                    blockClass,\n                    blockSelector,\n                    unblockSelector,\n                    maskAllText,\n                    maskTextClass,\n                    unmaskTextClass,\n                    maskTextSelector,\n                    unmaskTextSelector,\n                    skipChild: false,\n                    inlineStylesheet,\n                    maskInputOptions,\n                    maskAttributeFn,\n                    maskTextFn,\n                    maskInputFn,\n                    slimDOMOptions,\n                    dataURLOptions,\n                    inlineImages,\n                    recordCanvas,\n                    preserveWhiteSpace,\n                    onSerialize,\n                    onIframeLoad,\n                    iframeLoadTimeout,\n                    onStylesheetLoad,\n                    stylesheetLoadTimeout,\n                    keepIframeSrcFn,\n                });\n                if (serializedLinkNode) {\n                    onStylesheetLoad(n, serializedLinkNode);\n                }\n            }\n        }, stylesheetLoadTimeout);\n    }\n    return serializedNode;\n}\nfunction snapshot(n, options) {\n    const { mirror = new Mirror(), blockClass = 'rr-block', blockSelector = null, unblockSelector = null, maskAllText = false, maskTextClass = 'rr-mask', unmaskTextClass = null, maskTextSelector = null, unmaskTextSelector = null, inlineStylesheet = true, inlineImages = false, recordCanvas = false, maskAllInputs = false, maskAttributeFn, maskTextFn, maskInputFn, slimDOM = false, dataURLOptions, preserveWhiteSpace, onSerialize, onIframeLoad, iframeLoadTimeout, onStylesheetLoad, stylesheetLoadTimeout, keepIframeSrcFn = () => false, } = options || {};\n    const maskInputOptions = maskAllInputs === true\n        ? {\n            color: true,\n            date: true,\n            'datetime-local': true,\n            email: true,\n            month: true,\n            number: true,\n            range: true,\n            search: true,\n            tel: true,\n            text: true,\n            time: true,\n            url: true,\n            week: true,\n            textarea: true,\n            select: true,\n        }\n        : maskAllInputs === false\n            ? {}\n            : maskAllInputs;\n    const slimDOMOptions = slimDOM === true || slimDOM === 'all'\n        ?\n            {\n                script: true,\n                comment: true,\n                headFavicon: true,\n                headWhitespace: true,\n                headMetaDescKeywords: slimDOM === 'all',\n                headMetaSocial: true,\n                headMetaRobots: true,\n                headMetaHttpEquiv: true,\n                headMetaAuthorship: true,\n                headMetaVerification: true,\n            }\n        : slimDOM === false\n            ? {}\n            : slimDOM;\n    return serializeNodeWithId(n, {\n        doc: n,\n        mirror,\n        blockClass,\n        blockSelector,\n        unblockSelector,\n        maskAllText,\n        maskTextClass,\n        unmaskTextClass,\n        maskTextSelector,\n        unmaskTextSelector,\n        skipChild: false,\n        inlineStylesheet,\n        maskInputOptions,\n        maskAttributeFn,\n        maskTextFn,\n        maskInputFn,\n        slimDOMOptions,\n        dataURLOptions,\n        inlineImages,\n        recordCanvas,\n        preserveWhiteSpace,\n        onSerialize,\n        onIframeLoad,\n        iframeLoadTimeout,\n        onStylesheetLoad,\n        stylesheetLoadTimeout,\n        keepIframeSrcFn,\n        newlyAddedElement: false,\n    });\n}\n\nfunction _optionalChain$4(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\nfunction on(type, fn, target = document) {\n    const options = { capture: true, passive: true };\n    target.addEventListener(type, fn, options);\n    return () => target.removeEventListener(type, fn, options);\n}\nconst DEPARTED_MIRROR_ACCESS_WARNING = 'Please stop import mirror directly. Instead of that,' +\n    '\\r\\n' +\n    'now you can use replayer.getMirror() to access the mirror instance of a replayer,' +\n    '\\r\\n' +\n    'or you can use record.mirror to access the mirror instance during recording.';\nlet _mirror = {\n    map: {},\n    getId() {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n        return -1;\n    },\n    getNode() {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n        return null;\n    },\n    removeNodeFromMap() {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n    },\n    has() {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n        return false;\n    },\n    reset() {\n        console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n    },\n};\nif (typeof window !== 'undefined' && window.Proxy && window.Reflect) {\n    _mirror = new Proxy(_mirror, {\n        get(target, prop, receiver) {\n            if (prop === 'map') {\n                console.error(DEPARTED_MIRROR_ACCESS_WARNING);\n            }\n            return Reflect.get(target, prop, receiver);\n        },\n    });\n}\nfunction throttle$1(func, wait, options = {}) {\n    let timeout = null;\n    let previous = 0;\n    return function (...args) {\n        const now = Date.now();\n        if (!previous && options.leading === false) {\n            previous = now;\n        }\n        const remaining = wait - (now - previous);\n        const context = this;\n        if (remaining <= 0 || remaining > wait) {\n            if (timeout) {\n                clearTimeout$1(timeout);\n                timeout = null;\n            }\n            previous = now;\n            func.apply(context, args);\n        }\n        else if (!timeout && options.trailing !== false) {\n            timeout = setTimeout$1(() => {\n                previous = options.leading === false ? 0 : Date.now();\n                timeout = null;\n                func.apply(context, args);\n            }, remaining);\n        }\n    };\n}\nfunction hookSetter(target, key, d, isRevoked, win = window) {\n    const original = win.Object.getOwnPropertyDescriptor(target, key);\n    win.Object.defineProperty(target, key, isRevoked\n        ? d\n        : {\n            set(value) {\n                setTimeout$1(() => {\n                    d.set.call(this, value);\n                }, 0);\n                if (original && original.set) {\n                    original.set.call(this, value);\n                }\n            },\n        });\n    return () => hookSetter(target, key, original || {}, true);\n}\nfunction patch(source, name, replacement) {\n    try {\n        if (!(name in source)) {\n            return () => {\n            };\n        }\n        const original = source[name];\n        const wrapped = replacement(original);\n        if (typeof wrapped === 'function') {\n            wrapped.prototype = wrapped.prototype || {};\n            Object.defineProperties(wrapped, {\n                __rrweb_original__: {\n                    enumerable: false,\n                    value: original,\n                },\n            });\n        }\n        source[name] = wrapped;\n        return () => {\n            source[name] = original;\n        };\n    }\n    catch (e2) {\n        return () => {\n        };\n    }\n}\nlet nowTimestamp = Date.now;\nif (!(/[1-9][0-9]{12}/.test(Date.now().toString()))) {\n    nowTimestamp = () => new Date().getTime();\n}\nfunction getWindowScroll(win) {\n    const doc = win.document;\n    return {\n        left: doc.scrollingElement\n            ? doc.scrollingElement.scrollLeft\n            : win.pageXOffset !== undefined\n                ? win.pageXOffset\n                : _optionalChain$4([doc, 'optionalAccess', _ => _.documentElement, 'access', _2 => _2.scrollLeft]) ||\n                    _optionalChain$4([doc, 'optionalAccess', _3 => _3.body, 'optionalAccess', _4 => _4.parentElement, 'optionalAccess', _5 => _5.scrollLeft]) ||\n                    _optionalChain$4([doc, 'optionalAccess', _6 => _6.body, 'optionalAccess', _7 => _7.scrollLeft]) ||\n                    0,\n        top: doc.scrollingElement\n            ? doc.scrollingElement.scrollTop\n            : win.pageYOffset !== undefined\n                ? win.pageYOffset\n                : _optionalChain$4([doc, 'optionalAccess', _8 => _8.documentElement, 'access', _9 => _9.scrollTop]) ||\n                    _optionalChain$4([doc, 'optionalAccess', _10 => _10.body, 'optionalAccess', _11 => _11.parentElement, 'optionalAccess', _12 => _12.scrollTop]) ||\n                    _optionalChain$4([doc, 'optionalAccess', _13 => _13.body, 'optionalAccess', _14 => _14.scrollTop]) ||\n                    0,\n    };\n}\nfunction getWindowHeight() {\n    return (window.innerHeight ||\n        (document.documentElement && document.documentElement.clientHeight) ||\n        (document.body && document.body.clientHeight));\n}\nfunction getWindowWidth() {\n    return (window.innerWidth ||\n        (document.documentElement && document.documentElement.clientWidth) ||\n        (document.body && document.body.clientWidth));\n}\nfunction closestElementOfNode(node) {\n    if (!node) {\n        return null;\n    }\n    const el = node.nodeType === node.ELEMENT_NODE\n        ? node\n        : node.parentElement;\n    return el;\n}\nfunction isBlocked(node, blockClass, blockSelector, unblockSelector, checkAncestors) {\n    if (!node) {\n        return false;\n    }\n    const el = closestElementOfNode(node);\n    if (!el) {\n        return false;\n    }\n    const blockedPredicate = createMatchPredicate(blockClass, blockSelector);\n    if (!checkAncestors) {\n        const isUnblocked = unblockSelector && el.matches(unblockSelector);\n        return blockedPredicate(el) && !isUnblocked;\n    }\n    const blockDistance = distanceToMatch(el, blockedPredicate);\n    let unblockDistance = -1;\n    if (blockDistance < 0) {\n        return false;\n    }\n    if (unblockSelector) {\n        unblockDistance = distanceToMatch(el, createMatchPredicate(null, unblockSelector));\n    }\n    if (blockDistance > -1 && unblockDistance < 0) {\n        return true;\n    }\n    return blockDistance < unblockDistance;\n}\nfunction isSerialized(n, mirror) {\n    return mirror.getId(n) !== -1;\n}\nfunction isIgnored(n, mirror) {\n    return mirror.getId(n) === IGNORED_NODE;\n}\nfunction isAncestorRemoved(target, mirror) {\n    if (isShadowRoot(target)) {\n        return false;\n    }\n    const id = mirror.getId(target);\n    if (!mirror.has(id)) {\n        return true;\n    }\n    if (target.parentNode &&\n        target.parentNode.nodeType === target.DOCUMENT_NODE) {\n        return false;\n    }\n    if (!target.parentNode) {\n        return true;\n    }\n    return isAncestorRemoved(target.parentNode, mirror);\n}\nfunction legacy_isTouchEvent(event) {\n    return Boolean(event.changedTouches);\n}\nfunction polyfill(win = window) {\n    if ('NodeList' in win && !win.NodeList.prototype.forEach) {\n        win.NodeList.prototype.forEach = Array.prototype\n            .forEach;\n    }\n    if ('DOMTokenList' in win && !win.DOMTokenList.prototype.forEach) {\n        win.DOMTokenList.prototype.forEach = Array.prototype\n            .forEach;\n    }\n    if (!Node.prototype.contains) {\n        Node.prototype.contains = (...args) => {\n            let node = args[0];\n            if (!(0 in args)) {\n                throw new TypeError('1 argument is required');\n            }\n            do {\n                if (this === node) {\n                    return true;\n                }\n            } while ((node = node && node.parentNode));\n            return false;\n        };\n    }\n}\nfunction isSerializedIframe(n, mirror) {\n    return Boolean(n.nodeName === 'IFRAME' && mirror.getMeta(n));\n}\nfunction isSerializedStylesheet(n, mirror) {\n    return Boolean(n.nodeName === 'LINK' &&\n        n.nodeType === n.ELEMENT_NODE &&\n        n.getAttribute &&\n        n.getAttribute('rel') === 'stylesheet' &&\n        mirror.getMeta(n));\n}\nfunction hasShadowRoot(n) {\n    return Boolean(_optionalChain$4([n, 'optionalAccess', _18 => _18.shadowRoot]));\n}\nclass StyleSheetMirror {\n    constructor() {\n        this.id = 1;\n        this.styleIDMap = new WeakMap();\n        this.idStyleMap = new Map();\n    }\n    getId(stylesheet) {\n        return _nullishCoalesce(this.styleIDMap.get(stylesheet), () => ( -1));\n    }\n    has(stylesheet) {\n        return this.styleIDMap.has(stylesheet);\n    }\n    add(stylesheet, id) {\n        if (this.has(stylesheet))\n            return this.getId(stylesheet);\n        let newId;\n        if (id === undefined) {\n            newId = this.id++;\n        }\n        else\n            newId = id;\n        this.styleIDMap.set(stylesheet, newId);\n        this.idStyleMap.set(newId, stylesheet);\n        return newId;\n    }\n    getStyle(id) {\n        return this.idStyleMap.get(id) || null;\n    }\n    reset() {\n        this.styleIDMap = new WeakMap();\n        this.idStyleMap = new Map();\n        this.id = 1;\n    }\n    generateId() {\n        return this.id++;\n    }\n}\nfunction getShadowHost(n) {\n    let shadowHost = null;\n    if (_optionalChain$4([n, 'access', _19 => _19.getRootNode, 'optionalCall', _20 => _20(), 'optionalAccess', _21 => _21.nodeType]) === Node.DOCUMENT_FRAGMENT_NODE &&\n        n.getRootNode().host)\n        shadowHost = n.getRootNode().host;\n    return shadowHost;\n}\nfunction getRootShadowHost(n) {\n    let rootShadowHost = n;\n    let shadowHost;\n    while ((shadowHost = getShadowHost(rootShadowHost)))\n        rootShadowHost = shadowHost;\n    return rootShadowHost;\n}\nfunction shadowHostInDom(n) {\n    const doc = n.ownerDocument;\n    if (!doc)\n        return false;\n    const shadowHost = getRootShadowHost(n);\n    return doc.contains(shadowHost);\n}\nfunction inDom(n) {\n    const doc = n.ownerDocument;\n    if (!doc)\n        return false;\n    return doc.contains(n) || shadowHostInDom(n);\n}\nconst cachedImplementations = {};\nfunction getImplementation(name) {\n    const cached = cachedImplementations[name];\n    if (cached) {\n        return cached;\n    }\n    const document = window.document;\n    let impl = window[name];\n    if (document && typeof document.createElement === 'function') {\n        try {\n            const sandbox = document.createElement('iframe');\n            sandbox.hidden = true;\n            document.head.appendChild(sandbox);\n            const contentWindow = sandbox.contentWindow;\n            if (contentWindow && contentWindow[name]) {\n                impl =\n                    contentWindow[name];\n            }\n            document.head.removeChild(sandbox);\n        }\n        catch (e) {\n        }\n    }\n    return (cachedImplementations[name] = impl.bind(window));\n}\nfunction onRequestAnimationFrame(...rest) {\n    return getImplementation('requestAnimationFrame')(...rest);\n}\nfunction setTimeout$1(...rest) {\n    return getImplementation('setTimeout')(...rest);\n}\nfunction clearTimeout$1(...rest) {\n    return getImplementation('clearTimeout')(...rest);\n}\n\nvar EventType = /* @__PURE__ */ ((EventType2) => {\n  EventType2[EventType2[\"DomContentLoaded\"] = 0] = \"DomContentLoaded\";\n  EventType2[EventType2[\"Load\"] = 1] = \"Load\";\n  EventType2[EventType2[\"FullSnapshot\"] = 2] = \"FullSnapshot\";\n  EventType2[EventType2[\"IncrementalSnapshot\"] = 3] = \"IncrementalSnapshot\";\n  EventType2[EventType2[\"Meta\"] = 4] = \"Meta\";\n  EventType2[EventType2[\"Custom\"] = 5] = \"Custom\";\n  EventType2[EventType2[\"Plugin\"] = 6] = \"Plugin\";\n  return EventType2;\n})(EventType || {});\nvar IncrementalSource = /* @__PURE__ */ ((IncrementalSource2) => {\n  IncrementalSource2[IncrementalSource2[\"Mutation\"] = 0] = \"Mutation\";\n  IncrementalSource2[IncrementalSource2[\"MouseMove\"] = 1] = \"MouseMove\";\n  IncrementalSource2[IncrementalSource2[\"MouseInteraction\"] = 2] = \"MouseInteraction\";\n  IncrementalSource2[IncrementalSource2[\"Scroll\"] = 3] = \"Scroll\";\n  IncrementalSource2[IncrementalSource2[\"ViewportResize\"] = 4] = \"ViewportResize\";\n  IncrementalSource2[IncrementalSource2[\"Input\"] = 5] = \"Input\";\n  IncrementalSource2[IncrementalSource2[\"TouchMove\"] = 6] = \"TouchMove\";\n  IncrementalSource2[IncrementalSource2[\"MediaInteraction\"] = 7] = \"MediaInteraction\";\n  IncrementalSource2[IncrementalSource2[\"StyleSheetRule\"] = 8] = \"StyleSheetRule\";\n  IncrementalSource2[IncrementalSource2[\"CanvasMutation\"] = 9] = \"CanvasMutation\";\n  IncrementalSource2[IncrementalSource2[\"Font\"] = 10] = \"Font\";\n  IncrementalSource2[IncrementalSource2[\"Log\"] = 11] = \"Log\";\n  IncrementalSource2[IncrementalSource2[\"Drag\"] = 12] = \"Drag\";\n  IncrementalSource2[IncrementalSource2[\"StyleDeclaration\"] = 13] = \"StyleDeclaration\";\n  IncrementalSource2[IncrementalSource2[\"Selection\"] = 14] = \"Selection\";\n  IncrementalSource2[IncrementalSource2[\"AdoptedStyleSheet\"] = 15] = \"AdoptedStyleSheet\";\n  IncrementalSource2[IncrementalSource2[\"CustomElement\"] = 16] = \"CustomElement\";\n  return IncrementalSource2;\n})(IncrementalSource || {});\nvar MouseInteractions = /* @__PURE__ */ ((MouseInteractions2) => {\n  MouseInteractions2[MouseInteractions2[\"MouseUp\"] = 0] = \"MouseUp\";\n  MouseInteractions2[MouseInteractions2[\"MouseDown\"] = 1] = \"MouseDown\";\n  MouseInteractions2[MouseInteractions2[\"Click\"] = 2] = \"Click\";\n  MouseInteractions2[MouseInteractions2[\"ContextMenu\"] = 3] = \"ContextMenu\";\n  MouseInteractions2[MouseInteractions2[\"DblClick\"] = 4] = \"DblClick\";\n  MouseInteractions2[MouseInteractions2[\"Focus\"] = 5] = \"Focus\";\n  MouseInteractions2[MouseInteractions2[\"Blur\"] = 6] = \"Blur\";\n  MouseInteractions2[MouseInteractions2[\"TouchStart\"] = 7] = \"TouchStart\";\n  MouseInteractions2[MouseInteractions2[\"TouchMove_Departed\"] = 8] = \"TouchMove_Departed\";\n  MouseInteractions2[MouseInteractions2[\"TouchEnd\"] = 9] = \"TouchEnd\";\n  MouseInteractions2[MouseInteractions2[\"TouchCancel\"] = 10] = \"TouchCancel\";\n  return MouseInteractions2;\n})(MouseInteractions || {});\nvar PointerTypes = /* @__PURE__ */ ((PointerTypes2) => {\n  PointerTypes2[PointerTypes2[\"Mouse\"] = 0] = \"Mouse\";\n  PointerTypes2[PointerTypes2[\"Pen\"] = 1] = \"Pen\";\n  PointerTypes2[PointerTypes2[\"Touch\"] = 2] = \"Touch\";\n  return PointerTypes2;\n})(PointerTypes || {});\n\nfunction _optionalChain$3(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\nfunction isNodeInLinkedList(n) {\n    return '__ln' in n;\n}\nclass DoubleLinkedList {\n    constructor() {\n        this.length = 0;\n        this.head = null;\n        this.tail = null;\n    }\n    get(position) {\n        if (position >= this.length) {\n            throw new Error('Position outside of list range');\n        }\n        let current = this.head;\n        for (let index = 0; index < position; index++) {\n            current = _optionalChain$3([current, 'optionalAccess', _ => _.next]) || null;\n        }\n        return current;\n    }\n    addNode(n) {\n        const node = {\n            value: n,\n            previous: null,\n            next: null,\n        };\n        n.__ln = node;\n        if (n.previousSibling && isNodeInLinkedList(n.previousSibling)) {\n            const current = n.previousSibling.__ln.next;\n            node.next = current;\n            node.previous = n.previousSibling.__ln;\n            n.previousSibling.__ln.next = node;\n            if (current) {\n                current.previous = node;\n            }\n        }\n        else if (n.nextSibling &&\n            isNodeInLinkedList(n.nextSibling) &&\n            n.nextSibling.__ln.previous) {\n            const current = n.nextSibling.__ln.previous;\n            node.previous = current;\n            node.next = n.nextSibling.__ln;\n            n.nextSibling.__ln.previous = node;\n            if (current) {\n                current.next = node;\n            }\n        }\n        else {\n            if (this.head) {\n                this.head.previous = node;\n            }\n            node.next = this.head;\n            this.head = node;\n        }\n        if (node.next === null) {\n            this.tail = node;\n        }\n        this.length++;\n    }\n    removeNode(n) {\n        const current = n.__ln;\n        if (!this.head) {\n            return;\n        }\n        if (!current.previous) {\n            this.head = current.next;\n            if (this.head) {\n                this.head.previous = null;\n            }\n            else {\n                this.tail = null;\n            }\n        }\n        else {\n            current.previous.next = current.next;\n            if (current.next) {\n                current.next.previous = current.previous;\n            }\n            else {\n                this.tail = current.previous;\n            }\n        }\n        if (n.__ln) {\n            delete n.__ln;\n        }\n        this.length--;\n    }\n}\nconst moveKey = (id, parentId) => `${id}@${parentId}`;\nclass MutationBuffer {\n    constructor() {\n        this.frozen = false;\n        this.locked = false;\n        this.texts = [];\n        this.attributes = [];\n        this.attributeMap = new WeakMap();\n        this.removes = [];\n        this.mapRemoves = [];\n        this.movedMap = {};\n        this.addedSet = new Set();\n        this.movedSet = new Set();\n        this.droppedSet = new Set();\n        this.processMutations = (mutations) => {\n            mutations.forEach(this.processMutation);\n            this.emit();\n        };\n        this.emit = () => {\n            if (this.frozen || this.locked) {\n                return;\n            }\n            const adds = [];\n            const addedIds = new Set();\n            const addList = new DoubleLinkedList();\n            const getNextId = (n) => {\n                let ns = n;\n                let nextId = IGNORED_NODE;\n                while (nextId === IGNORED_NODE) {\n                    ns = ns && ns.nextSibling;\n                    nextId = ns && this.mirror.getId(ns);\n                }\n                return nextId;\n            };\n            const pushAdd = (n) => {\n                if (!n.parentNode || !inDom(n)) {\n                    return;\n                }\n                const parentId = isShadowRoot(n.parentNode)\n                    ? this.mirror.getId(getShadowHost(n))\n                    : this.mirror.getId(n.parentNode);\n                const nextId = getNextId(n);\n                if (parentId === -1 || nextId === -1) {\n                    return addList.addNode(n);\n                }\n                const sn = serializeNodeWithId(n, {\n                    doc: this.doc,\n                    mirror: this.mirror,\n                    blockClass: this.blockClass,\n                    blockSelector: this.blockSelector,\n                    maskAllText: this.maskAllText,\n                    unblockSelector: this.unblockSelector,\n                    maskTextClass: this.maskTextClass,\n                    unmaskTextClass: this.unmaskTextClass,\n                    maskTextSelector: this.maskTextSelector,\n                    unmaskTextSelector: this.unmaskTextSelector,\n                    skipChild: true,\n                    newlyAddedElement: true,\n                    inlineStylesheet: this.inlineStylesheet,\n                    maskInputOptions: this.maskInputOptions,\n                    maskAttributeFn: this.maskAttributeFn,\n                    maskTextFn: this.maskTextFn,\n                    maskInputFn: this.maskInputFn,\n                    slimDOMOptions: this.slimDOMOptions,\n                    dataURLOptions: this.dataURLOptions,\n                    recordCanvas: this.recordCanvas,\n                    inlineImages: this.inlineImages,\n                    onSerialize: (currentN) => {\n                        if (isSerializedIframe(currentN, this.mirror)) {\n                            this.iframeManager.addIframe(currentN);\n                        }\n                        if (isSerializedStylesheet(currentN, this.mirror)) {\n                            this.stylesheetManager.trackLinkElement(currentN);\n                        }\n                        if (hasShadowRoot(n)) {\n                            this.shadowDomManager.addShadowRoot(n.shadowRoot, this.doc);\n                        }\n                    },\n                    onIframeLoad: (iframe, childSn) => {\n                        this.iframeManager.attachIframe(iframe, childSn);\n                        this.shadowDomManager.observeAttachShadow(iframe);\n                    },\n                    onStylesheetLoad: (link, childSn) => {\n                        this.stylesheetManager.attachLinkElement(link, childSn);\n                    },\n                });\n                if (sn) {\n                    adds.push({\n                        parentId,\n                        nextId,\n                        node: sn,\n                    });\n                    addedIds.add(sn.id);\n                }\n            };\n            while (this.mapRemoves.length) {\n                this.mirror.removeNodeFromMap(this.mapRemoves.shift());\n            }\n            for (const n of this.movedSet) {\n                if (isParentRemoved(this.removes, n, this.mirror) &&\n                    !this.movedSet.has(n.parentNode)) {\n                    continue;\n                }\n                pushAdd(n);\n            }\n            for (const n of this.addedSet) {\n                if (!isAncestorInSet(this.droppedSet, n) &&\n                    !isParentRemoved(this.removes, n, this.mirror)) {\n                    pushAdd(n);\n                }\n                else if (isAncestorInSet(this.movedSet, n)) {\n                    pushAdd(n);\n                }\n                else {\n                    this.droppedSet.add(n);\n                }\n            }\n            let candidate = null;\n            while (addList.length) {\n                let node = null;\n                if (candidate) {\n                    const parentId = this.mirror.getId(candidate.value.parentNode);\n                    const nextId = getNextId(candidate.value);\n                    if (parentId !== -1 && nextId !== -1) {\n                        node = candidate;\n                    }\n                }\n                if (!node) {\n                    let tailNode = addList.tail;\n                    while (tailNode) {\n                        const _node = tailNode;\n                        tailNode = tailNode.previous;\n                        if (_node) {\n                            const parentId = this.mirror.getId(_node.value.parentNode);\n                            const nextId = getNextId(_node.value);\n                            if (nextId === -1)\n                                continue;\n                            else if (parentId !== -1) {\n                                node = _node;\n                                break;\n                            }\n                            else {\n                                const unhandledNode = _node.value;\n                                if (unhandledNode.parentNode &&\n                                    unhandledNode.parentNode.nodeType ===\n                                        Node.DOCUMENT_FRAGMENT_NODE) {\n                                    const shadowHost = unhandledNode.parentNode\n                                        .host;\n                                    const parentId = this.mirror.getId(shadowHost);\n                                    if (parentId !== -1) {\n                                        node = _node;\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!node) {\n                    while (addList.head) {\n                        addList.removeNode(addList.head.value);\n                    }\n                    break;\n                }\n                candidate = node.previous;\n                addList.removeNode(node.value);\n                pushAdd(node.value);\n            }\n            const payload = {\n                texts: this.texts\n                    .map((text) => ({\n                    id: this.mirror.getId(text.node),\n                    value: text.value,\n                }))\n                    .filter((text) => !addedIds.has(text.id))\n                    .filter((text) => this.mirror.has(text.id)),\n                attributes: this.attributes\n                    .map((attribute) => {\n                    const { attributes } = attribute;\n                    if (typeof attributes.style === 'string') {\n                        const diffAsStr = JSON.stringify(attribute.styleDiff);\n                        const unchangedAsStr = JSON.stringify(attribute._unchangedStyles);\n                        if (diffAsStr.length < attributes.style.length) {\n                            if ((diffAsStr + unchangedAsStr).split('var(').length ===\n                                attributes.style.split('var(').length) {\n                                attributes.style = attribute.styleDiff;\n                            }\n                        }\n                    }\n                    return {\n                        id: this.mirror.getId(attribute.node),\n                        attributes: attributes,\n                    };\n                })\n                    .filter((attribute) => !addedIds.has(attribute.id))\n                    .filter((attribute) => this.mirror.has(attribute.id)),\n                removes: this.removes,\n                adds,\n            };\n            if (!payload.texts.length &&\n                !payload.attributes.length &&\n                !payload.removes.length &&\n                !payload.adds.length) {\n                return;\n            }\n            this.texts = [];\n            this.attributes = [];\n            this.attributeMap = new WeakMap();\n            this.removes = [];\n            this.addedSet = new Set();\n            this.movedSet = new Set();\n            this.droppedSet = new Set();\n            this.movedMap = {};\n            this.mutationCb(payload);\n        };\n        this.processMutation = (m) => {\n            if (isIgnored(m.target, this.mirror)) {\n                return;\n            }\n            switch (m.type) {\n                case 'characterData': {\n                    const value = m.target.textContent;\n                    if (!isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector, false) &&\n                        value !== m.oldValue) {\n                        this.texts.push({\n                            value: needMaskingText(m.target, this.maskTextClass, this.maskTextSelector, this.unmaskTextClass, this.unmaskTextSelector, this.maskAllText) && value\n                                ? this.maskTextFn\n                                    ? this.maskTextFn(value, closestElementOfNode(m.target))\n                                    : value.replace(/[\\S]/g, '*')\n                                : value,\n                            node: m.target,\n                        });\n                    }\n                    break;\n                }\n                case 'attributes': {\n                    const target = m.target;\n                    let attributeName = m.attributeName;\n                    let value = m.target.getAttribute(attributeName);\n                    if (attributeName === 'value') {\n                        const type = getInputType(target);\n                        const tagName = target.tagName;\n                        value = getInputValue(target, tagName, type);\n                        const isInputMasked = shouldMaskInput({\n                            maskInputOptions: this.maskInputOptions,\n                            tagName,\n                            type,\n                        });\n                        const forceMask = needMaskingText(m.target, this.maskTextClass, this.maskTextSelector, this.unmaskTextClass, this.unmaskTextSelector, isInputMasked);\n                        value = maskInputValue({\n                            isMasked: forceMask,\n                            element: target,\n                            value,\n                            maskInputFn: this.maskInputFn,\n                        });\n                    }\n                    if (isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector, false) ||\n                        value === m.oldValue) {\n                        return;\n                    }\n                    let item = this.attributeMap.get(m.target);\n                    if (target.tagName === 'IFRAME' &&\n                        attributeName === 'src' &&\n                        !this.keepIframeSrcFn(value)) {\n                        if (!target.contentDocument) {\n                            attributeName = 'rr_src';\n                        }\n                        else {\n                            return;\n                        }\n                    }\n                    if (!item) {\n                        item = {\n                            node: m.target,\n                            attributes: {},\n                            styleDiff: {},\n                            _unchangedStyles: {},\n                        };\n                        this.attributes.push(item);\n                        this.attributeMap.set(m.target, item);\n                    }\n                    if (attributeName === 'type' &&\n                        target.tagName === 'INPUT' &&\n                        (m.oldValue || '').toLowerCase() === 'password') {\n                        target.setAttribute('data-rr-is-password', 'true');\n                    }\n                    if (!ignoreAttribute(target.tagName, attributeName)) {\n                        item.attributes[attributeName] = transformAttribute(this.doc, toLowerCase(target.tagName), toLowerCase(attributeName), value, target, this.maskAttributeFn);\n                        if (attributeName === 'style') {\n                            if (!this.unattachedDoc) {\n                                try {\n                                    this.unattachedDoc =\n                                        document.implementation.createHTMLDocument();\n                                }\n                                catch (e) {\n                                    this.unattachedDoc = this.doc;\n                                }\n                            }\n                            const old = this.unattachedDoc.createElement('span');\n                            if (m.oldValue) {\n                                old.setAttribute('style', m.oldValue);\n                            }\n                            for (const pname of Array.from(target.style)) {\n                                const newValue = target.style.getPropertyValue(pname);\n                                const newPriority = target.style.getPropertyPriority(pname);\n                                if (newValue !== old.style.getPropertyValue(pname) ||\n                                    newPriority !== old.style.getPropertyPriority(pname)) {\n                                    if (newPriority === '') {\n                                        item.styleDiff[pname] = newValue;\n                                    }\n                                    else {\n                                        item.styleDiff[pname] = [newValue, newPriority];\n                                    }\n                                }\n                                else {\n                                    item._unchangedStyles[pname] = [newValue, newPriority];\n                                }\n                            }\n                            for (const pname of Array.from(old.style)) {\n                                if (target.style.getPropertyValue(pname) === '') {\n                                    item.styleDiff[pname] = false;\n                                }\n                            }\n                        }\n                    }\n                    break;\n                }\n                case 'childList': {\n                    if (isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector, true)) {\n                        return;\n                    }\n                    m.addedNodes.forEach((n) => this.genAdds(n, m.target));\n                    m.removedNodes.forEach((n) => {\n                        const nodeId = this.mirror.getId(n);\n                        const parentId = isShadowRoot(m.target)\n                            ? this.mirror.getId(m.target.host)\n                            : this.mirror.getId(m.target);\n                        if (isBlocked(m.target, this.blockClass, this.blockSelector, this.unblockSelector, false) ||\n                            isIgnored(n, this.mirror) ||\n                            !isSerialized(n, this.mirror)) {\n                            return;\n                        }\n                        if (this.addedSet.has(n)) {\n                            deepDelete(this.addedSet, n);\n                            this.droppedSet.add(n);\n                        }\n                        else if (this.addedSet.has(m.target) && nodeId === -1) ;\n                        else if (isAncestorRemoved(m.target, this.mirror)) ;\n                        else if (this.movedSet.has(n) &&\n                            this.movedMap[moveKey(nodeId, parentId)]) {\n                            deepDelete(this.movedSet, n);\n                        }\n                        else {\n                            this.removes.push({\n                                parentId,\n                                id: nodeId,\n                                isShadow: isShadowRoot(m.target) && isNativeShadowDom(m.target)\n                                    ? true\n                                    : undefined,\n                            });\n                        }\n                        this.mapRemoves.push(n);\n                    });\n                    break;\n                }\n            }\n        };\n        this.genAdds = (n, target) => {\n            if (this.processedNodeManager.inOtherBuffer(n, this))\n                return;\n            if (this.addedSet.has(n) || this.movedSet.has(n))\n                return;\n            if (this.mirror.hasNode(n)) {\n                if (isIgnored(n, this.mirror)) {\n                    return;\n                }\n                this.movedSet.add(n);\n                let targetId = null;\n                if (target && this.mirror.hasNode(target)) {\n                    targetId = this.mirror.getId(target);\n                }\n                if (targetId && targetId !== -1) {\n                    this.movedMap[moveKey(this.mirror.getId(n), targetId)] = true;\n                }\n            }\n            else {\n                this.addedSet.add(n);\n                this.droppedSet.delete(n);\n            }\n            if (!isBlocked(n, this.blockClass, this.blockSelector, this.unblockSelector, false)) {\n                n.childNodes.forEach((childN) => this.genAdds(childN));\n                if (hasShadowRoot(n)) {\n                    n.shadowRoot.childNodes.forEach((childN) => {\n                        this.processedNodeManager.add(childN, this);\n                        this.genAdds(childN, n);\n                    });\n                }\n            }\n        };\n    }\n    init(options) {\n        [\n            'mutationCb',\n            'blockClass',\n            'blockSelector',\n            'unblockSelector',\n            'maskAllText',\n            'maskTextClass',\n            'unmaskTextClass',\n            'maskTextSelector',\n            'unmaskTextSelector',\n            'inlineStylesheet',\n            'maskInputOptions',\n            'maskAttributeFn',\n            'maskTextFn',\n            'maskInputFn',\n            'keepIframeSrcFn',\n            'recordCanvas',\n            'inlineImages',\n            'slimDOMOptions',\n            'dataURLOptions',\n            'doc',\n            'mirror',\n            'iframeManager',\n            'stylesheetManager',\n            'shadowDomManager',\n            'canvasManager',\n            'processedNodeManager',\n        ].forEach((key) => {\n            this[key] = options[key];\n        });\n    }\n    freeze() {\n        this.frozen = true;\n        this.canvasManager.freeze();\n    }\n    unfreeze() {\n        this.frozen = false;\n        this.canvasManager.unfreeze();\n        this.emit();\n    }\n    isFrozen() {\n        return this.frozen;\n    }\n    lock() {\n        this.locked = true;\n        this.canvasManager.lock();\n    }\n    unlock() {\n        this.locked = false;\n        this.canvasManager.unlock();\n        this.emit();\n    }\n    reset() {\n        this.shadowDomManager.reset();\n        this.canvasManager.reset();\n    }\n}\nfunction deepDelete(addsSet, n) {\n    addsSet.delete(n);\n    n.childNodes.forEach((childN) => deepDelete(addsSet, childN));\n}\nfunction isParentRemoved(removes, n, mirror) {\n    if (removes.length === 0)\n        return false;\n    return _isParentRemoved(removes, n, mirror);\n}\nfunction _isParentRemoved(removes, n, mirror) {\n    const { parentNode } = n;\n    if (!parentNode) {\n        return false;\n    }\n    const parentId = mirror.getId(parentNode);\n    if (removes.some((r) => r.id === parentId)) {\n        return true;\n    }\n    return _isParentRemoved(removes, parentNode, mirror);\n}\nfunction isAncestorInSet(set, n) {\n    if (set.size === 0)\n        return false;\n    return _isAncestorInSet(set, n);\n}\nfunction _isAncestorInSet(set, n) {\n    const { parentNode } = n;\n    if (!parentNode) {\n        return false;\n    }\n    if (set.has(parentNode)) {\n        return true;\n    }\n    return _isAncestorInSet(set, parentNode);\n}\n\nlet errorHandler;\nfunction registerErrorHandler(handler) {\n    errorHandler = handler;\n}\nfunction unregisterErrorHandler() {\n    errorHandler = undefined;\n}\nconst callbackWrapper = (cb) => {\n    if (!errorHandler) {\n        return cb;\n    }\n    const rrwebWrapped = ((...rest) => {\n        try {\n            return cb(...rest);\n        }\n        catch (error) {\n            if (errorHandler && errorHandler(error) === true) {\n                return () => {\n                };\n            }\n            throw error;\n        }\n    });\n    return rrwebWrapped;\n};\n\nfunction _optionalChain$2(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\nconst mutationBuffers = [];\nfunction getEventTarget(event) {\n    try {\n        if ('composedPath' in event) {\n            const path = event.composedPath();\n            if (path.length) {\n                return path[0];\n            }\n        }\n        else if ('path' in event && event.path.length) {\n            return event.path[0];\n        }\n    }\n    catch (e2) {\n    }\n    return event && event.target;\n}\nfunction initMutationObserver(options, rootEl) {\n    const mutationBuffer = new MutationBuffer();\n    mutationBuffers.push(mutationBuffer);\n    mutationBuffer.init(options);\n    let mutationObserverCtor = window.MutationObserver ||\n        window.__rrMutationObserver;\n    const angularZoneSymbol = _optionalChain$2([window, 'optionalAccess', _ => _.Zone, 'optionalAccess', _2 => _2.__symbol__, 'optionalCall', _3 => _3('MutationObserver')]);\n    if (angularZoneSymbol &&\n        window[angularZoneSymbol]) {\n        mutationObserverCtor = window[angularZoneSymbol];\n    }\n    const observer = new mutationObserverCtor(callbackWrapper((mutations) => {\n        if (options.onMutation && options.onMutation(mutations) === false) {\n            return;\n        }\n        mutationBuffer.processMutations.bind(mutationBuffer)(mutations);\n    }));\n    observer.observe(rootEl, {\n        attributes: true,\n        attributeOldValue: true,\n        characterData: true,\n        characterDataOldValue: true,\n        childList: true,\n        subtree: true,\n    });\n    return observer;\n}\nfunction initMoveObserver({ mousemoveCb, sampling, doc, mirror, }) {\n    if (sampling.mousemove === false) {\n        return () => {\n        };\n    }\n    const threshold = typeof sampling.mousemove === 'number' ? sampling.mousemove : 50;\n    const callbackThreshold = typeof sampling.mousemoveCallback === 'number'\n        ? sampling.mousemoveCallback\n        : 500;\n    let positions = [];\n    let timeBaseline;\n    const wrappedCb = throttle$1(callbackWrapper((source) => {\n        const totalOffset = Date.now() - timeBaseline;\n        mousemoveCb(positions.map((p) => {\n            p.timeOffset -= totalOffset;\n            return p;\n        }), source);\n        positions = [];\n        timeBaseline = null;\n    }), callbackThreshold);\n    const updatePosition = callbackWrapper(throttle$1(callbackWrapper((evt) => {\n        const target = getEventTarget(evt);\n        const { clientX, clientY } = legacy_isTouchEvent(evt)\n            ? evt.changedTouches[0]\n            : evt;\n        if (!timeBaseline) {\n            timeBaseline = nowTimestamp();\n        }\n        positions.push({\n            x: clientX,\n            y: clientY,\n            id: mirror.getId(target),\n            timeOffset: nowTimestamp() - timeBaseline,\n        });\n        wrappedCb(typeof DragEvent !== 'undefined' && evt instanceof DragEvent\n            ? IncrementalSource.Drag\n            : evt instanceof MouseEvent\n                ? IncrementalSource.MouseMove\n                : IncrementalSource.TouchMove);\n    }), threshold, {\n        trailing: false,\n    }));\n    const handlers = [\n        on('mousemove', updatePosition, doc),\n        on('touchmove', updatePosition, doc),\n        on('drag', updatePosition, doc),\n    ];\n    return callbackWrapper(() => {\n        handlers.forEach((h) => h());\n    });\n}\nfunction initMouseInteractionObserver({ mouseInteractionCb, doc, mirror, blockClass, blockSelector, unblockSelector, sampling, }) {\n    if (sampling.mouseInteraction === false) {\n        return () => {\n        };\n    }\n    const disableMap = sampling.mouseInteraction === true ||\n        sampling.mouseInteraction === undefined\n        ? {}\n        : sampling.mouseInteraction;\n    const handlers = [];\n    let currentPointerType = null;\n    const getHandler = (eventKey) => {\n        return (event) => {\n            const target = getEventTarget(event);\n            if (isBlocked(target, blockClass, blockSelector, unblockSelector, true)) {\n                return;\n            }\n            let pointerType = null;\n            let thisEventKey = eventKey;\n            if ('pointerType' in event) {\n                switch (event.pointerType) {\n                    case 'mouse':\n                        pointerType = PointerTypes.Mouse;\n                        break;\n                    case 'touch':\n                        pointerType = PointerTypes.Touch;\n                        break;\n                    case 'pen':\n                        pointerType = PointerTypes.Pen;\n                        break;\n                }\n                if (pointerType === PointerTypes.Touch) {\n                    if (MouseInteractions[eventKey] === MouseInteractions.MouseDown) {\n                        thisEventKey = 'TouchStart';\n                    }\n                    else if (MouseInteractions[eventKey] === MouseInteractions.MouseUp) {\n                        thisEventKey = 'TouchEnd';\n                    }\n                }\n                else if (pointerType === PointerTypes.Pen) ;\n            }\n            else if (legacy_isTouchEvent(event)) {\n                pointerType = PointerTypes.Touch;\n            }\n            if (pointerType !== null) {\n                currentPointerType = pointerType;\n                if ((thisEventKey.startsWith('Touch') &&\n                    pointerType === PointerTypes.Touch) ||\n                    (thisEventKey.startsWith('Mouse') &&\n                        pointerType === PointerTypes.Mouse)) {\n                    pointerType = null;\n                }\n            }\n            else if (MouseInteractions[eventKey] === MouseInteractions.Click) {\n                pointerType = currentPointerType;\n                currentPointerType = null;\n            }\n            const e = legacy_isTouchEvent(event) ? event.changedTouches[0] : event;\n            if (!e) {\n                return;\n            }\n            const id = mirror.getId(target);\n            const { clientX, clientY } = e;\n            callbackWrapper(mouseInteractionCb)({\n                type: MouseInteractions[thisEventKey],\n                id,\n                x: clientX,\n                y: clientY,\n                ...(pointerType !== null && { pointerType }),\n            });\n        };\n    };\n    Object.keys(MouseInteractions)\n        .filter((key) => Number.isNaN(Number(key)) &&\n        !key.endsWith('_Departed') &&\n        disableMap[key] !== false)\n        .forEach((eventKey) => {\n        let eventName = toLowerCase(eventKey);\n        const handler = getHandler(eventKey);\n        if (window.PointerEvent) {\n            switch (MouseInteractions[eventKey]) {\n                case MouseInteractions.MouseDown:\n                case MouseInteractions.MouseUp:\n                    eventName = eventName.replace('mouse', 'pointer');\n                    break;\n                case MouseInteractions.TouchStart:\n                case MouseInteractions.TouchEnd:\n                    return;\n            }\n        }\n        handlers.push(on(eventName, handler, doc));\n    });\n    return callbackWrapper(() => {\n        handlers.forEach((h) => h());\n    });\n}\nfunction initScrollObserver({ scrollCb, doc, mirror, blockClass, blockSelector, unblockSelector, sampling, }) {\n    const updatePosition = callbackWrapper(throttle$1(callbackWrapper((evt) => {\n        const target = getEventTarget(evt);\n        if (!target ||\n            isBlocked(target, blockClass, blockSelector, unblockSelector, true)) {\n            return;\n        }\n        const id = mirror.getId(target);\n        if (target === doc && doc.defaultView) {\n            const scrollLeftTop = getWindowScroll(doc.defaultView);\n            scrollCb({\n                id,\n                x: scrollLeftTop.left,\n                y: scrollLeftTop.top,\n            });\n        }\n        else {\n            scrollCb({\n                id,\n                x: target.scrollLeft,\n                y: target.scrollTop,\n            });\n        }\n    }), sampling.scroll || 100));\n    return on('scroll', updatePosition, doc);\n}\nfunction initViewportResizeObserver({ viewportResizeCb }, { win }) {\n    let lastH = -1;\n    let lastW = -1;\n    const updateDimension = callbackWrapper(throttle$1(callbackWrapper(() => {\n        const height = getWindowHeight();\n        const width = getWindowWidth();\n        if (lastH !== height || lastW !== width) {\n            viewportResizeCb({\n                width: Number(width),\n                height: Number(height),\n            });\n            lastH = height;\n            lastW = width;\n        }\n    }), 200));\n    return on('resize', updateDimension, win);\n}\nconst INPUT_TAGS = ['INPUT', 'TEXTAREA', 'SELECT'];\nconst lastInputValueMap = new WeakMap();\nfunction initInputObserver({ inputCb, doc, mirror, blockClass, blockSelector, unblockSelector, ignoreClass, ignoreSelector, maskInputOptions, maskInputFn, sampling, userTriggeredOnInput, maskTextClass, unmaskTextClass, maskTextSelector, unmaskTextSelector, }) {\n    function eventHandler(event) {\n        let target = getEventTarget(event);\n        const userTriggered = event.isTrusted;\n        const tagName = target && toUpperCase(target.tagName);\n        if (tagName === 'OPTION')\n            target = target.parentElement;\n        if (!target ||\n            !tagName ||\n            INPUT_TAGS.indexOf(tagName) < 0 ||\n            isBlocked(target, blockClass, blockSelector, unblockSelector, true)) {\n            return;\n        }\n        const el = target;\n        if (el.classList.contains(ignoreClass) ||\n            (ignoreSelector && el.matches(ignoreSelector))) {\n            return;\n        }\n        const type = getInputType(target);\n        let text = getInputValue(el, tagName, type);\n        let isChecked = false;\n        const isInputMasked = shouldMaskInput({\n            maskInputOptions,\n            tagName,\n            type,\n        });\n        const forceMask = needMaskingText(target, maskTextClass, maskTextSelector, unmaskTextClass, unmaskTextSelector, isInputMasked);\n        if (type === 'radio' || type === 'checkbox') {\n            isChecked = target.checked;\n        }\n        text = maskInputValue({\n            isMasked: forceMask,\n            element: target,\n            value: text,\n            maskInputFn,\n        });\n        cbWithDedup(target, userTriggeredOnInput\n            ? { text, isChecked, userTriggered }\n            : { text, isChecked });\n        const name = target.name;\n        if (type === 'radio' && name && isChecked) {\n            doc\n                .querySelectorAll(`input[type=\"radio\"][name=\"${name}\"]`)\n                .forEach((el) => {\n                if (el !== target) {\n                    const text = maskInputValue({\n                        isMasked: forceMask,\n                        element: el,\n                        value: getInputValue(el, tagName, type),\n                        maskInputFn,\n                    });\n                    cbWithDedup(el, userTriggeredOnInput\n                        ? { text, isChecked: !isChecked, userTriggered: false }\n                        : { text, isChecked: !isChecked });\n                }\n            });\n        }\n    }\n    function cbWithDedup(target, v) {\n        const lastInputValue = lastInputValueMap.get(target);\n        if (!lastInputValue ||\n            lastInputValue.text !== v.text ||\n            lastInputValue.isChecked !== v.isChecked) {\n            lastInputValueMap.set(target, v);\n            const id = mirror.getId(target);\n            callbackWrapper(inputCb)({\n                ...v,\n                id,\n            });\n        }\n    }\n    const events = sampling.input === 'last' ? ['change'] : ['input', 'change'];\n    const handlers = events.map((eventName) => on(eventName, callbackWrapper(eventHandler), doc));\n    const currentWindow = doc.defaultView;\n    if (!currentWindow) {\n        return () => {\n            handlers.forEach((h) => h());\n        };\n    }\n    const propertyDescriptor = currentWindow.Object.getOwnPropertyDescriptor(currentWindow.HTMLInputElement.prototype, 'value');\n    const hookProperties = [\n        [currentWindow.HTMLInputElement.prototype, 'value'],\n        [currentWindow.HTMLInputElement.prototype, 'checked'],\n        [currentWindow.HTMLSelectElement.prototype, 'value'],\n        [currentWindow.HTMLTextAreaElement.prototype, 'value'],\n        [currentWindow.HTMLSelectElement.prototype, 'selectedIndex'],\n        [currentWindow.HTMLOptionElement.prototype, 'selected'],\n    ];\n    if (propertyDescriptor && propertyDescriptor.set) {\n        handlers.push(...hookProperties.map((p) => hookSetter(p[0], p[1], {\n            set() {\n                callbackWrapper(eventHandler)({\n                    target: this,\n                    isTrusted: false,\n                });\n            },\n        }, false, currentWindow)));\n    }\n    return callbackWrapper(() => {\n        handlers.forEach((h) => h());\n    });\n}\nfunction getNestedCSSRulePositions(rule) {\n    const positions = [];\n    function recurse(childRule, pos) {\n        if ((hasNestedCSSRule('CSSGroupingRule') &&\n            childRule.parentRule instanceof CSSGroupingRule) ||\n            (hasNestedCSSRule('CSSMediaRule') &&\n                childRule.parentRule instanceof CSSMediaRule) ||\n            (hasNestedCSSRule('CSSSupportsRule') &&\n                childRule.parentRule instanceof CSSSupportsRule) ||\n            (hasNestedCSSRule('CSSConditionRule') &&\n                childRule.parentRule instanceof CSSConditionRule)) {\n            const rules = Array.from(childRule.parentRule.cssRules);\n            const index = rules.indexOf(childRule);\n            pos.unshift(index);\n        }\n        else if (childRule.parentStyleSheet) {\n            const rules = Array.from(childRule.parentStyleSheet.cssRules);\n            const index = rules.indexOf(childRule);\n            pos.unshift(index);\n        }\n        return pos;\n    }\n    return recurse(rule, positions);\n}\nfunction getIdAndStyleId(sheet, mirror, styleMirror) {\n    let id, styleId;\n    if (!sheet)\n        return {};\n    if (sheet.ownerNode)\n        id = mirror.getId(sheet.ownerNode);\n    else\n        styleId = styleMirror.getId(sheet);\n    return {\n        styleId,\n        id,\n    };\n}\nfunction initStyleSheetObserver({ styleSheetRuleCb, mirror, stylesheetManager }, { win }) {\n    if (!win.CSSStyleSheet || !win.CSSStyleSheet.prototype) {\n        return () => {\n        };\n    }\n    const insertRule = win.CSSStyleSheet.prototype.insertRule;\n    win.CSSStyleSheet.prototype.insertRule = new Proxy(insertRule, {\n        apply: callbackWrapper((target, thisArg, argumentsList) => {\n            const [rule, index] = argumentsList;\n            const { id, styleId } = getIdAndStyleId(thisArg, mirror, stylesheetManager.styleMirror);\n            if ((id && id !== -1) || (styleId && styleId !== -1)) {\n                styleSheetRuleCb({\n                    id,\n                    styleId,\n                    adds: [{ rule, index }],\n                });\n            }\n            return target.apply(thisArg, argumentsList);\n        }),\n    });\n    const deleteRule = win.CSSStyleSheet.prototype.deleteRule;\n    win.CSSStyleSheet.prototype.deleteRule = new Proxy(deleteRule, {\n        apply: callbackWrapper((target, thisArg, argumentsList) => {\n            const [index] = argumentsList;\n            const { id, styleId } = getIdAndStyleId(thisArg, mirror, stylesheetManager.styleMirror);\n            if ((id && id !== -1) || (styleId && styleId !== -1)) {\n                styleSheetRuleCb({\n                    id,\n                    styleId,\n                    removes: [{ index }],\n                });\n            }\n            return target.apply(thisArg, argumentsList);\n        }),\n    });\n    let replace;\n    if (win.CSSStyleSheet.prototype.replace) {\n        replace = win.CSSStyleSheet.prototype.replace;\n        win.CSSStyleSheet.prototype.replace = new Proxy(replace, {\n            apply: callbackWrapper((target, thisArg, argumentsList) => {\n                const [text] = argumentsList;\n                const { id, styleId } = getIdAndStyleId(thisArg, mirror, stylesheetManager.styleMirror);\n                if ((id && id !== -1) || (styleId && styleId !== -1)) {\n                    styleSheetRuleCb({\n                        id,\n                        styleId,\n                        replace: text,\n                    });\n                }\n                return target.apply(thisArg, argumentsList);\n            }),\n        });\n    }\n    let replaceSync;\n    if (win.CSSStyleSheet.prototype.replaceSync) {\n        replaceSync = win.CSSStyleSheet.prototype.replaceSync;\n        win.CSSStyleSheet.prototype.replaceSync = new Proxy(replaceSync, {\n            apply: callbackWrapper((target, thisArg, argumentsList) => {\n                const [text] = argumentsList;\n                const { id, styleId } = getIdAndStyleId(thisArg, mirror, stylesheetManager.styleMirror);\n                if ((id && id !== -1) || (styleId && styleId !== -1)) {\n                    styleSheetRuleCb({\n                        id,\n                        styleId,\n                        replaceSync: text,\n                    });\n                }\n                return target.apply(thisArg, argumentsList);\n            }),\n        });\n    }\n    const supportedNestedCSSRuleTypes = {};\n    if (canMonkeyPatchNestedCSSRule('CSSGroupingRule')) {\n        supportedNestedCSSRuleTypes.CSSGroupingRule = win.CSSGroupingRule;\n    }\n    else {\n        if (canMonkeyPatchNestedCSSRule('CSSMediaRule')) {\n            supportedNestedCSSRuleTypes.CSSMediaRule = win.CSSMediaRule;\n        }\n        if (canMonkeyPatchNestedCSSRule('CSSConditionRule')) {\n            supportedNestedCSSRuleTypes.CSSConditionRule = win.CSSConditionRule;\n        }\n        if (canMonkeyPatchNestedCSSRule('CSSSupportsRule')) {\n            supportedNestedCSSRuleTypes.CSSSupportsRule = win.CSSSupportsRule;\n        }\n    }\n    const unmodifiedFunctions = {};\n    Object.entries(supportedNestedCSSRuleTypes).forEach(([typeKey, type]) => {\n        unmodifiedFunctions[typeKey] = {\n            insertRule: type.prototype.insertRule,\n            deleteRule: type.prototype.deleteRule,\n        };\n        type.prototype.insertRule = new Proxy(unmodifiedFunctions[typeKey].insertRule, {\n            apply: callbackWrapper((target, thisArg, argumentsList) => {\n                const [rule, index] = argumentsList;\n                const { id, styleId } = getIdAndStyleId(thisArg.parentStyleSheet, mirror, stylesheetManager.styleMirror);\n                if ((id && id !== -1) || (styleId && styleId !== -1)) {\n                    styleSheetRuleCb({\n                        id,\n                        styleId,\n                        adds: [\n                            {\n                                rule,\n                                index: [\n                                    ...getNestedCSSRulePositions(thisArg),\n                                    index || 0,\n                                ],\n                            },\n                        ],\n                    });\n                }\n                return target.apply(thisArg, argumentsList);\n            }),\n        });\n        type.prototype.deleteRule = new Proxy(unmodifiedFunctions[typeKey].deleteRule, {\n            apply: callbackWrapper((target, thisArg, argumentsList) => {\n                const [index] = argumentsList;\n                const { id, styleId } = getIdAndStyleId(thisArg.parentStyleSheet, mirror, stylesheetManager.styleMirror);\n                if ((id && id !== -1) || (styleId && styleId !== -1)) {\n                    styleSheetRuleCb({\n                        id,\n                        styleId,\n                        removes: [\n                            { index: [...getNestedCSSRulePositions(thisArg), index] },\n                        ],\n                    });\n                }\n                return target.apply(thisArg, argumentsList);\n            }),\n        });\n    });\n    return callbackWrapper(() => {\n        win.CSSStyleSheet.prototype.insertRule = insertRule;\n        win.CSSStyleSheet.prototype.deleteRule = deleteRule;\n        replace && (win.CSSStyleSheet.prototype.replace = replace);\n        replaceSync && (win.CSSStyleSheet.prototype.replaceSync = replaceSync);\n        Object.entries(supportedNestedCSSRuleTypes).forEach(([typeKey, type]) => {\n            type.prototype.insertRule = unmodifiedFunctions[typeKey].insertRule;\n            type.prototype.deleteRule = unmodifiedFunctions[typeKey].deleteRule;\n        });\n    });\n}\nfunction initAdoptedStyleSheetObserver({ mirror, stylesheetManager, }, host) {\n    let hostId = null;\n    if (host.nodeName === '#document')\n        hostId = mirror.getId(host);\n    else\n        hostId = mirror.getId(host.host);\n    const patchTarget = host.nodeName === '#document'\n        ? _optionalChain$2([host, 'access', _4 => _4.defaultView, 'optionalAccess', _5 => _5.Document])\n        : _optionalChain$2([host, 'access', _6 => _6.ownerDocument, 'optionalAccess', _7 => _7.defaultView, 'optionalAccess', _8 => _8.ShadowRoot]);\n    const originalPropertyDescriptor = _optionalChain$2([patchTarget, 'optionalAccess', _9 => _9.prototype])\n        ? Object.getOwnPropertyDescriptor(_optionalChain$2([patchTarget, 'optionalAccess', _10 => _10.prototype]), 'adoptedStyleSheets')\n        : undefined;\n    if (hostId === null ||\n        hostId === -1 ||\n        !patchTarget ||\n        !originalPropertyDescriptor)\n        return () => {\n        };\n    Object.defineProperty(host, 'adoptedStyleSheets', {\n        configurable: originalPropertyDescriptor.configurable,\n        enumerable: originalPropertyDescriptor.enumerable,\n        get() {\n            return _optionalChain$2([originalPropertyDescriptor, 'access', _11 => _11.get, 'optionalAccess', _12 => _12.call, 'call', _13 => _13(this)]);\n        },\n        set(sheets) {\n            const result = _optionalChain$2([originalPropertyDescriptor, 'access', _14 => _14.set, 'optionalAccess', _15 => _15.call, 'call', _16 => _16(this, sheets)]);\n            if (hostId !== null && hostId !== -1) {\n                try {\n                    stylesheetManager.adoptStyleSheets(sheets, hostId);\n                }\n                catch (e) {\n                }\n            }\n            return result;\n        },\n    });\n    return callbackWrapper(() => {\n        Object.defineProperty(host, 'adoptedStyleSheets', {\n            configurable: originalPropertyDescriptor.configurable,\n            enumerable: originalPropertyDescriptor.enumerable,\n            get: originalPropertyDescriptor.get,\n            set: originalPropertyDescriptor.set,\n        });\n    });\n}\nfunction initStyleDeclarationObserver({ styleDeclarationCb, mirror, ignoreCSSAttributes, stylesheetManager, }, { win }) {\n    const setProperty = win.CSSStyleDeclaration.prototype.setProperty;\n    win.CSSStyleDeclaration.prototype.setProperty = new Proxy(setProperty, {\n        apply: callbackWrapper((target, thisArg, argumentsList) => {\n            const [property, value, priority] = argumentsList;\n            if (ignoreCSSAttributes.has(property)) {\n                return setProperty.apply(thisArg, [property, value, priority]);\n            }\n            const { id, styleId } = getIdAndStyleId(_optionalChain$2([thisArg, 'access', _17 => _17.parentRule, 'optionalAccess', _18 => _18.parentStyleSheet]), mirror, stylesheetManager.styleMirror);\n            if ((id && id !== -1) || (styleId && styleId !== -1)) {\n                styleDeclarationCb({\n                    id,\n                    styleId,\n                    set: {\n                        property,\n                        value,\n                        priority,\n                    },\n                    index: getNestedCSSRulePositions(thisArg.parentRule),\n                });\n            }\n            return target.apply(thisArg, argumentsList);\n        }),\n    });\n    const removeProperty = win.CSSStyleDeclaration.prototype.removeProperty;\n    win.CSSStyleDeclaration.prototype.removeProperty = new Proxy(removeProperty, {\n        apply: callbackWrapper((target, thisArg, argumentsList) => {\n            const [property] = argumentsList;\n            if (ignoreCSSAttributes.has(property)) {\n                return removeProperty.apply(thisArg, [property]);\n            }\n            const { id, styleId } = getIdAndStyleId(_optionalChain$2([thisArg, 'access', _19 => _19.parentRule, 'optionalAccess', _20 => _20.parentStyleSheet]), mirror, stylesheetManager.styleMirror);\n            if ((id && id !== -1) || (styleId && styleId !== -1)) {\n                styleDeclarationCb({\n                    id,\n                    styleId,\n                    remove: {\n                        property,\n                    },\n                    index: getNestedCSSRulePositions(thisArg.parentRule),\n                });\n            }\n            return target.apply(thisArg, argumentsList);\n        }),\n    });\n    return callbackWrapper(() => {\n        win.CSSStyleDeclaration.prototype.setProperty = setProperty;\n        win.CSSStyleDeclaration.prototype.removeProperty = removeProperty;\n    });\n}\nfunction initMediaInteractionObserver({ mediaInteractionCb, blockClass, blockSelector, unblockSelector, mirror, sampling, doc, }) {\n    const handler = callbackWrapper((type) => throttle$1(callbackWrapper((event) => {\n        const target = getEventTarget(event);\n        if (!target ||\n            isBlocked(target, blockClass, blockSelector, unblockSelector, true)) {\n            return;\n        }\n        const { currentTime, volume, muted, playbackRate } = target;\n        mediaInteractionCb({\n            type,\n            id: mirror.getId(target),\n            currentTime,\n            volume,\n            muted,\n            playbackRate,\n        });\n    }), sampling.media || 500));\n    const handlers = [\n        on('play', handler(0), doc),\n        on('pause', handler(1), doc),\n        on('seeked', handler(2), doc),\n        on('volumechange', handler(3), doc),\n        on('ratechange', handler(4), doc),\n    ];\n    return callbackWrapper(() => {\n        handlers.forEach((h) => h());\n    });\n}\nfunction initFontObserver({ fontCb, doc }) {\n    const win = doc.defaultView;\n    if (!win) {\n        return () => {\n        };\n    }\n    const handlers = [];\n    const fontMap = new WeakMap();\n    const originalFontFace = win.FontFace;\n    win.FontFace = function FontFace(family, source, descriptors) {\n        const fontFace = new originalFontFace(family, source, descriptors);\n        fontMap.set(fontFace, {\n            family,\n            buffer: typeof source !== 'string',\n            descriptors,\n            fontSource: typeof source === 'string'\n                ? source\n                : JSON.stringify(Array.from(new Uint8Array(source))),\n        });\n        return fontFace;\n    };\n    const restoreHandler = patch(doc.fonts, 'add', function (original) {\n        return function (fontFace) {\n            setTimeout$1(callbackWrapper(() => {\n                const p = fontMap.get(fontFace);\n                if (p) {\n                    fontCb(p);\n                    fontMap.delete(fontFace);\n                }\n            }), 0);\n            return original.apply(this, [fontFace]);\n        };\n    });\n    handlers.push(() => {\n        win.FontFace = originalFontFace;\n    });\n    handlers.push(restoreHandler);\n    return callbackWrapper(() => {\n        handlers.forEach((h) => h());\n    });\n}\nfunction initSelectionObserver(param) {\n    const { doc, mirror, blockClass, blockSelector, unblockSelector, selectionCb, } = param;\n    let collapsed = true;\n    const updateSelection = callbackWrapper(() => {\n        const selection = doc.getSelection();\n        if (!selection || (collapsed && _optionalChain$2([selection, 'optionalAccess', _21 => _21.isCollapsed])))\n            return;\n        collapsed = selection.isCollapsed || false;\n        const ranges = [];\n        const count = selection.rangeCount || 0;\n        for (let i = 0; i < count; i++) {\n            const range = selection.getRangeAt(i);\n            const { startContainer, startOffset, endContainer, endOffset } = range;\n            const blocked = isBlocked(startContainer, blockClass, blockSelector, unblockSelector, true) ||\n                isBlocked(endContainer, blockClass, blockSelector, unblockSelector, true);\n            if (blocked)\n                continue;\n            ranges.push({\n                start: mirror.getId(startContainer),\n                startOffset,\n                end: mirror.getId(endContainer),\n                endOffset,\n            });\n        }\n        selectionCb({ ranges });\n    });\n    updateSelection();\n    return on('selectionchange', updateSelection);\n}\nfunction initCustomElementObserver({ doc, customElementCb, }) {\n    const win = doc.defaultView;\n    if (!win || !win.customElements)\n        return () => { };\n    const restoreHandler = patch(win.customElements, 'define', function (original) {\n        return function (name, constructor, options) {\n            try {\n                customElementCb({\n                    define: {\n                        name,\n                    },\n                });\n            }\n            catch (e) {\n            }\n            return original.apply(this, [name, constructor, options]);\n        };\n    });\n    return restoreHandler;\n}\nfunction initObservers(o, _hooks = {}) {\n    const currentWindow = o.doc.defaultView;\n    if (!currentWindow) {\n        return () => {\n        };\n    }\n    const mutationObserver = initMutationObserver(o, o.doc);\n    const mousemoveHandler = initMoveObserver(o);\n    const mouseInteractionHandler = initMouseInteractionObserver(o);\n    const scrollHandler = initScrollObserver(o);\n    const viewportResizeHandler = initViewportResizeObserver(o, {\n        win: currentWindow,\n    });\n    const inputHandler = initInputObserver(o);\n    const mediaInteractionHandler = initMediaInteractionObserver(o);\n    const styleSheetObserver = initStyleSheetObserver(o, { win: currentWindow });\n    const adoptedStyleSheetObserver = initAdoptedStyleSheetObserver(o, o.doc);\n    const styleDeclarationObserver = initStyleDeclarationObserver(o, {\n        win: currentWindow,\n    });\n    const fontObserver = o.collectFonts\n        ? initFontObserver(o)\n        : () => {\n        };\n    const selectionObserver = initSelectionObserver(o);\n    const customElementObserver = initCustomElementObserver(o);\n    const pluginHandlers = [];\n    for (const plugin of o.plugins) {\n        pluginHandlers.push(plugin.observer(plugin.callback, currentWindow, plugin.options));\n    }\n    return callbackWrapper(() => {\n        mutationBuffers.forEach((b) => b.reset());\n        mutationObserver.disconnect();\n        mousemoveHandler();\n        mouseInteractionHandler();\n        scrollHandler();\n        viewportResizeHandler();\n        inputHandler();\n        mediaInteractionHandler();\n        styleSheetObserver();\n        adoptedStyleSheetObserver();\n        styleDeclarationObserver();\n        fontObserver();\n        selectionObserver();\n        customElementObserver();\n        pluginHandlers.forEach((h) => h());\n    });\n}\nfunction hasNestedCSSRule(prop) {\n    return typeof window[prop] !== 'undefined';\n}\nfunction canMonkeyPatchNestedCSSRule(prop) {\n    return Boolean(typeof window[prop] !== 'undefined' &&\n        window[prop].prototype &&\n        'insertRule' in window[prop].prototype &&\n        'deleteRule' in window[prop].prototype);\n}\n\nclass CrossOriginIframeMirror {\n    constructor(generateIdFn) {\n        this.generateIdFn = generateIdFn;\n        this.iframeIdToRemoteIdMap = new WeakMap();\n        this.iframeRemoteIdToIdMap = new WeakMap();\n    }\n    getId(iframe, remoteId, idToRemoteMap, remoteToIdMap) {\n        const idToRemoteIdMap = idToRemoteMap || this.getIdToRemoteIdMap(iframe);\n        const remoteIdToIdMap = remoteToIdMap || this.getRemoteIdToIdMap(iframe);\n        let id = idToRemoteIdMap.get(remoteId);\n        if (!id) {\n            id = this.generateIdFn();\n            idToRemoteIdMap.set(remoteId, id);\n            remoteIdToIdMap.set(id, remoteId);\n        }\n        return id;\n    }\n    getIds(iframe, remoteId) {\n        const idToRemoteIdMap = this.getIdToRemoteIdMap(iframe);\n        const remoteIdToIdMap = this.getRemoteIdToIdMap(iframe);\n        return remoteId.map((id) => this.getId(iframe, id, idToRemoteIdMap, remoteIdToIdMap));\n    }\n    getRemoteId(iframe, id, map) {\n        const remoteIdToIdMap = map || this.getRemoteIdToIdMap(iframe);\n        if (typeof id !== 'number')\n            return id;\n        const remoteId = remoteIdToIdMap.get(id);\n        if (!remoteId)\n            return -1;\n        return remoteId;\n    }\n    getRemoteIds(iframe, ids) {\n        const remoteIdToIdMap = this.getRemoteIdToIdMap(iframe);\n        return ids.map((id) => this.getRemoteId(iframe, id, remoteIdToIdMap));\n    }\n    reset(iframe) {\n        if (!iframe) {\n            this.iframeIdToRemoteIdMap = new WeakMap();\n            this.iframeRemoteIdToIdMap = new WeakMap();\n            return;\n        }\n        this.iframeIdToRemoteIdMap.delete(iframe);\n        this.iframeRemoteIdToIdMap.delete(iframe);\n    }\n    getIdToRemoteIdMap(iframe) {\n        let idToRemoteIdMap = this.iframeIdToRemoteIdMap.get(iframe);\n        if (!idToRemoteIdMap) {\n            idToRemoteIdMap = new Map();\n            this.iframeIdToRemoteIdMap.set(iframe, idToRemoteIdMap);\n        }\n        return idToRemoteIdMap;\n    }\n    getRemoteIdToIdMap(iframe) {\n        let remoteIdToIdMap = this.iframeRemoteIdToIdMap.get(iframe);\n        if (!remoteIdToIdMap) {\n            remoteIdToIdMap = new Map();\n            this.iframeRemoteIdToIdMap.set(iframe, remoteIdToIdMap);\n        }\n        return remoteIdToIdMap;\n    }\n}\n\nfunction _optionalChain$1(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }\nclass IframeManagerNoop {\n    constructor() {\n        this.crossOriginIframeMirror = new CrossOriginIframeMirror(genId);\n        this.crossOriginIframeRootIdMap = new WeakMap();\n    }\n    addIframe() {\n    }\n    addLoadListener() {\n    }\n    attachIframe() {\n    }\n}\nclass IframeManager {\n    constructor(options) {\n        this.iframes = new WeakMap();\n        this.crossOriginIframeMap = new WeakMap();\n        this.crossOriginIframeMirror = new CrossOriginIframeMirror(genId);\n        this.crossOriginIframeRootIdMap = new WeakMap();\n        this.mutationCb = options.mutationCb;\n        this.wrappedEmit = options.wrappedEmit;\n        this.stylesheetManager = options.stylesheetManager;\n        this.recordCrossOriginIframes = options.recordCrossOriginIframes;\n        this.crossOriginIframeStyleMirror = new CrossOriginIframeMirror(this.stylesheetManager.styleMirror.generateId.bind(this.stylesheetManager.styleMirror));\n        this.mirror = options.mirror;\n        if (this.recordCrossOriginIframes) {\n            window.addEventListener('message', this.handleMessage.bind(this));\n        }\n    }\n    addIframe(iframeEl) {\n        this.iframes.set(iframeEl, true);\n        if (iframeEl.contentWindow)\n            this.crossOriginIframeMap.set(iframeEl.contentWindow, iframeEl);\n    }\n    addLoadListener(cb) {\n        this.loadListener = cb;\n    }\n    attachIframe(iframeEl, childSn) {\n        this.mutationCb({\n            adds: [\n                {\n                    parentId: this.mirror.getId(iframeEl),\n                    nextId: null,\n                    node: childSn,\n                },\n            ],\n            removes: [],\n            texts: [],\n            attributes: [],\n            isAttachIframe: true,\n        });\n        _optionalChain$1([this, 'access', _ => _.loadListener, 'optionalCall', _2 => _2(iframeEl)]);\n        if (iframeEl.contentDocument &&\n            iframeEl.contentDocument.adoptedStyleSheets &&\n            iframeEl.contentDocument.adoptedStyleSheets.length > 0)\n            this.stylesheetManager.adoptStyleSheets(iframeEl.contentDocument.adoptedStyleSheets, this.mirror.getId(iframeEl.contentDocument));\n    }\n    handleMessage(message) {\n        const crossOriginMessageEvent = message;\n        if (crossOriginMessageEvent.data.type !== 'rrweb' ||\n            crossOriginMessageEvent.origin !== crossOriginMessageEvent.data.origin)\n            return;\n        const iframeSourceWindow = message.source;\n        if (!iframeSourceWindow)\n            return;\n        const iframeEl = this.crossOriginIframeMap.get(message.source);\n        if (!iframeEl)\n            return;\n        const transformedEvent = this.transformCrossOriginEvent(iframeEl, crossOriginMessageEvent.data.event);\n        if (transformedEvent)\n            this.wrappedEmit(transformedEvent, crossOriginMessageEvent.data.isCheckout);\n    }\n    transformCrossOriginEvent(iframeEl, e) {\n        switch (e.type) {\n            case EventType.FullSnapshot: {\n                this.crossOriginIframeMirror.reset(iframeEl);\n                this.crossOriginIframeStyleMirror.reset(iframeEl);\n                this.replaceIdOnNode(e.data.node, iframeEl);\n                const rootId = e.data.node.id;\n                this.crossOriginIframeRootIdMap.set(iframeEl, rootId);\n                this.patchRootIdOnNode(e.data.node, rootId);\n                return {\n                    timestamp: e.timestamp,\n                    type: EventType.IncrementalSnapshot,\n                    data: {\n                        source: IncrementalSource.Mutation,\n                        adds: [\n                            {\n                                parentId: this.mirror.getId(iframeEl),\n                                nextId: null,\n                                node: e.data.node,\n                            },\n                        ],\n                        removes: [],\n                        texts: [],\n                        attributes: [],\n                        isAttachIframe: true,\n                    },\n                };\n            }\n            case EventType.Meta:\n            case EventType.Load:\n            case EventType.DomContentLoaded: {\n                return false;\n            }\n            case EventType.Plugin: {\n                return e;\n            }\n            case EventType.Custom: {\n                this.replaceIds(e.data.payload, iframeEl, ['id', 'parentId', 'previousId', 'nextId']);\n                return e;\n            }\n            case EventType.IncrementalSnapshot: {\n                switch (e.data.source) {\n                    case IncrementalSource.Mutation: {\n                        e.data.adds.forEach((n) => {\n                            this.replaceIds(n, iframeEl, [\n                                'parentId',\n                                'nextId',\n                                'previousId',\n                            ]);\n                            this.replaceIdOnNode(n.node, iframeEl);\n                            const rootId = this.crossOriginIframeRootIdMap.get(iframeEl);\n                            rootId && this.patchRootIdOnNode(n.node, rootId);\n                        });\n                        e.data.removes.forEach((n) => {\n                            this.replaceIds(n, iframeEl, ['parentId', 'id']);\n                        });\n                        e.data.attributes.forEach((n) => {\n                            this.replaceIds(n, iframeEl, ['id']);\n                        });\n                        e.data.texts.forEach((n) => {\n                            this.replaceIds(n, iframeEl, ['id']);\n                        });\n                        return e;\n                    }\n                    case IncrementalSource.Drag:\n                    case IncrementalSource.TouchMove:\n                    case IncrementalSource.MouseMove: {\n                        e.data.positions.forEach((p) => {\n                            this.replaceIds(p, iframeEl, ['id']);\n                        });\n                        return e;\n                    }\n                    case IncrementalSource.ViewportResize: {\n                        return false;\n                    }\n                    case IncrementalSource.MediaInteraction:\n                    case IncrementalSource.MouseInteraction:\n                    case IncrementalSource.Scroll:\n                    case IncrementalSource.CanvasMutation:\n                    case IncrementalSource.Input: {\n                        this.replaceIds(e.data, iframeEl, ['id']);\n                        return e;\n                    }\n                    case IncrementalSource.StyleSheetRule:\n                    case IncrementalSource.StyleDeclaration: {\n                        this.replaceIds(e.data, iframeEl, ['id']);\n                        this.replaceStyleIds(e.data, iframeEl, ['styleId']);\n                        return e;\n                    }\n                    case IncrementalSource.Font: {\n                        return e;\n                    }\n                    case IncrementalSource.Selection: {\n                        e.data.ranges.forEach((range) => {\n                            this.replaceIds(range, iframeEl, ['start', 'end']);\n                        });\n                        return e;\n                    }\n                    case IncrementalSource.AdoptedStyleSheet: {\n                        this.replaceIds(e.data, iframeEl, ['id']);\n                        this.replaceStyleIds(e.data, iframeEl, ['styleIds']);\n                        _optionalChain$1([e, 'access', _3 => _3.data, 'access', _4 => _4.styles, 'optionalAccess', _5 => _5.forEach, 'call', _6 => _6((style) => {\n                            this.replaceStyleIds(style, iframeEl, ['styleId']);\n                        })]);\n                        return e;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n    replace(iframeMirror, obj, iframeEl, keys) {\n        for (const key of keys) {\n            if (!Array.isArray(obj[key]) && typeof obj[key] !== 'number')\n                continue;\n            if (Array.isArray(obj[key])) {\n                obj[key] = iframeMirror.getIds(iframeEl, obj[key]);\n            }\n            else {\n                obj[key] = iframeMirror.getId(iframeEl, obj[key]);\n            }\n        }\n        return obj;\n    }\n    replaceIds(obj, iframeEl, keys) {\n        return this.replace(this.crossOriginIframeMirror, obj, iframeEl, keys);\n    }\n    replaceStyleIds(obj, iframeEl, keys) {\n        return this.replace(this.crossOriginIframeStyleMirror, obj, iframeEl, keys);\n    }\n    replaceIdOnNode(node, iframeEl) {\n        this.replaceIds(node, iframeEl, ['id', 'rootId']);\n        if ('childNodes' in node) {\n            node.childNodes.forEach((child) => {\n                this.replaceIdOnNode(child, iframeEl);\n            });\n        }\n    }\n    patchRootIdOnNode(node, rootId) {\n        if (node.type !== NodeType$1.Document && !node.rootId)\n            node.rootId = rootId;\n        if ('childNodes' in node) {\n            node.childNodes.forEach((child) => {\n                this.patchRootIdOnNode(child, rootId);\n            });\n        }\n    }\n}\n\nclass ShadowDomManagerNoop {\n    init() {\n    }\n    addShadowRoot() {\n    }\n    observeAttachShadow() {\n    }\n    reset() {\n    }\n}\nclass ShadowDomManager {\n    constructor(options) {\n        this.shadowDoms = new WeakSet();\n        this.restoreHandlers = [];\n        this.mutationCb = options.mutationCb;\n        this.scrollCb = options.scrollCb;\n        this.bypassOptions = options.bypassOptions;\n        this.mirror = options.mirror;\n        this.init();\n    }\n    init() {\n        this.reset();\n        this.patchAttachShadow(Element, document);\n    }\n    addShadowRoot(shadowRoot, doc) {\n        if (!isNativeShadowDom(shadowRoot))\n            return;\n        if (this.shadowDoms.has(shadowRoot))\n            return;\n        this.shadowDoms.add(shadowRoot);\n        const observer = initMutationObserver({\n            ...this.bypassOptions,\n            doc,\n            mutationCb: this.mutationCb,\n            mirror: this.mirror,\n            shadowDomManager: this,\n        }, shadowRoot);\n        this.restoreHandlers.push(() => observer.disconnect());\n        this.restoreHandlers.push(initScrollObserver({\n            ...this.bypassOptions,\n            scrollCb: this.scrollCb,\n            doc: shadowRoot,\n            mirror: this.mirror,\n        }));\n        setTimeout$1(() => {\n            if (shadowRoot.adoptedStyleSheets &&\n                shadowRoot.adoptedStyleSheets.length > 0)\n                this.bypassOptions.stylesheetManager.adoptStyleSheets(shadowRoot.adoptedStyleSheets, this.mirror.getId(shadowRoot.host));\n            this.restoreHandlers.push(initAdoptedStyleSheetObserver({\n                mirror: this.mirror,\n                stylesheetManager: this.bypassOptions.stylesheetManager,\n            }, shadowRoot));\n        }, 0);\n    }\n    observeAttachShadow(iframeElement) {\n        if (!iframeElement.contentWindow || !iframeElement.contentDocument)\n            return;\n        this.patchAttachShadow(iframeElement.contentWindow.Element, iframeElement.contentDocument);\n    }\n    patchAttachShadow(element, doc) {\n        const manager = this;\n        this.restoreHandlers.push(patch(element.prototype, 'attachShadow', function (original) {\n            return function (option) {\n                const shadowRoot = original.call(this, option);\n                if (this.shadowRoot && inDom(this))\n                    manager.addShadowRoot(this.shadowRoot, doc);\n                return shadowRoot;\n            };\n        }));\n    }\n    reset() {\n        this.restoreHandlers.forEach((handler) => {\n            try {\n                handler();\n            }\n            catch (e) {\n            }\n        });\n        this.restoreHandlers = [];\n        this.shadowDoms = new WeakSet();\n    }\n}\n\nclass CanvasManagerNoop {\n    reset() {\n    }\n    freeze() {\n    }\n    unfreeze() {\n    }\n    lock() {\n    }\n    unlock() {\n    }\n    snapshot() {\n    }\n}\n\nclass StylesheetManager {\n    constructor(options) {\n        this.trackedLinkElements = new WeakSet();\n        this.styleMirror = new StyleSheetMirror();\n        this.mutationCb = options.mutationCb;\n        this.adoptedStyleSheetCb = options.adoptedStyleSheetCb;\n    }\n    attachLinkElement(linkEl, childSn) {\n        if ('_cssText' in childSn.attributes)\n            this.mutationCb({\n                adds: [],\n                removes: [],\n                texts: [],\n                attributes: [\n                    {\n                        id: childSn.id,\n                        attributes: childSn\n                            .attributes,\n                    },\n                ],\n            });\n        this.trackLinkElement(linkEl);\n    }\n    trackLinkElement(linkEl) {\n        if (this.trackedLinkElements.has(linkEl))\n            return;\n        this.trackedLinkElements.add(linkEl);\n        this.trackStylesheetInLinkElement(linkEl);\n    }\n    adoptStyleSheets(sheets, hostId) {\n        if (sheets.length === 0)\n            return;\n        const adoptedStyleSheetData = {\n            id: hostId,\n            styleIds: [],\n        };\n        const styles = [];\n        for (const sheet of sheets) {\n            let styleId;\n            if (!this.styleMirror.has(sheet)) {\n                styleId = this.styleMirror.add(sheet);\n                styles.push({\n                    styleId,\n                    rules: Array.from(sheet.rules || CSSRule, (r, index) => ({\n                        rule: stringifyRule(r),\n                        index,\n                    })),\n                });\n            }\n            else\n                styleId = this.styleMirror.getId(sheet);\n            adoptedStyleSheetData.styleIds.push(styleId);\n        }\n        if (styles.length > 0)\n            adoptedStyleSheetData.styles = styles;\n        this.adoptedStyleSheetCb(adoptedStyleSheetData);\n    }\n    reset() {\n        this.styleMirror.reset();\n        this.trackedLinkElements = new WeakSet();\n    }\n    trackStylesheetInLinkElement(linkEl) {\n    }\n}\n\nclass ProcessedNodeManager {\n    constructor() {\n        this.nodeMap = new WeakMap();\n        this.loop = true;\n        this.periodicallyClear();\n    }\n    periodicallyClear() {\n        onRequestAnimationFrame(() => {\n            this.clear();\n            if (this.loop)\n                this.periodicallyClear();\n        });\n    }\n    inOtherBuffer(node, thisBuffer) {\n        const buffers = this.nodeMap.get(node);\n        return (buffers && Array.from(buffers).some((buffer) => buffer !== thisBuffer));\n    }\n    add(node, buffer) {\n        this.nodeMap.set(node, (this.nodeMap.get(node) || new Set()).add(buffer));\n    }\n    clear() {\n        this.nodeMap = new WeakMap();\n    }\n    destroy() {\n        this.loop = false;\n    }\n}\n\nlet wrappedEmit;\nlet _takeFullSnapshot;\nconst mirror = createMirror();\nfunction record(options = {}) {\n    const { emit, checkoutEveryNms, checkoutEveryNth, blockClass = 'rr-block', blockSelector = null, unblockSelector = null, ignoreClass = 'rr-ignore', ignoreSelector = null, maskAllText = false, maskTextClass = 'rr-mask', unmaskTextClass = null, maskTextSelector = null, unmaskTextSelector = null, inlineStylesheet = true, maskAllInputs, maskInputOptions: _maskInputOptions, slimDOMOptions: _slimDOMOptions, maskAttributeFn, maskInputFn, maskTextFn, maxCanvasSize = null, packFn, sampling = {}, dataURLOptions = {}, mousemoveWait, recordCanvas = false, recordCrossOriginIframes = false, recordAfter = options.recordAfter === 'DOMContentLoaded'\n        ? options.recordAfter\n        : 'load', userTriggeredOnInput = false, collectFonts = false, inlineImages = false, plugins, keepIframeSrcFn = () => false, ignoreCSSAttributes = new Set([]), errorHandler, onMutation, getCanvasManager, } = options;\n    registerErrorHandler(errorHandler);\n    const inEmittingFrame = recordCrossOriginIframes\n        ? window.parent === window\n        : true;\n    let passEmitsToParent = false;\n    if (!inEmittingFrame) {\n        try {\n            if (window.parent.document) {\n                passEmitsToParent = false;\n            }\n        }\n        catch (e) {\n            passEmitsToParent = true;\n        }\n    }\n    if (inEmittingFrame && !emit) {\n        throw new Error('emit function is required');\n    }\n    if (mousemoveWait !== undefined && sampling.mousemove === undefined) {\n        sampling.mousemove = mousemoveWait;\n    }\n    mirror.reset();\n    const maskInputOptions = maskAllInputs === true\n        ? {\n            color: true,\n            date: true,\n            'datetime-local': true,\n            email: true,\n            month: true,\n            number: true,\n            range: true,\n            search: true,\n            tel: true,\n            text: true,\n            time: true,\n            url: true,\n            week: true,\n            textarea: true,\n            select: true,\n            radio: true,\n            checkbox: true,\n        }\n        : _maskInputOptions !== undefined\n            ? _maskInputOptions\n            : {};\n    const slimDOMOptions = _slimDOMOptions === true || _slimDOMOptions === 'all'\n        ? {\n            script: true,\n            comment: true,\n            headFavicon: true,\n            headWhitespace: true,\n            headMetaSocial: true,\n            headMetaRobots: true,\n            headMetaHttpEquiv: true,\n            headMetaVerification: true,\n            headMetaAuthorship: _slimDOMOptions === 'all',\n            headMetaDescKeywords: _slimDOMOptions === 'all',\n        }\n        : _slimDOMOptions\n            ? _slimDOMOptions\n            : {};\n    polyfill();\n    let lastFullSnapshotEvent;\n    let incrementalSnapshotCount = 0;\n    const eventProcessor = (e) => {\n        for (const plugin of plugins || []) {\n            if (plugin.eventProcessor) {\n                e = plugin.eventProcessor(e);\n            }\n        }\n        if (packFn &&\n            !passEmitsToParent) {\n            e = packFn(e);\n        }\n        return e;\n    };\n    wrappedEmit = (r, isCheckout) => {\n        const e = r;\n        e.timestamp = nowTimestamp();\n        if (_optionalChain([mutationBuffers, 'access', _ => _[0], 'optionalAccess', _2 => _2.isFrozen, 'call', _3 => _3()]) &&\n            e.type !== EventType.FullSnapshot &&\n            !(e.type === EventType.IncrementalSnapshot &&\n                e.data.source === IncrementalSource.Mutation)) {\n            mutationBuffers.forEach((buf) => buf.unfreeze());\n        }\n        if (inEmittingFrame) {\n            _optionalChain([emit, 'optionalCall', _4 => _4(eventProcessor(e), isCheckout)]);\n        }\n        else if (passEmitsToParent) {\n            const message = {\n                type: 'rrweb',\n                event: eventProcessor(e),\n                origin: window.location.origin,\n                isCheckout,\n            };\n            window.parent.postMessage(message, '*');\n        }\n        if (e.type === EventType.FullSnapshot) {\n            lastFullSnapshotEvent = e;\n            incrementalSnapshotCount = 0;\n        }\n        else if (e.type === EventType.IncrementalSnapshot) {\n            if (e.data.source === IncrementalSource.Mutation &&\n                e.data.isAttachIframe) {\n                return;\n            }\n            incrementalSnapshotCount++;\n            const exceedCount = checkoutEveryNth && incrementalSnapshotCount >= checkoutEveryNth;\n            const exceedTime = checkoutEveryNms &&\n                lastFullSnapshotEvent &&\n                e.timestamp - lastFullSnapshotEvent.timestamp > checkoutEveryNms;\n            if (exceedCount || exceedTime) {\n                takeFullSnapshot(true);\n            }\n        }\n    };\n    const wrappedMutationEmit = (m) => {\n        wrappedEmit({\n            type: EventType.IncrementalSnapshot,\n            data: {\n                source: IncrementalSource.Mutation,\n                ...m,\n            },\n        });\n    };\n    const wrappedScrollEmit = (p) => wrappedEmit({\n        type: EventType.IncrementalSnapshot,\n        data: {\n            source: IncrementalSource.Scroll,\n            ...p,\n        },\n    });\n    const wrappedCanvasMutationEmit = (p) => wrappedEmit({\n        type: EventType.IncrementalSnapshot,\n        data: {\n            source: IncrementalSource.CanvasMutation,\n            ...p,\n        },\n    });\n    const wrappedAdoptedStyleSheetEmit = (a) => wrappedEmit({\n        type: EventType.IncrementalSnapshot,\n        data: {\n            source: IncrementalSource.AdoptedStyleSheet,\n            ...a,\n        },\n    });\n    const stylesheetManager = new StylesheetManager({\n        mutationCb: wrappedMutationEmit,\n        adoptedStyleSheetCb: wrappedAdoptedStyleSheetEmit,\n    });\n    const iframeManager = typeof __RRWEB_EXCLUDE_IFRAME__ === 'boolean' && __RRWEB_EXCLUDE_IFRAME__\n        ? new IframeManagerNoop()\n        : new IframeManager({\n            mirror,\n            mutationCb: wrappedMutationEmit,\n            stylesheetManager: stylesheetManager,\n            recordCrossOriginIframes,\n            wrappedEmit,\n        });\n    for (const plugin of plugins || []) {\n        if (plugin.getMirror)\n            plugin.getMirror({\n                nodeMirror: mirror,\n                crossOriginIframeMirror: iframeManager.crossOriginIframeMirror,\n                crossOriginIframeStyleMirror: iframeManager.crossOriginIframeStyleMirror,\n            });\n    }\n    const processedNodeManager = new ProcessedNodeManager();\n    const canvasManager = _getCanvasManager(getCanvasManager, {\n        mirror,\n        win: window,\n        mutationCb: (p) => wrappedEmit({\n            type: EventType.IncrementalSnapshot,\n            data: {\n                source: IncrementalSource.CanvasMutation,\n                ...p,\n            },\n        }),\n        recordCanvas,\n        blockClass,\n        blockSelector,\n        unblockSelector,\n        maxCanvasSize,\n        sampling: sampling['canvas'],\n        dataURLOptions,\n        errorHandler,\n    });\n    const shadowDomManager = typeof __RRWEB_EXCLUDE_SHADOW_DOM__ === 'boolean' &&\n        __RRWEB_EXCLUDE_SHADOW_DOM__\n        ? new ShadowDomManagerNoop()\n        : new ShadowDomManager({\n            mutationCb: wrappedMutationEmit,\n            scrollCb: wrappedScrollEmit,\n            bypassOptions: {\n                onMutation,\n                blockClass,\n                blockSelector,\n                unblockSelector,\n                maskAllText,\n                maskTextClass,\n                unmaskTextClass,\n                maskTextSelector,\n                unmaskTextSelector,\n                inlineStylesheet,\n                maskInputOptions,\n                dataURLOptions,\n                maskAttributeFn,\n                maskTextFn,\n                maskInputFn,\n                recordCanvas,\n                inlineImages,\n                sampling,\n                slimDOMOptions,\n                iframeManager,\n                stylesheetManager,\n                canvasManager,\n                keepIframeSrcFn,\n                processedNodeManager,\n            },\n            mirror,\n        });\n    const takeFullSnapshot = (isCheckout = false) => {\n        wrappedEmit({\n            type: EventType.Meta,\n            data: {\n                href: window.location.href,\n                width: getWindowWidth(),\n                height: getWindowHeight(),\n            },\n        }, isCheckout);\n        stylesheetManager.reset();\n        shadowDomManager.init();\n        mutationBuffers.forEach((buf) => buf.lock());\n        const node = snapshot(document, {\n            mirror,\n            blockClass,\n            blockSelector,\n            unblockSelector,\n            maskAllText,\n            maskTextClass,\n            unmaskTextClass,\n            maskTextSelector,\n            unmaskTextSelector,\n            inlineStylesheet,\n            maskAllInputs: maskInputOptions,\n            maskAttributeFn,\n            maskInputFn,\n            maskTextFn,\n            slimDOM: slimDOMOptions,\n            dataURLOptions,\n            recordCanvas,\n            inlineImages,\n            onSerialize: (n) => {\n                if (isSerializedIframe(n, mirror)) {\n                    iframeManager.addIframe(n);\n                }\n                if (isSerializedStylesheet(n, mirror)) {\n                    stylesheetManager.trackLinkElement(n);\n                }\n                if (hasShadowRoot(n)) {\n                    shadowDomManager.addShadowRoot(n.shadowRoot, document);\n                }\n            },\n            onIframeLoad: (iframe, childSn) => {\n                iframeManager.attachIframe(iframe, childSn);\n                shadowDomManager.observeAttachShadow(iframe);\n            },\n            onStylesheetLoad: (linkEl, childSn) => {\n                stylesheetManager.attachLinkElement(linkEl, childSn);\n            },\n            keepIframeSrcFn,\n        });\n        if (!node) {\n            return console.warn('Failed to snapshot the document');\n        }\n        wrappedEmit({\n            type: EventType.FullSnapshot,\n            data: {\n                node,\n                initialOffset: getWindowScroll(window),\n            },\n        });\n        mutationBuffers.forEach((buf) => buf.unlock());\n        if (document.adoptedStyleSheets && document.adoptedStyleSheets.length > 0)\n            stylesheetManager.adoptStyleSheets(document.adoptedStyleSheets, mirror.getId(document));\n    };\n    _takeFullSnapshot = takeFullSnapshot;\n    try {\n        const handlers = [];\n        const observe = (doc) => {\n            return callbackWrapper(initObservers)({\n                onMutation,\n                mutationCb: wrappedMutationEmit,\n                mousemoveCb: (positions, source) => wrappedEmit({\n                    type: EventType.IncrementalSnapshot,\n                    data: {\n                        source,\n                        positions,\n                    },\n                }),\n                mouseInteractionCb: (d) => wrappedEmit({\n                    type: EventType.IncrementalSnapshot,\n                    data: {\n                        source: IncrementalSource.MouseInteraction,\n                        ...d,\n                    },\n                }),\n                scrollCb: wrappedScrollEmit,\n                viewportResizeCb: (d) => wrappedEmit({\n                    type: EventType.IncrementalSnapshot,\n                    data: {\n                        source: IncrementalSource.ViewportResize,\n                        ...d,\n                    },\n                }),\n                inputCb: (v) => wrappedEmit({\n                    type: EventType.IncrementalSnapshot,\n                    data: {\n                        source: IncrementalSource.Input,\n                        ...v,\n                    },\n                }),\n                mediaInteractionCb: (p) => wrappedEmit({\n                    type: EventType.IncrementalSnapshot,\n                    data: {\n                        source: IncrementalSource.MediaInteraction,\n                        ...p,\n                    },\n                }),\n                styleSheetRuleCb: (r) => wrappedEmit({\n                    type: EventType.IncrementalSnapshot,\n                    data: {\n                        source: IncrementalSource.StyleSheetRule,\n                        ...r,\n                    },\n                }),\n                styleDeclarationCb: (r) => wrappedEmit({\n                    type: EventType.IncrementalSnapshot,\n                    data: {\n                        source: IncrementalSource.StyleDeclaration,\n                        ...r,\n                    },\n                }),\n                canvasMutationCb: wrappedCanvasMutationEmit,\n                fontCb: (p) => wrappedEmit({\n                    type: EventType.IncrementalSnapshot,\n                    data: {\n                        source: IncrementalSource.Font,\n                        ...p,\n                    },\n                }),\n                selectionCb: (p) => {\n                    wrappedEmit({\n                        type: EventType.IncrementalSnapshot,\n                        data: {\n                            source: IncrementalSource.Selection,\n                            ...p,\n                        },\n                    });\n                },\n                customElementCb: (c) => {\n                    wrappedEmit({\n                        type: EventType.IncrementalSnapshot,\n                        data: {\n                            source: IncrementalSource.CustomElement,\n                            ...c,\n                        },\n                    });\n                },\n                blockClass,\n                ignoreClass,\n                ignoreSelector,\n                maskAllText,\n                maskTextClass,\n                unmaskTextClass,\n                maskTextSelector,\n                unmaskTextSelector,\n                maskInputOptions,\n                inlineStylesheet,\n                sampling,\n                recordCanvas,\n                inlineImages,\n                userTriggeredOnInput,\n                collectFonts,\n                doc,\n                maskAttributeFn,\n                maskInputFn,\n                maskTextFn,\n                keepIframeSrcFn,\n                blockSelector,\n                unblockSelector,\n                slimDOMOptions,\n                dataURLOptions,\n                mirror,\n                iframeManager,\n                stylesheetManager,\n                shadowDomManager,\n                processedNodeManager,\n                canvasManager,\n                ignoreCSSAttributes,\n                plugins: _optionalChain([plugins\n, 'optionalAccess', _5 => _5.filter, 'call', _6 => _6((p) => p.observer)\n, 'optionalAccess', _7 => _7.map, 'call', _8 => _8((p) => ({\n                    observer: p.observer,\n                    options: p.options,\n                    callback: (payload) => wrappedEmit({\n                        type: EventType.Plugin,\n                        data: {\n                            plugin: p.name,\n                            payload,\n                        },\n                    }),\n                }))]) || [],\n            }, {});\n        };\n        iframeManager.addLoadListener((iframeEl) => {\n            try {\n                handlers.push(observe(iframeEl.contentDocument));\n            }\n            catch (error) {\n                console.warn(error);\n            }\n        });\n        const init = () => {\n            takeFullSnapshot();\n            handlers.push(observe(document));\n        };\n        if (document.readyState === 'interactive' ||\n            document.readyState === 'complete') {\n            init();\n        }\n        else {\n            handlers.push(on('DOMContentLoaded', () => {\n                wrappedEmit({\n                    type: EventType.DomContentLoaded,\n                    data: {},\n                });\n                if (recordAfter === 'DOMContentLoaded')\n                    init();\n            }));\n            handlers.push(on('load', () => {\n                wrappedEmit({\n                    type: EventType.Load,\n                    data: {},\n                });\n                if (recordAfter === 'load')\n                    init();\n            }, window));\n        }\n        return () => {\n            handlers.forEach((h) => h());\n            processedNodeManager.destroy();\n            _takeFullSnapshot = undefined;\n            unregisterErrorHandler();\n        };\n    }\n    catch (error) {\n        console.warn(error);\n    }\n}\nfunction takeFullSnapshot(isCheckout) {\n    if (!_takeFullSnapshot) {\n        throw new Error('please take full snapshot after start recording');\n    }\n    _takeFullSnapshot(isCheckout);\n}\nrecord.mirror = mirror;\nrecord.takeFullSnapshot = takeFullSnapshot;\nfunction _getCanvasManager(getCanvasManagerFn, options) {\n    try {\n        return getCanvasManagerFn\n            ? getCanvasManagerFn(options)\n            : new CanvasManagerNoop();\n    }\n    catch (e2) {\n        console.warn('Unable to initialize CanvasManager');\n        return new CanvasManagerNoop();\n    }\n}\n\nconst ReplayEventTypeIncrementalSnapshot = 3;\nconst ReplayEventTypeCustom = 5;\n\n/**\n * Converts a timestamp to ms, if it was in s, or keeps it as ms.\n */\nfunction timestampToMs(timestamp) {\n  const isMs = timestamp > 9999999999;\n  return isMs ? timestamp : timestamp * 1000;\n}\n\n/**\n * Converts a timestamp to s, if it was in ms, or keeps it as s.\n */\nfunction timestampToS(timestamp) {\n  const isMs = timestamp > 9999999999;\n  return isMs ? timestamp / 1000 : timestamp;\n}\n\n/**\n * Add a breadcrumb event to replay.\n */\nfunction addBreadcrumbEvent(replay, breadcrumb) {\n  if (breadcrumb.category === 'sentry.transaction') {\n    return;\n  }\n\n  if (['ui.click', 'ui.input'].includes(breadcrumb.category )) {\n    replay.triggerUserActivity();\n  } else {\n    replay.checkAndHandleExpiredSession();\n  }\n\n  replay.addUpdate(() => {\n    // This should never reject\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    replay.throttledAddEvent({\n      type: EventType.Custom,\n      // TODO: We were converting from ms to seconds for breadcrumbs, spans,\n      // but maybe we should just keep them as milliseconds\n      timestamp: (breadcrumb.timestamp || 0) * 1000,\n      data: {\n        tag: 'breadcrumb',\n        // normalize to max. 10 depth and 1_000 properties per object\n        payload: normalize(breadcrumb, 10, 1000),\n      },\n    });\n\n    // Do not flush after console log messages\n    return breadcrumb.category === 'console';\n  });\n}\n\nconst INTERACTIVE_SELECTOR = 'button,a';\n\n/** Get the closest interactive parent element, or else return the given element. */\nfunction getClosestInteractive(element) {\n  const closestInteractive = element.closest(INTERACTIVE_SELECTOR);\n  return closestInteractive || element;\n}\n\n/**\n * For clicks, we check if the target is inside of a button or link\n * If so, we use this as the target instead\n * This is useful because if you click on the image in <button><img></button>,\n * The target will be the image, not the button, which we don't want here\n */\nfunction getClickTargetNode(event) {\n  const target = getTargetNode(event);\n\n  if (!target || !(target instanceof Element)) {\n    return target;\n  }\n\n  return getClosestInteractive(target);\n}\n\n/** Get the event target node. */\nfunction getTargetNode(event) {\n  if (isEventWithTarget(event)) {\n    return event.target ;\n  }\n\n  return event;\n}\n\nfunction isEventWithTarget(event) {\n  return typeof event === 'object' && !!event && 'target' in event;\n}\n\nlet handlers;\n\n/**\n * Register a handler to be called when `window.open()` is called.\n * Returns a cleanup function.\n */\nfunction onWindowOpen(cb) {\n  // Ensure to only register this once\n  if (!handlers) {\n    handlers = [];\n    monkeyPatchWindowOpen();\n  }\n\n  handlers.push(cb);\n\n  return () => {\n    const pos = handlers ? handlers.indexOf(cb) : -1;\n    if (pos > -1) {\n      (handlers ).splice(pos, 1);\n    }\n  };\n}\n\nfunction monkeyPatchWindowOpen() {\n  fill(WINDOW, 'open', function (originalWindowOpen) {\n    return function (...args) {\n      if (handlers) {\n        try {\n          handlers.forEach(handler => handler());\n        } catch (e) {\n          // ignore errors in here\n        }\n      }\n\n      return originalWindowOpen.apply(WINDOW, args);\n    };\n  });\n}\n\n/** Handle a click. */\nfunction handleClick(clickDetector, clickBreadcrumb, node) {\n  clickDetector.handleClick(clickBreadcrumb, node);\n}\n\n/** A click detector class that can be used to detect slow or rage clicks on elements. */\nclass ClickDetector  {\n  // protected for testing\n\n   constructor(\n    replay,\n    slowClickConfig,\n    // Just for easier testing\n    _addBreadcrumbEvent = addBreadcrumbEvent,\n  ) {\n    this._lastMutation = 0;\n    this._lastScroll = 0;\n    this._clicks = [];\n\n    // We want everything in s, but options are in ms\n    this._timeout = slowClickConfig.timeout / 1000;\n    this._threshold = slowClickConfig.threshold / 1000;\n    this._scollTimeout = slowClickConfig.scrollTimeout / 1000;\n    this._replay = replay;\n    this._ignoreSelector = slowClickConfig.ignoreSelector;\n    this._addBreadcrumbEvent = _addBreadcrumbEvent;\n  }\n\n  /** Register click detection handlers on mutation or scroll. */\n   addListeners() {\n    const cleanupWindowOpen = onWindowOpen(() => {\n      // Treat window.open as mutation\n      this._lastMutation = nowInSeconds();\n    });\n\n    this._teardown = () => {\n      cleanupWindowOpen();\n\n      this._clicks = [];\n      this._lastMutation = 0;\n      this._lastScroll = 0;\n    };\n  }\n\n  /** Clean up listeners. */\n   removeListeners() {\n    if (this._teardown) {\n      this._teardown();\n    }\n\n    if (this._checkClickTimeout) {\n      clearTimeout(this._checkClickTimeout);\n    }\n  }\n\n  /** @inheritDoc */\n   handleClick(breadcrumb, node) {\n    if (ignoreElement(node, this._ignoreSelector) || !isClickBreadcrumb(breadcrumb)) {\n      return;\n    }\n\n    const newClick = {\n      timestamp: timestampToS(breadcrumb.timestamp),\n      clickBreadcrumb: breadcrumb,\n      // Set this to 0 so we know it originates from the click breadcrumb\n      clickCount: 0,\n      node,\n    };\n\n    // If there was a click in the last 1s on the same element, ignore it - only keep a single reference per second\n    if (\n      this._clicks.some(click => click.node === newClick.node && Math.abs(click.timestamp - newClick.timestamp) < 1)\n    ) {\n      return;\n    }\n\n    this._clicks.push(newClick);\n\n    // If this is the first new click, set a timeout to check for multi clicks\n    if (this._clicks.length === 1) {\n      this._scheduleCheckClicks();\n    }\n  }\n\n  /** @inheritDoc */\n   registerMutation(timestamp = Date.now()) {\n    this._lastMutation = timestampToS(timestamp);\n  }\n\n  /** @inheritDoc */\n   registerScroll(timestamp = Date.now()) {\n    this._lastScroll = timestampToS(timestamp);\n  }\n\n  /** @inheritDoc */\n   registerClick(element) {\n    const node = getClosestInteractive(element);\n    this._handleMultiClick(node );\n  }\n\n  /** Count multiple clicks on elements. */\n   _handleMultiClick(node) {\n    this._getClicks(node).forEach(click => {\n      click.clickCount++;\n    });\n  }\n\n  /** Get all pending clicks for a given node. */\n   _getClicks(node) {\n    return this._clicks.filter(click => click.node === node);\n  }\n\n  /** Check the clicks that happened. */\n   _checkClicks() {\n    const timedOutClicks = [];\n\n    const now = nowInSeconds();\n\n    this._clicks.forEach(click => {\n      if (!click.mutationAfter && this._lastMutation) {\n        click.mutationAfter = click.timestamp <= this._lastMutation ? this._lastMutation - click.timestamp : undefined;\n      }\n      if (!click.scrollAfter && this._lastScroll) {\n        click.scrollAfter = click.timestamp <= this._lastScroll ? this._lastScroll - click.timestamp : undefined;\n      }\n\n      // All of these are in seconds!\n      if (click.timestamp + this._timeout <= now) {\n        timedOutClicks.push(click);\n      }\n    });\n\n    // Remove \"old\" clicks\n    for (const click of timedOutClicks) {\n      const pos = this._clicks.indexOf(click);\n\n      if (pos > -1) {\n        this._generateBreadcrumbs(click);\n        this._clicks.splice(pos, 1);\n      }\n    }\n\n    // Trigger new check, unless no clicks left\n    if (this._clicks.length) {\n      this._scheduleCheckClicks();\n    }\n  }\n\n  /** Generate matching breadcrumb(s) for the click. */\n   _generateBreadcrumbs(click) {\n    const replay = this._replay;\n    const hadScroll = click.scrollAfter && click.scrollAfter <= this._scollTimeout;\n    const hadMutation = click.mutationAfter && click.mutationAfter <= this._threshold;\n\n    const isSlowClick = !hadScroll && !hadMutation;\n    const { clickCount, clickBreadcrumb } = click;\n\n    // Slow click\n    if (isSlowClick) {\n      // If `mutationAfter` is set, it means a mutation happened after the threshold, but before the timeout\n      // If not, it means we just timed out without scroll & mutation\n      const timeAfterClickMs = Math.min(click.mutationAfter || this._timeout, this._timeout) * 1000;\n      const endReason = timeAfterClickMs < this._timeout * 1000 ? 'mutation' : 'timeout';\n\n      const breadcrumb = {\n        type: 'default',\n        message: clickBreadcrumb.message,\n        timestamp: clickBreadcrumb.timestamp,\n        category: 'ui.slowClickDetected',\n        data: {\n          ...clickBreadcrumb.data,\n          url: WINDOW.location.href,\n          route: replay.getCurrentRoute(),\n          timeAfterClickMs,\n          endReason,\n          // If clickCount === 0, it means multiClick was not correctly captured here\n          // - we still want to send 1 in this case\n          clickCount: clickCount || 1,\n        },\n      };\n\n      this._addBreadcrumbEvent(replay, breadcrumb);\n      return;\n    }\n\n    // Multi click\n    if (clickCount > 1) {\n      const breadcrumb = {\n        type: 'default',\n        message: clickBreadcrumb.message,\n        timestamp: clickBreadcrumb.timestamp,\n        category: 'ui.multiClick',\n        data: {\n          ...clickBreadcrumb.data,\n          url: WINDOW.location.href,\n          route: replay.getCurrentRoute(),\n          clickCount,\n          metric: true,\n        },\n      };\n\n      this._addBreadcrumbEvent(replay, breadcrumb);\n    }\n  }\n\n  /** Schedule to check current clicks. */\n   _scheduleCheckClicks() {\n    if (this._checkClickTimeout) {\n      clearTimeout(this._checkClickTimeout);\n    }\n\n    this._checkClickTimeout = setTimeout(() => this._checkClicks(), 1000);\n  }\n}\n\nconst SLOW_CLICK_TAGS = ['A', 'BUTTON', 'INPUT'];\n\n/** exported for tests only */\nfunction ignoreElement(node, ignoreSelector) {\n  if (!SLOW_CLICK_TAGS.includes(node.tagName)) {\n    return true;\n  }\n\n  // If <input> tag, we only want to consider input[type='submit'] & input[type='button']\n  if (node.tagName === 'INPUT' && !['submit', 'button'].includes(node.getAttribute('type') || '')) {\n    return true;\n  }\n\n  // If <a> tag, detect special variants that may not lead to an action\n  // If target !== _self, we may open the link somewhere else, which would lead to no action\n  // Also, when downloading a file, we may not leave the page, but still not trigger an action\n  if (\n    node.tagName === 'A' &&\n    (node.hasAttribute('download') || (node.hasAttribute('target') && node.getAttribute('target') !== '_self'))\n  ) {\n    return true;\n  }\n\n  if (ignoreSelector && node.matches(ignoreSelector)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isClickBreadcrumb(breadcrumb) {\n  return !!(breadcrumb.data && typeof breadcrumb.data.nodeId === 'number' && breadcrumb.timestamp);\n}\n\n// This is good enough for us, and is easier to test/mock than `timestampInSeconds`\nfunction nowInSeconds() {\n  return Date.now() / 1000;\n}\n\n/** Update the click detector based on a recording event of rrweb. */\nfunction updateClickDetectorForRecordingEvent(clickDetector, event) {\n  try {\n    // note: We only consider incremental snapshots here\n    // This means that any full snapshot is ignored for mutation detection - the reason is that we simply cannot know if a mutation happened here.\n    // E.g. think that we are buffering, an error happens and we take a full snapshot because we switched to session mode -\n    // in this scenario, we would not know if a dead click happened because of the error, which is a key dead click scenario.\n    // Instead, by ignoring full snapshots, we have the risk that we generate a false positive\n    // (if a mutation _did_ happen but was \"swallowed\" by the full snapshot)\n    // But this should be more unlikely as we'd generally capture the incremental snapshot right away\n\n    if (!isIncrementalEvent(event)) {\n      return;\n    }\n\n    const { source } = event.data;\n    if (source === IncrementalSource.Mutation) {\n      clickDetector.registerMutation(event.timestamp);\n    }\n\n    if (source === IncrementalSource.Scroll) {\n      clickDetector.registerScroll(event.timestamp);\n    }\n\n    if (isIncrementalMouseInteraction(event)) {\n      const { type, id } = event.data;\n      const node = record.mirror.getNode(id);\n\n      if (node instanceof HTMLElement && type === MouseInteractions.Click) {\n        clickDetector.registerClick(node);\n      }\n    }\n  } catch (e) {\n    // ignore errors here, e.g. if accessing something that does not exist\n  }\n}\n\nfunction isIncrementalEvent(event) {\n  return event.type === ReplayEventTypeIncrementalSnapshot;\n}\n\nfunction isIncrementalMouseInteraction(\n  event,\n) {\n  return event.data.source === IncrementalSource.MouseInteraction;\n}\n\n/**\n * Create a breadcrumb for a replay.\n */\nfunction createBreadcrumb(\n  breadcrumb,\n) {\n  return {\n    timestamp: Date.now() / 1000,\n    type: 'default',\n    ...breadcrumb,\n  };\n}\n\nvar NodeType;\n(function (NodeType) {\n    NodeType[NodeType[\"Document\"] = 0] = \"Document\";\n    NodeType[NodeType[\"DocumentType\"] = 1] = \"DocumentType\";\n    NodeType[NodeType[\"Element\"] = 2] = \"Element\";\n    NodeType[NodeType[\"Text\"] = 3] = \"Text\";\n    NodeType[NodeType[\"CDATA\"] = 4] = \"CDATA\";\n    NodeType[NodeType[\"Comment\"] = 5] = \"Comment\";\n})(NodeType || (NodeType = {}));\n\n// Note that these are the serialized attributes and not attributes directly on\n// the DOM Node. Attributes we are interested in:\nconst ATTRIBUTES_TO_RECORD = new Set([\n  'id',\n  'class',\n  'aria-label',\n  'role',\n  'name',\n  'alt',\n  'title',\n  'data-test-id',\n  'data-testid',\n  'disabled',\n  'aria-disabled',\n  'data-sentry-component',\n]);\n\n/**\n * Inclusion list of attributes that we want to record from the DOM element\n */\nfunction getAttributesToRecord(attributes) {\n  const obj = {};\n  for (const key in attributes) {\n    if (ATTRIBUTES_TO_RECORD.has(key)) {\n      let normalizedKey = key;\n\n      if (key === 'data-testid' || key === 'data-test-id') {\n        normalizedKey = 'testId';\n      }\n\n      obj[normalizedKey] = attributes[key];\n    }\n  }\n\n  return obj;\n}\n\nconst handleDomListener = (\n  replay,\n) => {\n  return (handlerData) => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n\n    const result = handleDom(handlerData);\n\n    if (!result) {\n      return;\n    }\n\n    const isClick = handlerData.name === 'click';\n    const event = isClick ? (handlerData.event ) : undefined;\n    // Ignore clicks if ctrl/alt/meta/shift keys are held down as they alter behavior of clicks (e.g. open in new tab)\n    if (\n      isClick &&\n      replay.clickDetector &&\n      event &&\n      event.target &&\n      !event.altKey &&\n      !event.metaKey &&\n      !event.ctrlKey &&\n      !event.shiftKey\n    ) {\n      handleClick(\n        replay.clickDetector,\n        result ,\n        getClickTargetNode(handlerData.event ) ,\n      );\n    }\n\n    addBreadcrumbEvent(replay, result);\n  };\n};\n\n/** Get the base DOM breadcrumb. */\nfunction getBaseDomBreadcrumb(target, message) {\n  const nodeId = record.mirror.getId(target);\n  const node = nodeId && record.mirror.getNode(nodeId);\n  const meta = node && record.mirror.getMeta(node);\n  const element = meta && isElement(meta) ? meta : null;\n\n  return {\n    message,\n    data: element\n      ? {\n          nodeId,\n          node: {\n            id: nodeId,\n            tagName: element.tagName,\n            textContent: Array.from(element.childNodes)\n              .map((node) => node.type === NodeType.Text && node.textContent)\n              .filter(Boolean) // filter out empty values\n              .map(text => (text ).trim())\n              .join(''),\n            attributes: getAttributesToRecord(element.attributes),\n          },\n        }\n      : {},\n  };\n}\n\n/**\n * An event handler to react to DOM events.\n * Exported for tests.\n */\nfunction handleDom(handlerData) {\n  const { target, message } = getDomTarget(handlerData);\n\n  return createBreadcrumb({\n    category: `ui.${handlerData.name}`,\n    ...getBaseDomBreadcrumb(target, message),\n  });\n}\n\nfunction getDomTarget(handlerData) {\n  const isClick = handlerData.name === 'click';\n\n  let message;\n  let target = null;\n\n  // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n  try {\n    target = isClick ? getClickTargetNode(handlerData.event ) : getTargetNode(handlerData.event );\n    message = htmlTreeAsString(target, { maxStringLength: 200 }) || '<unknown>';\n  } catch (e) {\n    message = '<unknown>';\n  }\n\n  return { target, message };\n}\n\nfunction isElement(node) {\n  return node.type === NodeType.Element;\n}\n\n/** Handle keyboard events & create breadcrumbs. */\nfunction handleKeyboardEvent(replay, event) {\n  if (!replay.isEnabled()) {\n    return;\n  }\n\n  // Update user activity, but do not restart recording as it can create\n  // noisy/low-value replays (e.g. user comes back from idle, hits alt-tab, new\n  // session with a single \"keydown\" breadcrumb is created)\n  replay.updateUserActivity();\n\n  const breadcrumb = getKeyboardBreadcrumb(event);\n\n  if (!breadcrumb) {\n    return;\n  }\n\n  addBreadcrumbEvent(replay, breadcrumb);\n}\n\n/** exported only for tests */\nfunction getKeyboardBreadcrumb(event) {\n  const { metaKey, shiftKey, ctrlKey, altKey, key, target } = event;\n\n  // never capture for input fields\n  if (!target || isInputElement(target ) || !key) {\n    return null;\n  }\n\n  // Note: We do not consider shift here, as that means \"uppercase\"\n  const hasModifierKey = metaKey || ctrlKey || altKey;\n  const isCharacterKey = key.length === 1; // other keys like Escape, Tab, etc have a longer length\n\n  // Do not capture breadcrumb if only a word key is pressed\n  // This could leak e.g. user input\n  if (!hasModifierKey && isCharacterKey) {\n    return null;\n  }\n\n  const message = htmlTreeAsString(target, { maxStringLength: 200 }) || '<unknown>';\n  const baseBreadcrumb = getBaseDomBreadcrumb(target , message);\n\n  return createBreadcrumb({\n    category: 'ui.keyDown',\n    message,\n    data: {\n      ...baseBreadcrumb.data,\n      metaKey,\n      shiftKey,\n      ctrlKey,\n      altKey,\n      key,\n    },\n  });\n}\n\nfunction isInputElement(target) {\n  return target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.isContentEditable;\n}\n\n// Map entryType -> function to normalize data for event\nconst ENTRY_TYPES\n\n = {\n  // @ts-expect-error TODO: entry type does not fit the create* functions entry type\n  resource: createResourceEntry,\n  paint: createPaintEntry,\n  // @ts-expect-error TODO: entry type does not fit the create* functions entry type\n  navigation: createNavigationEntry,\n};\n\n/**\n * Create replay performance entries from the browser performance entries.\n */\nfunction createPerformanceEntries(\n  entries,\n) {\n  return entries.map(createPerformanceEntry).filter(Boolean) ;\n}\n\nfunction createPerformanceEntry(entry) {\n  if (!ENTRY_TYPES[entry.entryType]) {\n    return null;\n  }\n\n  return ENTRY_TYPES[entry.entryType](entry);\n}\n\nfunction getAbsoluteTime(time) {\n  // browserPerformanceTimeOrigin can be undefined if `performance` or\n  // `performance.now` doesn't exist, but this is already checked by this integration\n  return ((browserPerformanceTimeOrigin || WINDOW.performance.timeOrigin) + time) / 1000;\n}\n\nfunction createPaintEntry(entry) {\n  const { duration, entryType, name, startTime } = entry;\n\n  const start = getAbsoluteTime(startTime);\n  return {\n    type: entryType,\n    name,\n    start,\n    end: start + duration,\n    data: undefined,\n  };\n}\n\nfunction createNavigationEntry(entry) {\n  const {\n    entryType,\n    name,\n    decodedBodySize,\n    duration,\n    domComplete,\n    encodedBodySize,\n    domContentLoadedEventStart,\n    domContentLoadedEventEnd,\n    domInteractive,\n    loadEventStart,\n    loadEventEnd,\n    redirectCount,\n    startTime,\n    transferSize,\n    type,\n  } = entry;\n\n  // Ignore entries with no duration, they do not seem to be useful and cause dupes\n  if (duration === 0) {\n    return null;\n  }\n\n  return {\n    type: `${entryType}.${type}`,\n    start: getAbsoluteTime(startTime),\n    end: getAbsoluteTime(domComplete),\n    name,\n    data: {\n      size: transferSize,\n      decodedBodySize,\n      encodedBodySize,\n      duration,\n      domInteractive,\n      domContentLoadedEventStart,\n      domContentLoadedEventEnd,\n      loadEventStart,\n      loadEventEnd,\n      domComplete,\n      redirectCount,\n    },\n  };\n}\n\nfunction createResourceEntry(\n  entry,\n) {\n  const {\n    entryType,\n    initiatorType,\n    name,\n    responseEnd,\n    startTime,\n    decodedBodySize,\n    encodedBodySize,\n    responseStatus,\n    transferSize,\n  } = entry;\n\n  // Core SDK handles these\n  if (['fetch', 'xmlhttprequest'].includes(initiatorType)) {\n    return null;\n  }\n\n  return {\n    type: `${entryType}.${initiatorType}`,\n    start: getAbsoluteTime(startTime),\n    end: getAbsoluteTime(responseEnd),\n    name,\n    data: {\n      size: transferSize,\n      statusCode: responseStatus,\n      decodedBodySize,\n      encodedBodySize,\n    },\n  };\n}\n\n/**\n * Add a LCP event to the replay based on an LCP metric.\n */\nfunction getLargestContentfulPaint(metric\n\n) {\n  const entries = metric.entries;\n  const lastEntry = entries[entries.length - 1] ;\n  const element = lastEntry ? lastEntry.element : undefined;\n\n  const value = metric.value;\n\n  const end = getAbsoluteTime(value);\n\n  const data = {\n    type: 'largest-contentful-paint',\n    name: 'largest-contentful-paint',\n    start: end,\n    end,\n    data: {\n      value,\n      size: value,\n      nodeId: element ? record.mirror.getId(element) : undefined,\n    },\n  };\n\n  return data;\n}\n\n/**\n * Sets up a PerformanceObserver to listen to all performance entry types.\n * Returns a callback to stop observing.\n */\nfunction setupPerformanceObserver(replay) {\n  function addPerformanceEntry(entry) {\n    // It is possible for entries to come up multiple times\n    if (!replay.performanceEntries.includes(entry)) {\n      replay.performanceEntries.push(entry);\n    }\n  }\n\n  function onEntries({ entries }) {\n    entries.forEach(addPerformanceEntry);\n  }\n\n  const clearCallbacks = [];\n\n  (['navigation', 'paint', 'resource'] ).forEach(type => {\n    clearCallbacks.push(addPerformanceInstrumentationHandler(type, onEntries));\n  });\n\n  clearCallbacks.push(\n    addLcpInstrumentationHandler(({ metric }) => {\n      replay.replayPerformanceEntries.push(getLargestContentfulPaint(metric));\n    }),\n  );\n\n  // A callback to cleanup all handlers\n  return () => {\n    clearCallbacks.forEach(clearCallback => clearCallback());\n  };\n}\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__);\n\nconst r = `var t=Uint8Array,n=Uint16Array,r=Int32Array,e=new t([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),i=new t([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),a=new t([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),s=function(t,e){for(var i=new n(31),a=0;a<31;++a)i[a]=e+=1<<t[a-1];var s=new r(i[30]);for(a=1;a<30;++a)for(var o=i[a];o<i[a+1];++o)s[o]=o-i[a]<<5|a;return{b:i,r:s}},o=s(e,2),f=o.b,h=o.r;f[28]=258,h[258]=28;for(var l=s(i,0).r,u=new n(32768),c=0;c<32768;++c){var v=(43690&c)>>1|(21845&c)<<1;v=(61680&(v=(52428&v)>>2|(13107&v)<<2))>>4|(3855&v)<<4,u[c]=((65280&v)>>8|(255&v)<<8)>>1}var d=function(t,r,e){for(var i=t.length,a=0,s=new n(r);a<i;++a)t[a]&&++s[t[a]-1];var o,f=new n(r);for(a=1;a<r;++a)f[a]=f[a-1]+s[a-1]<<1;if(e){o=new n(1<<r);var h=15-r;for(a=0;a<i;++a)if(t[a])for(var l=a<<4|t[a],c=r-t[a],v=f[t[a]-1]++<<c,d=v|(1<<c)-1;v<=d;++v)o[u[v]>>h]=l}else for(o=new n(i),a=0;a<i;++a)t[a]&&(o[a]=u[f[t[a]-1]++]>>15-t[a]);return o},g=new t(288);for(c=0;c<144;++c)g[c]=8;for(c=144;c<256;++c)g[c]=9;for(c=256;c<280;++c)g[c]=7;for(c=280;c<288;++c)g[c]=8;var w=new t(32);for(c=0;c<32;++c)w[c]=5;var p=d(g,9,0),y=d(w,5,0),m=function(t){return(t+7)/8|0},b=function(n,r,e){return(null==r||r<0)&&(r=0),(null==e||e>n.length)&&(e=n.length),new t(n.subarray(r,e))},M=[\"unexpected EOF\",\"invalid block type\",\"invalid length/literal\",\"invalid distance\",\"stream finished\",\"no stream handler\",,\"no callback\",\"invalid UTF-8 data\",\"extra field too long\",\"date not in range 1980-2099\",\"filename too long\",\"stream finishing\",\"invalid zip data\"],E=function(t,n,r){var e=new Error(n||M[t]);if(e.code=t,Error.captureStackTrace&&Error.captureStackTrace(e,E),!r)throw e;return e},z=function(t,n,r){r<<=7&n;var e=n/8|0;t[e]|=r,t[e+1]|=r>>8},A=function(t,n,r){r<<=7&n;var e=n/8|0;t[e]|=r,t[e+1]|=r>>8,t[e+2]|=r>>16},_=function(r,e){for(var i=[],a=0;a<r.length;++a)r[a]&&i.push({s:a,f:r[a]});var s=i.length,o=i.slice();if(!s)return{t:F,l:0};if(1==s){var f=new t(i[0].s+1);return f[i[0].s]=1,{t:f,l:1}}i.sort((function(t,n){return t.f-n.f})),i.push({s:-1,f:25001});var h=i[0],l=i[1],u=0,c=1,v=2;for(i[0]={s:-1,f:h.f+l.f,l:h,r:l};c!=s-1;)h=i[i[u].f<i[v].f?u++:v++],l=i[u!=c&&i[u].f<i[v].f?u++:v++],i[c++]={s:-1,f:h.f+l.f,l:h,r:l};var d=o[0].s;for(a=1;a<s;++a)o[a].s>d&&(d=o[a].s);var g=new n(d+1),w=x(i[c-1],g,0);if(w>e){a=0;var p=0,y=w-e,m=1<<y;for(o.sort((function(t,n){return g[n.s]-g[t.s]||t.f-n.f}));a<s;++a){var b=o[a].s;if(!(g[b]>e))break;p+=m-(1<<w-g[b]),g[b]=e}for(p>>=y;p>0;){var M=o[a].s;g[M]<e?p-=1<<e-g[M]++-1:++a}for(;a>=0&&p;--a){var E=o[a].s;g[E]==e&&(--g[E],++p)}w=e}return{t:new t(g),l:w}},x=function(t,n,r){return-1==t.s?Math.max(x(t.l,n,r+1),x(t.r,n,r+1)):n[t.s]=r},D=function(t){for(var r=t.length;r&&!t[--r];);for(var e=new n(++r),i=0,a=t[0],s=1,o=function(t){e[i++]=t},f=1;f<=r;++f)if(t[f]==a&&f!=r)++s;else{if(!a&&s>2){for(;s>138;s-=138)o(32754);s>2&&(o(s>10?s-11<<5|28690:s-3<<5|12305),s=0)}else if(s>3){for(o(a),--s;s>6;s-=6)o(8304);s>2&&(o(s-3<<5|8208),s=0)}for(;s--;)o(a);s=1,a=t[f]}return{c:e.subarray(0,i),n:r}},T=function(t,n){for(var r=0,e=0;e<n.length;++e)r+=t[e]*n[e];return r},k=function(t,n,r){var e=r.length,i=m(n+2);t[i]=255&e,t[i+1]=e>>8,t[i+2]=255^t[i],t[i+3]=255^t[i+1];for(var a=0;a<e;++a)t[i+a+4]=r[a];return 8*(i+4+e)},C=function(t,r,s,o,f,h,l,u,c,v,m){z(r,m++,s),++f[256];for(var b=_(f,15),M=b.t,E=b.l,x=_(h,15),C=x.t,U=x.l,F=D(M),I=F.c,S=F.n,L=D(C),O=L.c,j=L.n,q=new n(19),B=0;B<I.length;++B)++q[31&I[B]];for(B=0;B<O.length;++B)++q[31&O[B]];for(var G=_(q,7),H=G.t,J=G.l,K=19;K>4&&!H[a[K-1]];--K);var N,P,Q,R,V=v+5<<3,W=T(f,g)+T(h,w)+l,X=T(f,M)+T(h,C)+l+14+3*K+T(q,H)+2*q[16]+3*q[17]+7*q[18];if(c>=0&&V<=W&&V<=X)return k(r,m,t.subarray(c,c+v));if(z(r,m,1+(X<W)),m+=2,X<W){N=d(M,E,0),P=M,Q=d(C,U,0),R=C;var Y=d(H,J,0);z(r,m,S-257),z(r,m+5,j-1),z(r,m+10,K-4),m+=14;for(B=0;B<K;++B)z(r,m+3*B,H[a[B]]);m+=3*K;for(var Z=[I,O],$=0;$<2;++$){var tt=Z[$];for(B=0;B<tt.length;++B){var nt=31&tt[B];z(r,m,Y[nt]),m+=H[nt],nt>15&&(z(r,m,tt[B]>>5&127),m+=tt[B]>>12)}}}else N=p,P=g,Q=y,R=w;for(B=0;B<u;++B){var rt=o[B];if(rt>255){A(r,m,N[(nt=rt>>18&31)+257]),m+=P[nt+257],nt>7&&(z(r,m,rt>>23&31),m+=e[nt]);var et=31&rt;A(r,m,Q[et]),m+=R[et],et>3&&(A(r,m,rt>>5&8191),m+=i[et])}else A(r,m,N[rt]),m+=P[rt]}return A(r,m,N[256]),m+P[256]},U=new r([65540,131080,131088,131104,262176,1048704,1048832,2114560,2117632]),F=new t(0),I=function(){for(var t=new Int32Array(256),n=0;n<256;++n){for(var r=n,e=9;--e;)r=(1&r&&-306674912)^r>>>1;t[n]=r}return t}(),S=function(){var t=1,n=0;return{p:function(r){for(var e=t,i=n,a=0|r.length,s=0;s!=a;){for(var o=Math.min(s+2655,a);s<o;++s)i+=e+=r[s];e=(65535&e)+15*(e>>16),i=(65535&i)+15*(i>>16)}t=e,n=i},d:function(){return(255&(t%=65521))<<24|(65280&t)<<8|(255&(n%=65521))<<8|n>>8}}},L=function(a,s,o,f,u){if(!u&&(u={l:1},s.dictionary)){var c=s.dictionary.subarray(-32768),v=new t(c.length+a.length);v.set(c),v.set(a,c.length),a=v,u.w=c.length}return function(a,s,o,f,u,c){var v=c.z||a.length,d=new t(f+v+5*(1+Math.ceil(v/7e3))+u),g=d.subarray(f,d.length-u),w=c.l,p=7&(c.r||0);if(s){p&&(g[0]=c.r>>3);for(var y=U[s-1],M=y>>13,E=8191&y,z=(1<<o)-1,A=c.p||new n(32768),_=c.h||new n(z+1),x=Math.ceil(o/3),D=2*x,T=function(t){return(a[t]^a[t+1]<<x^a[t+2]<<D)&z},F=new r(25e3),I=new n(288),S=new n(32),L=0,O=0,j=c.i||0,q=0,B=c.w||0,G=0;j+2<v;++j){var H=T(j),J=32767&j,K=_[H];if(A[J]=K,_[H]=J,B<=j){var N=v-j;if((L>7e3||q>24576)&&(N>423||!w)){p=C(a,g,0,F,I,S,O,q,G,j-G,p),q=L=O=0,G=j;for(var P=0;P<286;++P)I[P]=0;for(P=0;P<30;++P)S[P]=0}var Q=2,R=0,V=E,W=J-K&32767;if(N>2&&H==T(j-W))for(var X=Math.min(M,N)-1,Y=Math.min(32767,j),Z=Math.min(258,N);W<=Y&&--V&&J!=K;){if(a[j+Q]==a[j+Q-W]){for(var $=0;$<Z&&a[j+$]==a[j+$-W];++$);if($>Q){if(Q=$,R=W,$>X)break;var tt=Math.min(W,$-2),nt=0;for(P=0;P<tt;++P){var rt=j-W+P&32767,et=rt-A[rt]&32767;et>nt&&(nt=et,K=rt)}}}W+=(J=K)-(K=A[J])&32767}if(R){F[q++]=268435456|h[Q]<<18|l[R];var it=31&h[Q],at=31&l[R];O+=e[it]+i[at],++I[257+it],++S[at],B=j+Q,++L}else F[q++]=a[j],++I[a[j]]}}for(j=Math.max(j,B);j<v;++j)F[q++]=a[j],++I[a[j]];p=C(a,g,w,F,I,S,O,q,G,j-G,p),w||(c.r=7&p|g[p/8|0]<<3,p-=7,c.h=_,c.p=A,c.i=j,c.w=B)}else{for(j=c.w||0;j<v+w;j+=65535){var st=j+65535;st>=v&&(g[p/8|0]=w,st=v),p=k(g,p+1,a.subarray(j,st))}c.i=v}return b(d,0,f+m(p)+u)}(a,null==s.level?6:s.level,null==s.mem?Math.ceil(1.5*Math.max(8,Math.min(13,Math.log(a.length)))):12+s.mem,o,f,u)},O=function(t,n,r){for(;r;++n)t[n]=r,r>>>=8},j=function(){function n(n,r){if(\"function\"==typeof n&&(r=n,n={}),this.ondata=r,this.o=n||{},this.s={l:0,i:32768,w:32768,z:32768},this.b=new t(98304),this.o.dictionary){var e=this.o.dictionary.subarray(-32768);this.b.set(e,32768-e.length),this.s.i=32768-e.length}}return n.prototype.p=function(t,n){this.ondata(L(t,this.o,0,0,this.s),n)},n.prototype.push=function(n,r){this.ondata||E(5),this.s.l&&E(4);var e=n.length+this.s.z;if(e>this.b.length){if(e>2*this.b.length-32768){var i=new t(-32768&e);i.set(this.b.subarray(0,this.s.z)),this.b=i}var a=this.b.length-this.s.z;a&&(this.b.set(n.subarray(0,a),this.s.z),this.s.z=this.b.length,this.p(this.b,!1)),this.b.set(this.b.subarray(-32768)),this.b.set(n.subarray(a),32768),this.s.z=n.length-a+32768,this.s.i=32766,this.s.w=32768}else this.b.set(n,this.s.z),this.s.z+=n.length;this.s.l=1&r,(this.s.z>this.s.w+8191||r)&&(this.p(this.b,r||!1),this.s.w=this.s.i,this.s.i-=2)},n}();function q(t,n){n||(n={});var r=function(){var t=-1;return{p:function(n){for(var r=t,e=0;e<n.length;++e)r=I[255&r^n[e]]^r>>>8;t=r},d:function(){return~t}}}(),e=t.length;r.p(t);var i,a=L(t,n,10+((i=n).filename?i.filename.length+1:0),8),s=a.length;return function(t,n){var r=n.filename;if(t[0]=31,t[1]=139,t[2]=8,t[8]=n.level<2?4:9==n.level?2:0,t[9]=3,0!=n.mtime&&O(t,4,Math.floor(new Date(n.mtime||Date.now())/1e3)),r){t[3]=8;for(var e=0;e<=r.length;++e)t[e+10]=r.charCodeAt(e)}}(a,n),O(a,s-8,r.d()),O(a,s-4,e),a}var B=function(){function t(t,n){this.c=S(),this.v=1,j.call(this,t,n)}return t.prototype.push=function(t,n){this.c.p(t),j.prototype.push.call(this,t,n)},t.prototype.p=function(t,n){var r=L(t,this.o,this.v&&(this.o.dictionary?6:2),n&&4,this.s);this.v&&(function(t,n){var r=n.level,e=0==r?0:r<6?1:9==r?3:2;if(t[0]=120,t[1]=e<<6|(n.dictionary&&32),t[1]|=31-(t[0]<<8|t[1])%31,n.dictionary){var i=S();i.p(n.dictionary),O(t,2,i.d())}}(r,this.o),this.v=0),n&&O(r,r.length-4,this.c.d()),this.ondata(r,n)},t}(),G=\"undefined\"!=typeof TextEncoder&&new TextEncoder,H=\"undefined\"!=typeof TextDecoder&&new TextDecoder;try{H.decode(F,{stream:!0})}catch(t){}var J=function(){function t(t){this.ondata=t}return t.prototype.push=function(t,n){this.ondata||E(5),this.d&&E(4),this.ondata(K(t),this.d=n||!1)},t}();function K(n,r){if(r){for(var e=new t(n.length),i=0;i<n.length;++i)e[i]=n.charCodeAt(i);return e}if(G)return G.encode(n);var a=n.length,s=new t(n.length+(n.length>>1)),o=0,f=function(t){s[o++]=t};for(i=0;i<a;++i){if(o+5>s.length){var h=new t(o+8+(a-i<<1));h.set(s),s=h}var l=n.charCodeAt(i);l<128||r?f(l):l<2048?(f(192|l>>6),f(128|63&l)):l>55295&&l<57344?(f(240|(l=65536+(1047552&l)|1023&n.charCodeAt(++i))>>18),f(128|l>>12&63),f(128|l>>6&63),f(128|63&l)):(f(224|l>>12),f(128|l>>6&63),f(128|63&l))}return b(s,0,o)}const N=new class{constructor(){this._init()}clear(){this._init()}addEvent(t){if(!t)throw new Error(\"Adding invalid event\");const n=this._hasEvents?\",\":\"\";this.stream.push(n+t),this._hasEvents=!0}finish(){this.stream.push(\"]\",!0);const t=function(t){let n=0;for(let r=0,e=t.length;r<e;r++)n+=t[r].length;const r=new Uint8Array(n);for(let n=0,e=0,i=t.length;n<i;n++){const i=t[n];r.set(i,e),e+=i.length}return r}(this._deflatedData);return this._init(),t}_init(){this._hasEvents=!1,this._deflatedData=[],this.deflate=new B,this.deflate.ondata=(t,n)=>{this._deflatedData.push(t)},this.stream=new J(((t,n)=>{this.deflate.push(t,n)})),this.stream.push(\"[\")}},P={clear:()=>{N.clear()},addEvent:t=>N.addEvent(t),finish:()=>N.finish(),compress:t=>function(t){return q(K(t))}(t)};addEventListener(\"message\",(function(t){const n=t.data.method,r=t.data.id,e=t.data.arg;if(n in P&&\"function\"==typeof P[n])try{const t=P[n](e);postMessage({id:r,method:n,success:!0,response:t})}catch(t){postMessage({id:r,method:n,success:!1,response:t.message}),console.error(t)}})),postMessage({id:void 0,method:\"init\",success:!0,response:void 0});`;\n\nfunction e(){const e=new Blob([r]);return URL.createObjectURL(e)}\n\n/**\n * Log a message in debug mode, and add a breadcrumb when _experiment.traceInternals is enabled.\n */\nfunction logInfo(message, shouldAddBreadcrumb) {\n  if (!DEBUG_BUILD) {\n    return;\n  }\n\n  logger.info(message);\n\n  if (shouldAddBreadcrumb) {\n    addLogBreadcrumb(message);\n  }\n}\n\n/**\n * Log a message, and add a breadcrumb in the next tick.\n * This is necessary when the breadcrumb may be added before the replay is initialized.\n */\nfunction logInfoNextTick(message, shouldAddBreadcrumb) {\n  if (!DEBUG_BUILD) {\n    return;\n  }\n\n  logger.info(message);\n\n  if (shouldAddBreadcrumb) {\n    // Wait a tick here to avoid race conditions for some initial logs\n    // which may be added before replay is initialized\n    setTimeout(() => {\n      addLogBreadcrumb(message);\n    }, 0);\n  }\n}\n\nfunction addLogBreadcrumb(message) {\n  addBreadcrumb(\n    {\n      category: 'console',\n      data: {\n        logger: 'replay',\n      },\n      level: 'info',\n      message,\n    },\n    { level: 'info' },\n  );\n}\n\n/** This error indicates that the event buffer size exceeded the limit.. */\nclass EventBufferSizeExceededError extends Error {\n   constructor() {\n    super(`Event buffer exceeded maximum size of ${REPLAY_MAX_EVENT_BUFFER_SIZE}.`);\n  }\n}\n\n/**\n * A basic event buffer that does not do any compression.\n * Used as fallback if the compression worker cannot be loaded or is disabled.\n */\nclass EventBufferArray  {\n  /** All the events that are buffered to be sent. */\n\n  /** @inheritdoc */\n\n   constructor() {\n    this.events = [];\n    this._totalSize = 0;\n    this.hasCheckout = false;\n  }\n\n  /** @inheritdoc */\n   get hasEvents() {\n    return this.events.length > 0;\n  }\n\n  /** @inheritdoc */\n   get type() {\n    return 'sync';\n  }\n\n  /** @inheritdoc */\n   destroy() {\n    this.events = [];\n  }\n\n  /** @inheritdoc */\n   async addEvent(event) {\n    const eventSize = JSON.stringify(event).length;\n    this._totalSize += eventSize;\n    if (this._totalSize > REPLAY_MAX_EVENT_BUFFER_SIZE) {\n      throw new EventBufferSizeExceededError();\n    }\n\n    this.events.push(event);\n  }\n\n  /** @inheritdoc */\n   finish() {\n    return new Promise(resolve => {\n      // Make a copy of the events array reference and immediately clear the\n      // events member so that we do not lose new events while uploading\n      // attachment.\n      const eventsRet = this.events;\n      this.clear();\n      resolve(JSON.stringify(eventsRet));\n    });\n  }\n\n  /** @inheritdoc */\n   clear() {\n    this.events = [];\n    this._totalSize = 0;\n    this.hasCheckout = false;\n  }\n\n  /** @inheritdoc */\n   getEarliestTimestamp() {\n    const timestamp = this.events.map(event => event.timestamp).sort()[0];\n\n    if (!timestamp) {\n      return null;\n    }\n\n    return timestampToMs(timestamp);\n  }\n}\n\n/**\n * Event buffer that uses a web worker to compress events.\n * Exported only for testing.\n */\nclass WorkerHandler {\n\n   constructor(worker) {\n    this._worker = worker;\n    this._id = 0;\n  }\n\n  /**\n   * Ensure the worker is ready (or not).\n   * This will either resolve when the worker is ready, or reject if an error occured.\n   */\n   ensureReady() {\n    // Ensure we only check once\n    if (this._ensureReadyPromise) {\n      return this._ensureReadyPromise;\n    }\n\n    this._ensureReadyPromise = new Promise((resolve, reject) => {\n      this._worker.addEventListener(\n        'message',\n        ({ data }) => {\n          if ((data ).success) {\n            resolve();\n          } else {\n            reject();\n          }\n        },\n        { once: true },\n      );\n\n      this._worker.addEventListener(\n        'error',\n        error => {\n          reject(error);\n        },\n        { once: true },\n      );\n    });\n\n    return this._ensureReadyPromise;\n  }\n\n  /**\n   * Destroy the worker.\n   */\n   destroy() {\n    logInfo('[Replay] Destroying compression worker');\n    this._worker.terminate();\n  }\n\n  /**\n   * Post message to worker and wait for response before resolving promise.\n   */\n   postMessage(method, arg) {\n    const id = this._getAndIncrementId();\n\n    return new Promise((resolve, reject) => {\n      const listener = ({ data }) => {\n        const response = data ;\n        if (response.method !== method) {\n          return;\n        }\n\n        // There can be multiple listeners for a single method, the id ensures\n        // that the response matches the caller.\n        if (response.id !== id) {\n          return;\n        }\n\n        // At this point, we'll always want to remove listener regardless of result status\n        this._worker.removeEventListener('message', listener);\n\n        if (!response.success) {\n          // TODO: Do some error handling, not sure what\n          DEBUG_BUILD && logger.error('[Replay]', response.response);\n\n          reject(new Error('Error in compression worker'));\n          return;\n        }\n\n        resolve(response.response );\n      };\n\n      // Note: we can't use `once` option because it's possible it needs to\n      // listen to multiple messages\n      this._worker.addEventListener('message', listener);\n      this._worker.postMessage({ id, method, arg });\n    });\n  }\n\n  /** Get the current ID and increment it for the next call. */\n   _getAndIncrementId() {\n    return this._id++;\n  }\n}\n\n/**\n * Event buffer that uses a web worker to compress events.\n * Exported only for testing.\n */\nclass EventBufferCompressionWorker  {\n  /** @inheritdoc */\n\n   constructor(worker) {\n    this._worker = new WorkerHandler(worker);\n    this._earliestTimestamp = null;\n    this._totalSize = 0;\n    this.hasCheckout = false;\n  }\n\n  /** @inheritdoc */\n   get hasEvents() {\n    return !!this._earliestTimestamp;\n  }\n\n  /** @inheritdoc */\n   get type() {\n    return 'worker';\n  }\n\n  /**\n   * Ensure the worker is ready (or not).\n   * This will either resolve when the worker is ready, or reject if an error occured.\n   */\n   ensureReady() {\n    return this._worker.ensureReady();\n  }\n\n  /**\n   * Destroy the event buffer.\n   */\n   destroy() {\n    this._worker.destroy();\n  }\n\n  /**\n   * Add an event to the event buffer.\n   *\n   * Returns true if event was successfuly received and processed by worker.\n   */\n   addEvent(event) {\n    const timestamp = timestampToMs(event.timestamp);\n    if (!this._earliestTimestamp || timestamp < this._earliestTimestamp) {\n      this._earliestTimestamp = timestamp;\n    }\n\n    const data = JSON.stringify(event);\n    this._totalSize += data.length;\n\n    if (this._totalSize > REPLAY_MAX_EVENT_BUFFER_SIZE) {\n      return Promise.reject(new EventBufferSizeExceededError());\n    }\n\n    return this._sendEventToWorker(data);\n  }\n\n  /**\n   * Finish the event buffer and return the compressed data.\n   */\n   finish() {\n    return this._finishRequest();\n  }\n\n  /** @inheritdoc */\n   clear() {\n    this._earliestTimestamp = null;\n    this._totalSize = 0;\n    this.hasCheckout = false;\n\n    // We do not wait on this, as we assume the order of messages is consistent for the worker\n    this._worker.postMessage('clear').then(null, e => {\n      DEBUG_BUILD && logger.warn('[Replay] Sending \"clear\" message to worker failed', e);\n    });\n  }\n\n  /** @inheritdoc */\n   getEarliestTimestamp() {\n    return this._earliestTimestamp;\n  }\n\n  /**\n   * Send the event to the worker.\n   */\n   _sendEventToWorker(data) {\n    return this._worker.postMessage('addEvent', data);\n  }\n\n  /**\n   * Finish the request and return the compressed data from the worker.\n   */\n   async _finishRequest() {\n    const response = await this._worker.postMessage('finish');\n\n    this._earliestTimestamp = null;\n    this._totalSize = 0;\n\n    return response;\n  }\n}\n\n/**\n * This proxy will try to use the compression worker, and fall back to use the simple buffer if an error occurs there.\n * This can happen e.g. if the worker cannot be loaded.\n * Exported only for testing.\n */\nclass EventBufferProxy  {\n\n   constructor(worker) {\n    this._fallback = new EventBufferArray();\n    this._compression = new EventBufferCompressionWorker(worker);\n    this._used = this._fallback;\n\n    this._ensureWorkerIsLoadedPromise = this._ensureWorkerIsLoaded();\n  }\n\n  /** @inheritdoc */\n   get type() {\n    return this._used.type;\n  }\n\n  /** @inheritDoc */\n   get hasEvents() {\n    return this._used.hasEvents;\n  }\n\n  /** @inheritdoc */\n   get hasCheckout() {\n    return this._used.hasCheckout;\n  }\n  /** @inheritdoc */\n   set hasCheckout(value) {\n    this._used.hasCheckout = value;\n  }\n\n  /** @inheritDoc */\n   destroy() {\n    this._fallback.destroy();\n    this._compression.destroy();\n  }\n\n  /** @inheritdoc */\n   clear() {\n    return this._used.clear();\n  }\n\n  /** @inheritdoc */\n   getEarliestTimestamp() {\n    return this._used.getEarliestTimestamp();\n  }\n\n  /**\n   * Add an event to the event buffer.\n   *\n   * Returns true if event was successfully added.\n   */\n   addEvent(event) {\n    return this._used.addEvent(event);\n  }\n\n  /** @inheritDoc */\n   async finish() {\n    // Ensure the worker is loaded, so the sent event is compressed\n    await this.ensureWorkerIsLoaded();\n\n    return this._used.finish();\n  }\n\n  /** Ensure the worker has loaded. */\n   ensureWorkerIsLoaded() {\n    return this._ensureWorkerIsLoadedPromise;\n  }\n\n  /** Actually check if the worker has been loaded. */\n   async _ensureWorkerIsLoaded() {\n    try {\n      await this._compression.ensureReady();\n    } catch (error) {\n      // If the worker fails to load, we fall back to the simple buffer.\n      // Nothing more to do from our side here\n      logInfo('[Replay] Failed to load the compression worker, falling back to simple buffer');\n      return;\n    }\n\n    // Now we need to switch over the array buffer to the compression worker\n    await this._switchToCompressionWorker();\n  }\n\n  /** Switch the used buffer to the compression worker. */\n   async _switchToCompressionWorker() {\n    const { events, hasCheckout } = this._fallback;\n\n    const addEventPromises = [];\n    for (const event of events) {\n      addEventPromises.push(this._compression.addEvent(event));\n    }\n\n    this._compression.hasCheckout = hasCheckout;\n\n    // We switch over to the new buffer immediately - any further events will be added\n    // after the previously buffered ones\n    this._used = this._compression;\n\n    // Wait for original events to be re-added before resolving\n    try {\n      await Promise.all(addEventPromises);\n    } catch (error) {\n      DEBUG_BUILD && logger.warn('[Replay] Failed to add events when switching buffers.', error);\n    }\n  }\n}\n\n/**\n * Create an event buffer for replays.\n */\nfunction createEventBuffer({\n  useCompression,\n  workerUrl: customWorkerUrl,\n}) {\n  if (\n    useCompression &&\n    // eslint-disable-next-line no-restricted-globals\n    window.Worker\n  ) {\n    const worker = _loadWorker(customWorkerUrl);\n\n    if (worker) {\n      return worker;\n    }\n  }\n\n  logInfo('[Replay] Using simple buffer');\n  return new EventBufferArray();\n}\n\nfunction _loadWorker(customWorkerUrl) {\n  try {\n    const workerUrl = customWorkerUrl || _getWorkerUrl();\n\n    if (!workerUrl) {\n      return;\n    }\n\n    logInfo(`[Replay] Using compression worker${customWorkerUrl ? ` from ${customWorkerUrl}` : ''}`);\n    const worker = new Worker(workerUrl);\n    return new EventBufferProxy(worker);\n  } catch (error) {\n    logInfo('[Replay] Failed to create compression worker');\n    // Fall back to use simple event buffer array\n  }\n}\n\nfunction _getWorkerUrl() {\n  if (typeof __SENTRY_EXCLUDE_REPLAY_WORKER__ === 'undefined' || !__SENTRY_EXCLUDE_REPLAY_WORKER__) {\n    return e();\n  }\n\n  return '';\n}\n\n/** If sessionStorage is available. */\nfunction hasSessionStorage() {\n  try {\n    // This can throw, e.g. when being accessed in a sandboxed iframe\n    return 'sessionStorage' in WINDOW && !!WINDOW.sessionStorage;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Removes the session from Session Storage and unsets session in replay instance\n */\nfunction clearSession(replay) {\n  deleteSession();\n  replay.session = undefined;\n}\n\n/**\n * Deletes a session from storage\n */\nfunction deleteSession() {\n  if (!hasSessionStorage()) {\n    return;\n  }\n\n  try {\n    WINDOW.sessionStorage.removeItem(REPLAY_SESSION_KEY);\n  } catch (e) {\n    // Ignore potential SecurityError exceptions\n  }\n}\n\n/**\n * Given a sample rate, returns true if replay should be sampled.\n *\n * 1.0 = 100% sampling\n * 0.0 = 0% sampling\n */\nfunction isSampled(sampleRate) {\n  if (sampleRate === undefined) {\n    return false;\n  }\n\n  // Math.random() returns a number in range of 0 to 1 (inclusive of 0, but not 1)\n  return Math.random() < sampleRate;\n}\n\n/**\n * Get a session with defaults & applied sampling.\n */\nfunction makeSession(session) {\n  const now = Date.now();\n  const id = session.id || uuid4();\n  // Note that this means we cannot set a started/lastActivity of `0`, but this should not be relevant outside of tests.\n  const started = session.started || now;\n  const lastActivity = session.lastActivity || now;\n  const segmentId = session.segmentId || 0;\n  const sampled = session.sampled;\n  const previousSessionId = session.previousSessionId;\n\n  return {\n    id,\n    started,\n    lastActivity,\n    segmentId,\n    sampled,\n    previousSessionId,\n  };\n}\n\n/**\n * Save a session to session storage.\n */\nfunction saveSession(session) {\n  if (!hasSessionStorage()) {\n    return;\n  }\n\n  try {\n    WINDOW.sessionStorage.setItem(REPLAY_SESSION_KEY, JSON.stringify(session));\n  } catch (e) {\n    // Ignore potential SecurityError exceptions\n  }\n}\n\n/**\n * Get the sampled status for a session based on sample rates & current sampled status.\n */\nfunction getSessionSampleType(sessionSampleRate, allowBuffering) {\n  return isSampled(sessionSampleRate) ? 'session' : allowBuffering ? 'buffer' : false;\n}\n\n/**\n * Create a new session, which in its current implementation is a Sentry event\n * that all replays will be saved to as attachments. Currently, we only expect\n * one of these Sentry events per \"replay session\".\n */\nfunction createSession(\n  { sessionSampleRate, allowBuffering, stickySession = false },\n  { previousSessionId } = {},\n) {\n  const sampled = getSessionSampleType(sessionSampleRate, allowBuffering);\n  const session = makeSession({\n    sampled,\n    previousSessionId,\n  });\n\n  if (stickySession) {\n    saveSession(session);\n  }\n\n  return session;\n}\n\n/**\n * Fetches a session from storage\n */\nfunction fetchSession(traceInternals) {\n  if (!hasSessionStorage()) {\n    return null;\n  }\n\n  try {\n    // This can throw if cookies are disabled\n    const sessionStringFromStorage = WINDOW.sessionStorage.getItem(REPLAY_SESSION_KEY);\n\n    if (!sessionStringFromStorage) {\n      return null;\n    }\n\n    const sessionObj = JSON.parse(sessionStringFromStorage) ;\n\n    logInfoNextTick('[Replay] Loading existing session', traceInternals);\n\n    return makeSession(sessionObj);\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\n * Given an initial timestamp and an expiry duration, checks to see if current\n * time should be considered as expired.\n */\nfunction isExpired(\n  initialTime,\n  expiry,\n  targetTime = +new Date(),\n) {\n  // Always expired if < 0\n  if (initialTime === null || expiry === undefined || expiry < 0) {\n    return true;\n  }\n\n  // Never expires if == 0\n  if (expiry === 0) {\n    return false;\n  }\n\n  return initialTime + expiry <= targetTime;\n}\n\n/**\n * Checks to see if session is expired\n */\nfunction isSessionExpired(\n  session,\n  {\n    maxReplayDuration,\n    sessionIdleExpire,\n    targetTime = Date.now(),\n  },\n) {\n  return (\n    // First, check that maximum session length has not been exceeded\n    isExpired(session.started, maxReplayDuration, targetTime) ||\n    // check that the idle timeout has not been exceeded (i.e. user has\n    // performed an action within the last `sessionIdleExpire` ms)\n    isExpired(session.lastActivity, sessionIdleExpire, targetTime)\n  );\n}\n\n/** If the session should be refreshed or not. */\nfunction shouldRefreshSession(\n  session,\n  { sessionIdleExpire, maxReplayDuration },\n) {\n  // If not expired, all good, just keep the session\n  if (!isSessionExpired(session, { sessionIdleExpire, maxReplayDuration })) {\n    return false;\n  }\n\n  // If we are buffering & haven't ever flushed yet, always continue\n  if (session.sampled === 'buffer' && session.segmentId === 0) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Get or create a session, when initializing the replay.\n * Returns a session that may be unsampled.\n */\nfunction loadOrCreateSession(\n  {\n    traceInternals,\n    sessionIdleExpire,\n    maxReplayDuration,\n    previousSessionId,\n  }\n\n,\n  sessionOptions,\n) {\n  const existingSession = sessionOptions.stickySession && fetchSession(traceInternals);\n\n  // No session exists yet, just create a new one\n  if (!existingSession) {\n    logInfoNextTick('[Replay] Creating new session', traceInternals);\n    return createSession(sessionOptions, { previousSessionId });\n  }\n\n  if (!shouldRefreshSession(existingSession, { sessionIdleExpire, maxReplayDuration })) {\n    return existingSession;\n  }\n\n  logInfoNextTick('[Replay] Session in sessionStorage is expired, creating new one...');\n  return createSession(sessionOptions, { previousSessionId: existingSession.id });\n}\n\nfunction isCustomEvent(event) {\n  return event.type === EventType.Custom;\n}\n\n/**\n * Add an event to the event buffer.\n * In contrast to `addEvent`, this does not return a promise & does not wait for the adding of the event to succeed/fail.\n * Instead this returns `true` if we tried to add the event, else false.\n * It returns `false` e.g. if we are paused, disabled, or out of the max replay duration.\n *\n * `isCheckout` is true if this is either the very first event, or an event triggered by `checkoutEveryNms`.\n */\nfunction addEventSync(replay, event, isCheckout) {\n  if (!shouldAddEvent(replay, event)) {\n    return false;\n  }\n\n  // This should never reject\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  _addEvent(replay, event, isCheckout);\n\n  return true;\n}\n\n/**\n * Add an event to the event buffer.\n * Resolves to `null` if no event was added, else to `void`.\n *\n * `isCheckout` is true if this is either the very first event, or an event triggered by `checkoutEveryNms`.\n */\nfunction addEvent(\n  replay,\n  event,\n  isCheckout,\n) {\n  if (!shouldAddEvent(replay, event)) {\n    return Promise.resolve(null);\n  }\n\n  return _addEvent(replay, event, isCheckout);\n}\n\nasync function _addEvent(\n  replay,\n  event,\n  isCheckout,\n) {\n  if (!replay.eventBuffer) {\n    return null;\n  }\n\n  try {\n    if (isCheckout && replay.recordingMode === 'buffer') {\n      replay.eventBuffer.clear();\n    }\n\n    if (isCheckout) {\n      replay.eventBuffer.hasCheckout = true;\n    }\n\n    const replayOptions = replay.getOptions();\n\n    const eventAfterPossibleCallback = maybeApplyCallback(event, replayOptions.beforeAddRecordingEvent);\n\n    if (!eventAfterPossibleCallback) {\n      return;\n    }\n\n    return await replay.eventBuffer.addEvent(eventAfterPossibleCallback);\n  } catch (error) {\n    const reason = error && error instanceof EventBufferSizeExceededError ? 'addEventSizeExceeded' : 'addEvent';\n\n    DEBUG_BUILD && logger.error(error);\n    await replay.stop({ reason });\n\n    const client = getClient();\n\n    if (client) {\n      client.recordDroppedEvent('internal_sdk_error', 'replay');\n    }\n  }\n}\n\n/** Exported only for tests. */\nfunction shouldAddEvent(replay, event) {\n  if (!replay.eventBuffer || replay.isPaused() || !replay.isEnabled()) {\n    return false;\n  }\n\n  const timestampInMs = timestampToMs(event.timestamp);\n\n  // Throw out events that happen more than 5 minutes ago. This can happen if\n  // page has been left open and idle for a long period of time and user\n  // comes back to trigger a new session. The performance entries rely on\n  // `performance.timeOrigin`, which is when the page first opened.\n  if (timestampInMs + replay.timeouts.sessionIdlePause < Date.now()) {\n    return false;\n  }\n\n  // Throw out events that are +60min from the initial timestamp\n  if (timestampInMs > replay.getContext().initialTimestamp + replay.getOptions().maxReplayDuration) {\n    logInfo(\n      `[Replay] Skipping event with timestamp ${timestampInMs} because it is after maxReplayDuration`,\n      replay.getOptions()._experiments.traceInternals,\n    );\n    return false;\n  }\n\n  return true;\n}\n\nfunction maybeApplyCallback(\n  event,\n  callback,\n) {\n  try {\n    if (typeof callback === 'function' && isCustomEvent(event)) {\n      return callback(event);\n    }\n  } catch (error) {\n    DEBUG_BUILD &&\n      logger.error('[Replay] An error occured in the `beforeAddRecordingEvent` callback, skipping the event...', error);\n    return null;\n  }\n\n  return event;\n}\n\n/** If the event is an error event */\nfunction isErrorEvent(event) {\n  return !event.type;\n}\n\n/** If the event is a transaction event */\nfunction isTransactionEvent(event) {\n  return event.type === 'transaction';\n}\n\n/** If the event is an replay event */\nfunction isReplayEvent(event) {\n  return event.type === 'replay_event';\n}\n\n/** If the event is a feedback event */\nfunction isFeedbackEvent(event) {\n  return event.type === 'feedback';\n}\n\n/**\n * Returns a listener to be added to `client.on('afterSendErrorEvent, listener)`.\n */\nfunction handleAfterSendEvent(replay) {\n  // Custom transports may still be returning `Promise<void>`, which means we cannot expect the status code to be available there\n  // TODO (v8): remove this check as it will no longer be necessary\n  const enforceStatusCode = isBaseTransportSend();\n\n  return (event, sendResponse) => {\n    if (!replay.isEnabled() || (!isErrorEvent(event) && !isTransactionEvent(event))) {\n      return;\n    }\n\n    const statusCode = sendResponse && sendResponse.statusCode;\n\n    // We only want to do stuff on successful error sending, otherwise you get error replays without errors attached\n    // If not using the base transport, we allow `undefined` response (as a custom transport may not implement this correctly yet)\n    // If we do use the base transport, we skip if we encountered an non-OK status code\n    if (enforceStatusCode && (!statusCode || statusCode < 200 || statusCode >= 300)) {\n      return;\n    }\n\n    if (isTransactionEvent(event)) {\n      handleTransactionEvent(replay, event);\n      return;\n    }\n\n    handleErrorEvent(replay, event);\n  };\n}\n\nfunction handleTransactionEvent(replay, event) {\n  const replayContext = replay.getContext();\n\n  // Collect traceIds in _context regardless of `recordingMode`\n  // In error mode, _context gets cleared on every checkout\n  // We limit to max. 100 transactions linked\n  if (event.contexts && event.contexts.trace && event.contexts.trace.trace_id && replayContext.traceIds.size < 100) {\n    replayContext.traceIds.add(event.contexts.trace.trace_id );\n  }\n}\n\nfunction handleErrorEvent(replay, event) {\n  const replayContext = replay.getContext();\n\n  // Add error to list of errorIds of replay. This is ok to do even if not\n  // sampled because context will get reset at next checkout.\n  // XXX: There is also a race condition where it's possible to capture an\n  // error to Sentry before Replay SDK has loaded, but response returns after\n  // it was loaded, and this gets called.\n  // We limit to max. 100 errors linked\n  if (event.event_id && replayContext.errorIds.size < 100) {\n    replayContext.errorIds.add(event.event_id);\n  }\n\n  // If error event is tagged with replay id it means it was sampled (when in buffer mode)\n  // Need to be very careful that this does not cause an infinite loop\n  if (replay.recordingMode !== 'buffer' || !event.tags || !event.tags.replayId) {\n    return;\n  }\n\n  const { beforeErrorSampling } = replay.getOptions();\n  if (typeof beforeErrorSampling === 'function' && !beforeErrorSampling(event)) {\n    return;\n  }\n\n  setTimeout(() => {\n    // Capture current event buffer as new replay\n    // This should never reject\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    replay.sendBufferedReplayOrFlush();\n  });\n}\n\nfunction isBaseTransportSend() {\n  const client = getClient();\n  if (!client) {\n    return false;\n  }\n\n  const transport = client.getTransport();\n  if (!transport) {\n    return false;\n  }\n\n  return (\n    (transport.send ).__sentry__baseTransport__ || false\n  );\n}\n\n/**\n * Returns a listener to be added to `client.on('afterSendErrorEvent, listener)`.\n */\nfunction handleBeforeSendEvent(replay) {\n  return (event) => {\n    if (!replay.isEnabled() || !isErrorEvent(event)) {\n      return;\n    }\n\n    handleHydrationError(replay, event);\n  };\n}\n\nfunction handleHydrationError(replay, event) {\n  const exceptionValue = event.exception && event.exception.values && event.exception.values[0].value;\n  if (typeof exceptionValue !== 'string') {\n    return;\n  }\n\n  if (\n    // Only matches errors in production builds of react-dom\n    // Example https://reactjs.org/docs/error-decoder.html?invariant=423\n    exceptionValue.match(/reactjs\\.org\\/docs\\/error-decoder\\.html\\?invariant=(418|419|422|423|425)/) ||\n    // Development builds of react-dom\n    // Error 1: Hydration failed because the initial UI does not match what was rendered on the server.\n    // Error 2: Text content does not match server-rendered HTML. Warning: Text content did not match.\n    exceptionValue.match(/(does not match server-rendered HTML|Hydration failed because)/i)\n  ) {\n    const breadcrumb = createBreadcrumb({\n      category: 'replay.hydrate-error',\n    });\n    addBreadcrumbEvent(replay, breadcrumb);\n  }\n}\n\n/**\n * Returns true if we think the given event is an error originating inside of rrweb.\n */\nfunction isRrwebError(event, hint) {\n  if (event.type || !event.exception || !event.exception.values || !event.exception.values.length) {\n    return false;\n  }\n\n  // @ts-expect-error this may be set by rrweb when it finds errors\n  if (hint.originalException && hint.originalException.__rrweb__) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Add a feedback breadcrumb event to replay.\n */\nfunction addFeedbackBreadcrumb(replay, event) {\n  replay.triggerUserActivity();\n  replay.addUpdate(() => {\n    if (!event.timestamp) {\n      // Ignore events that don't have timestamps (this shouldn't happen, more of a typing issue)\n      // Return true here so that we don't flush\n      return true;\n    }\n\n    // This should never reject\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    replay.throttledAddEvent({\n      type: EventType.Custom,\n      timestamp: event.timestamp * 1000,\n      data: {\n        tag: 'breadcrumb',\n        payload: {\n          timestamp: event.timestamp,\n          type: 'default',\n          category: 'sentry.feedback',\n          data: {\n            feedbackId: event.event_id,\n          },\n        },\n      },\n    } );\n\n    return false;\n  });\n}\n\n/**\n * Determine if event should be sampled (only applies in buffer mode).\n * When an event is captured by `hanldleGlobalEvent`, when in buffer mode\n * we determine if we want to sample the error or not.\n */\nfunction shouldSampleForBufferEvent(replay, event) {\n  if (replay.recordingMode !== 'buffer') {\n    return false;\n  }\n\n  // ignore this error because otherwise we could loop indefinitely with\n  // trying to capture replay and failing\n  if (event.message === UNABLE_TO_SEND_REPLAY) {\n    return false;\n  }\n\n  // Require the event to be an error event & to have an exception\n  if (!event.exception || event.type) {\n    return false;\n  }\n\n  return isSampled(replay.getOptions().errorSampleRate);\n}\n\n/**\n * Returns a listener to be added to `addEventProcessor(listener)`.\n */\nfunction handleGlobalEventListener(\n  replay,\n  includeAfterSendEventHandling = false,\n) {\n  const afterSendHandler = includeAfterSendEventHandling ? handleAfterSendEvent(replay) : undefined;\n\n  return Object.assign(\n    (event, hint) => {\n      // Do nothing if replay has been disabled\n      if (!replay.isEnabled()) {\n        return event;\n      }\n\n      if (isReplayEvent(event)) {\n        // Replays have separate set of breadcrumbs, do not include breadcrumbs\n        // from core SDK\n        delete event.breadcrumbs;\n        return event;\n      }\n\n      // We only want to handle errors, transactions, and feedbacks, nothing else\n      if (!isErrorEvent(event) && !isTransactionEvent(event) && !isFeedbackEvent(event)) {\n        return event;\n      }\n\n      // Ensure we do not add replay_id if the session is expired\n      const isSessionActive = replay.checkAndHandleExpiredSession();\n      if (!isSessionActive) {\n        return event;\n      }\n\n      if (isFeedbackEvent(event)) {\n        // This should never reject\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        replay.flush();\n        event.contexts.feedback.replay_id = replay.getSessionId();\n        // Add a replay breadcrumb for this piece of feedback\n        addFeedbackBreadcrumb(replay, event);\n        return event;\n      }\n\n      // Unless `captureExceptions` is enabled, we want to ignore errors coming from rrweb\n      // As there can be a bunch of stuff going wrong in internals there, that we don't want to bubble up to users\n      if (isRrwebError(event, hint) && !replay.getOptions()._experiments.captureExceptions) {\n        DEBUG_BUILD && logger.log('[Replay] Ignoring error from rrweb internals', event);\n        return null;\n      }\n\n      // When in buffer mode, we decide to sample here.\n      // Later, in `handleAfterSendEvent`, if the replayId is set, we know that we sampled\n      // And convert the buffer session to a full session\n      const isErrorEventSampled = shouldSampleForBufferEvent(replay, event);\n\n      // Tag errors if it has been sampled in buffer mode, or if it is session mode\n      // Only tag transactions if in session mode\n      const shouldTagReplayId = isErrorEventSampled || replay.recordingMode === 'session';\n\n      if (shouldTagReplayId) {\n        event.tags = { ...event.tags, replayId: replay.getSessionId() };\n      }\n\n      // In cases where a custom client is used that does not support the new hooks (yet),\n      // we manually call this hook method here\n      if (afterSendHandler) {\n        // Pretend the error had a 200 response so we always capture it\n        afterSendHandler(event, { statusCode: 200 });\n      }\n\n      return event;\n    },\n    { id: 'Replay' },\n  );\n}\n\n/**\n * Create a \"span\" for each performance entry.\n */\nfunction createPerformanceSpans(\n  replay,\n  entries,\n) {\n  return entries.map(({ type, start, end, name, data }) => {\n    const response = replay.throttledAddEvent({\n      type: EventType.Custom,\n      timestamp: start,\n      data: {\n        tag: 'performanceSpan',\n        payload: {\n          op: type,\n          description: name,\n          startTimestamp: start,\n          endTimestamp: end,\n          data,\n        },\n      },\n    });\n\n    // If response is a string, it means its either THROTTLED or SKIPPED\n    return typeof response === 'string' ? Promise.resolve(null) : response;\n  });\n}\n\nfunction handleHistory(handlerData) {\n  const { from, to } = handlerData;\n\n  const now = Date.now() / 1000;\n\n  return {\n    type: 'navigation.push',\n    start: now,\n    end: now,\n    name: to,\n    data: {\n      previous: from,\n    },\n  };\n}\n\n/**\n * Returns a listener to be added to `addHistoryInstrumentationHandler(listener)`.\n */\nfunction handleHistorySpanListener(replay) {\n  return (handlerData) => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n\n    const result = handleHistory(handlerData);\n\n    if (result === null) {\n      return;\n    }\n\n    // Need to collect visited URLs\n    replay.getContext().urls.push(result.name);\n    replay.triggerUserActivity();\n\n    replay.addUpdate(() => {\n      createPerformanceSpans(replay, [result]);\n      // Returning false to flush\n      return false;\n    });\n  };\n}\n\n/**\n * Check whether a given request URL should be filtered out. This is so we\n * don't log Sentry ingest requests.\n */\nfunction shouldFilterRequest(replay, url) {\n  // If we enabled the `traceInternals` experiment, we want to trace everything\n  if (DEBUG_BUILD && replay.getOptions()._experiments.traceInternals) {\n    return false;\n  }\n\n  return isSentryRequestUrl(url, getClient());\n}\n\n/** Add a performance entry breadcrumb */\nfunction addNetworkBreadcrumb(\n  replay,\n  result,\n) {\n  if (!replay.isEnabled()) {\n    return;\n  }\n\n  if (result === null) {\n    return;\n  }\n\n  if (shouldFilterRequest(replay, result.name)) {\n    return;\n  }\n\n  replay.addUpdate(() => {\n    createPerformanceSpans(replay, [result]);\n    // Returning true will cause `addUpdate` to not flush\n    // We do not want network requests to cause a flush. This will prevent\n    // recurring/polling requests from keeping the replay session alive.\n    return true;\n  });\n}\n\n/** only exported for tests */\nfunction handleFetch(handlerData) {\n  const { startTimestamp, endTimestamp, fetchData, response } = handlerData;\n\n  if (!endTimestamp) {\n    return null;\n  }\n\n  // This is only used as a fallback, so we know the body sizes are never set here\n  const { method, url } = fetchData;\n\n  return {\n    type: 'resource.fetch',\n    start: startTimestamp / 1000,\n    end: endTimestamp / 1000,\n    name: url,\n    data: {\n      method,\n      statusCode: response ? (response ).status : undefined,\n    },\n  };\n}\n\n/**\n * Returns a listener to be added to `addFetchInstrumentationHandler(listener)`.\n */\nfunction handleFetchSpanListener(replay) {\n  return (handlerData) => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n\n    const result = handleFetch(handlerData);\n\n    addNetworkBreadcrumb(replay, result);\n  };\n}\n\n/** only exported for tests */\nfunction handleXhr(handlerData) {\n  const { startTimestamp, endTimestamp, xhr } = handlerData;\n\n  const sentryXhrData = xhr[SENTRY_XHR_DATA_KEY];\n\n  if (!startTimestamp || !endTimestamp || !sentryXhrData) {\n    return null;\n  }\n\n  // This is only used as a fallback, so we know the body sizes are never set here\n  const { method, url, status_code: statusCode } = sentryXhrData;\n\n  if (url === undefined) {\n    return null;\n  }\n\n  return {\n    type: 'resource.xhr',\n    name: url,\n    start: startTimestamp / 1000,\n    end: endTimestamp / 1000,\n    data: {\n      method,\n      statusCode,\n    },\n  };\n}\n\n/**\n * Returns a listener to be added to `addXhrInstrumentationHandler(listener)`.\n */\nfunction handleXhrSpanListener(replay) {\n  return (handlerData) => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n\n    const result = handleXhr(handlerData);\n\n    addNetworkBreadcrumb(replay, result);\n  };\n}\n\n/** Get the size of a body. */\nfunction getBodySize(\n  body,\n  textEncoder,\n) {\n  if (!body) {\n    return undefined;\n  }\n\n  try {\n    if (typeof body === 'string') {\n      return textEncoder.encode(body).length;\n    }\n\n    if (body instanceof URLSearchParams) {\n      return textEncoder.encode(body.toString()).length;\n    }\n\n    if (body instanceof FormData) {\n      const formDataStr = _serializeFormData(body);\n      return textEncoder.encode(formDataStr).length;\n    }\n\n    if (body instanceof Blob) {\n      return body.size;\n    }\n\n    if (body instanceof ArrayBuffer) {\n      return body.byteLength;\n    }\n\n    // Currently unhandled types: ArrayBufferView, ReadableStream\n  } catch (e) {\n    // just return undefined\n  }\n\n  return undefined;\n}\n\n/** Convert a Content-Length header to number/undefined.  */\nfunction parseContentLengthHeader(header) {\n  if (!header) {\n    return undefined;\n  }\n\n  const size = parseInt(header, 10);\n  return isNaN(size) ? undefined : size;\n}\n\n/** Get the string representation of a body. */\nfunction getBodyString(body) {\n  try {\n    if (typeof body === 'string') {\n      return [body];\n    }\n\n    if (body instanceof URLSearchParams) {\n      return [body.toString()];\n    }\n\n    if (body instanceof FormData) {\n      return [_serializeFormData(body)];\n    }\n\n    if (!body) {\n      return [undefined];\n    }\n  } catch (e2) {\n    DEBUG_BUILD && logger.warn('[Replay] Failed to serialize body', body);\n    return [undefined, 'BODY_PARSE_ERROR'];\n  }\n\n  DEBUG_BUILD && logger.info('[Replay] Skipping network body because of body type', body);\n\n  return [undefined, 'UNPARSEABLE_BODY_TYPE'];\n}\n\n/** Merge a warning into an existing network request/response. */\nfunction mergeWarning(\n  info,\n  warning,\n) {\n  if (!info) {\n    return {\n      headers: {},\n      size: undefined,\n      _meta: {\n        warnings: [warning],\n      },\n    };\n  }\n\n  const newMeta = { ...info._meta };\n  const existingWarnings = newMeta.warnings || [];\n  newMeta.warnings = [...existingWarnings, warning];\n\n  info._meta = newMeta;\n  return info;\n}\n\n/** Convert ReplayNetworkRequestData to a PerformanceEntry. */\nfunction makeNetworkReplayBreadcrumb(\n  type,\n  data,\n) {\n  if (!data) {\n    return null;\n  }\n\n  const { startTimestamp, endTimestamp, url, method, statusCode, request, response } = data;\n\n  const result = {\n    type,\n    start: startTimestamp / 1000,\n    end: endTimestamp / 1000,\n    name: url,\n    data: dropUndefinedKeys({\n      method,\n      statusCode,\n      request,\n      response,\n    }),\n  };\n\n  return result;\n}\n\n/** Build the request or response part of a replay network breadcrumb that was skipped. */\nfunction buildSkippedNetworkRequestOrResponse(bodySize) {\n  return {\n    headers: {},\n    size: bodySize,\n    _meta: {\n      warnings: ['URL_SKIPPED'],\n    },\n  };\n}\n\n/** Build the request or response part of a replay network breadcrumb. */\nfunction buildNetworkRequestOrResponse(\n  headers,\n  bodySize,\n  body,\n) {\n  if (!bodySize && Object.keys(headers).length === 0) {\n    return undefined;\n  }\n\n  if (!bodySize) {\n    return {\n      headers,\n    };\n  }\n\n  if (!body) {\n    return {\n      headers,\n      size: bodySize,\n    };\n  }\n\n  const info = {\n    headers,\n    size: bodySize,\n  };\n\n  const { body: normalizedBody, warnings } = normalizeNetworkBody(body);\n  info.body = normalizedBody;\n  if (warnings && warnings.length > 0) {\n    info._meta = {\n      warnings,\n    };\n  }\n\n  return info;\n}\n\n/** Filter a set of headers */\nfunction getAllowedHeaders(headers, allowedHeaders) {\n  return Object.keys(headers).reduce((filteredHeaders, key) => {\n    const normalizedKey = key.toLowerCase();\n    // Avoid putting empty strings into the headers\n    if (allowedHeaders.includes(normalizedKey) && headers[key]) {\n      filteredHeaders[normalizedKey] = headers[key];\n    }\n    return filteredHeaders;\n  }, {});\n}\n\nfunction _serializeFormData(formData) {\n  // This is a bit simplified, but gives us a decent estimate\n  // This converts e.g. { name: 'Anne Smith', age: 13 } to 'name=Anne+Smith&age=13'\n  // @ts-expect-error passing FormData to URLSearchParams actually works\n  return new URLSearchParams(formData).toString();\n}\n\nfunction normalizeNetworkBody(body)\n\n {\n  if (!body || typeof body !== 'string') {\n    return {\n      body,\n    };\n  }\n\n  const exceedsSizeLimit = body.length > NETWORK_BODY_MAX_SIZE;\n  const isProbablyJson = _strIsProbablyJson(body);\n\n  if (exceedsSizeLimit) {\n    const truncatedBody = body.slice(0, NETWORK_BODY_MAX_SIZE);\n\n    if (isProbablyJson) {\n      return {\n        body: truncatedBody,\n        warnings: ['MAYBE_JSON_TRUNCATED'],\n      };\n    }\n\n    return {\n      body: `${truncatedBody}…`,\n      warnings: ['TEXT_TRUNCATED'],\n    };\n  }\n\n  if (isProbablyJson) {\n    try {\n      const jsonBody = JSON.parse(body);\n      return {\n        body: jsonBody,\n      };\n    } catch (e3) {\n      // fall back to just send the body as string\n    }\n  }\n\n  return {\n    body,\n  };\n}\n\nfunction _strIsProbablyJson(str) {\n  const first = str[0];\n  const last = str[str.length - 1];\n\n  // Simple check: If this does not start & end with {} or [], it's not JSON\n  return (first === '[' && last === ']') || (first === '{' && last === '}');\n}\n\n/** Match an URL against a list of strings/Regex. */\nfunction urlMatches(url, urls) {\n  const fullUrl = getFullUrl(url);\n\n  return stringMatchesSomePattern(fullUrl, urls);\n}\n\n/** exported for tests */\nfunction getFullUrl(url, baseURI = WINDOW.document.baseURI) {\n  // Short circuit for common cases:\n  if (url.startsWith('http://') || url.startsWith('https://') || url.startsWith(WINDOW.location.origin)) {\n    return url;\n  }\n  const fixedUrl = new URL(url, baseURI);\n\n  // If these do not match, we are not dealing with a relative URL, so just return it\n  if (fixedUrl.origin !== new URL(baseURI).origin) {\n    return url;\n  }\n\n  const fullUrl = fixedUrl.href;\n\n  // Remove trailing slashes, if they don't match the original URL\n  if (!url.endsWith('/') && fullUrl.endsWith('/')) {\n    return fullUrl.slice(0, -1);\n  }\n\n  return fullUrl;\n}\n\n/**\n * Capture a fetch breadcrumb to a replay.\n * This adds additional data (where approriate).\n */\nasync function captureFetchBreadcrumbToReplay(\n  breadcrumb,\n  hint,\n  options\n\n,\n) {\n  try {\n    const data = await _prepareFetchData(breadcrumb, hint, options);\n\n    // Create a replay performance entry from this breadcrumb\n    const result = makeNetworkReplayBreadcrumb('resource.fetch', data);\n    addNetworkBreadcrumb(options.replay, result);\n  } catch (error) {\n    DEBUG_BUILD && logger.error('[Replay] Failed to capture fetch breadcrumb', error);\n  }\n}\n\n/**\n * Enrich a breadcrumb with additional data.\n * This has to be sync & mutate the given breadcrumb,\n * as the breadcrumb is afterwards consumed by other handlers.\n */\nfunction enrichFetchBreadcrumb(\n  breadcrumb,\n  hint,\n  options,\n) {\n  const { input, response } = hint;\n\n  const body = input ? _getFetchRequestArgBody(input) : undefined;\n  const reqSize = getBodySize(body, options.textEncoder);\n\n  const resSize = response ? parseContentLengthHeader(response.headers.get('content-length')) : undefined;\n\n  if (reqSize !== undefined) {\n    breadcrumb.data.request_body_size = reqSize;\n  }\n  if (resSize !== undefined) {\n    breadcrumb.data.response_body_size = resSize;\n  }\n}\n\nasync function _prepareFetchData(\n  breadcrumb,\n  hint,\n  options\n\n,\n) {\n  const now = Date.now();\n  const { startTimestamp = now, endTimestamp = now } = hint;\n\n  const {\n    url,\n    method,\n    status_code: statusCode = 0,\n    request_body_size: requestBodySize,\n    response_body_size: responseBodySize,\n  } = breadcrumb.data;\n\n  const captureDetails =\n    urlMatches(url, options.networkDetailAllowUrls) && !urlMatches(url, options.networkDetailDenyUrls);\n\n  const request = captureDetails\n    ? _getRequestInfo(options, hint.input, requestBodySize)\n    : buildSkippedNetworkRequestOrResponse(requestBodySize);\n  const response = await _getResponseInfo(captureDetails, options, hint.response, responseBodySize);\n\n  return {\n    startTimestamp,\n    endTimestamp,\n    url,\n    method,\n    statusCode,\n    request,\n    response,\n  };\n}\n\nfunction _getRequestInfo(\n  { networkCaptureBodies, networkRequestHeaders },\n  input,\n  requestBodySize,\n) {\n  const headers = input ? getRequestHeaders(input, networkRequestHeaders) : {};\n\n  if (!networkCaptureBodies) {\n    return buildNetworkRequestOrResponse(headers, requestBodySize, undefined);\n  }\n\n  // We only want to transmit string or string-like bodies\n  const requestBody = _getFetchRequestArgBody(input);\n  const [bodyStr, warning] = getBodyString(requestBody);\n  const data = buildNetworkRequestOrResponse(headers, requestBodySize, bodyStr);\n\n  if (warning) {\n    return mergeWarning(data, warning);\n  }\n\n  return data;\n}\n\n/** Exported only for tests. */\nasync function _getResponseInfo(\n  captureDetails,\n  {\n    networkCaptureBodies,\n    textEncoder,\n    networkResponseHeaders,\n  }\n\n,\n  response,\n  responseBodySize,\n) {\n  if (!captureDetails && responseBodySize !== undefined) {\n    return buildSkippedNetworkRequestOrResponse(responseBodySize);\n  }\n\n  const headers = response ? getAllHeaders(response.headers, networkResponseHeaders) : {};\n\n  if (!response || (!networkCaptureBodies && responseBodySize !== undefined)) {\n    return buildNetworkRequestOrResponse(headers, responseBodySize, undefined);\n  }\n\n  const [bodyText, warning] = await _parseFetchResponseBody(response);\n  const result = getResponseData(bodyText, {\n    networkCaptureBodies,\n    textEncoder,\n    responseBodySize,\n    captureDetails,\n    headers,\n  });\n\n  if (warning) {\n    return mergeWarning(result, warning);\n  }\n\n  return result;\n}\n\nfunction getResponseData(\n  bodyText,\n  {\n    networkCaptureBodies,\n    textEncoder,\n    responseBodySize,\n    captureDetails,\n    headers,\n  }\n\n,\n) {\n  try {\n    const size =\n      bodyText && bodyText.length && responseBodySize === undefined\n        ? getBodySize(bodyText, textEncoder)\n        : responseBodySize;\n\n    if (!captureDetails) {\n      return buildSkippedNetworkRequestOrResponse(size);\n    }\n\n    if (networkCaptureBodies) {\n      return buildNetworkRequestOrResponse(headers, size, bodyText);\n    }\n\n    return buildNetworkRequestOrResponse(headers, size, undefined);\n  } catch (error) {\n    DEBUG_BUILD && logger.warn('[Replay] Failed to serialize response body', error);\n    // fallback\n    return buildNetworkRequestOrResponse(headers, responseBodySize, undefined);\n  }\n}\n\nasync function _parseFetchResponseBody(response) {\n  const res = _tryCloneResponse(response);\n\n  if (!res) {\n    return [undefined, 'BODY_PARSE_ERROR'];\n  }\n\n  try {\n    const text = await _tryGetResponseText(res);\n    return [text];\n  } catch (error) {\n    DEBUG_BUILD && logger.warn('[Replay] Failed to get text body from response', error);\n    return [undefined, 'BODY_PARSE_ERROR'];\n  }\n}\n\nfunction _getFetchRequestArgBody(fetchArgs = []) {\n  // We only support getting the body from the fetch options\n  if (fetchArgs.length !== 2 || typeof fetchArgs[1] !== 'object') {\n    return undefined;\n  }\n\n  return (fetchArgs[1] ).body;\n}\n\nfunction getAllHeaders(headers, allowedHeaders) {\n  const allHeaders = {};\n\n  allowedHeaders.forEach(header => {\n    if (headers.get(header)) {\n      allHeaders[header] = headers.get(header) ;\n    }\n  });\n\n  return allHeaders;\n}\n\nfunction getRequestHeaders(fetchArgs, allowedHeaders) {\n  if (fetchArgs.length === 1 && typeof fetchArgs[0] !== 'string') {\n    return getHeadersFromOptions(fetchArgs[0] , allowedHeaders);\n  }\n\n  if (fetchArgs.length === 2) {\n    return getHeadersFromOptions(fetchArgs[1] , allowedHeaders);\n  }\n\n  return {};\n}\n\nfunction getHeadersFromOptions(\n  input,\n  allowedHeaders,\n) {\n  if (!input) {\n    return {};\n  }\n\n  const headers = input.headers;\n\n  if (!headers) {\n    return {};\n  }\n\n  if (headers instanceof Headers) {\n    return getAllHeaders(headers, allowedHeaders);\n  }\n\n  // We do not support this, as it is not really documented (anymore?)\n  if (Array.isArray(headers)) {\n    return {};\n  }\n\n  return getAllowedHeaders(headers, allowedHeaders);\n}\n\nfunction _tryCloneResponse(response) {\n  try {\n    // We have to clone this, as the body can only be read once\n    return response.clone();\n  } catch (error) {\n    // this can throw if the response was already consumed before\n    DEBUG_BUILD && logger.warn('[Replay] Failed to clone response body', error);\n  }\n}\n\n/**\n * Get the response body of a fetch request, or timeout after 500ms.\n * Fetch can return a streaming body, that may not resolve (or not for a long time).\n * If that happens, we rather abort after a short time than keep waiting for this.\n */\nfunction _tryGetResponseText(response) {\n  return new Promise((resolve, reject) => {\n    const timeout = setTimeout(() => reject(new Error('Timeout while trying to read response body')), 500);\n\n    _getResponseText(response)\n      .then(\n        txt => resolve(txt),\n        reason => reject(reason),\n      )\n      .finally(() => clearTimeout(timeout));\n  });\n}\n\nasync function _getResponseText(response) {\n  // Force this to be a promise, just to be safe\n  // eslint-disable-next-line no-return-await\n  return await response.text();\n}\n\n/**\n * Capture an XHR breadcrumb to a replay.\n * This adds additional data (where approriate).\n */\nasync function captureXhrBreadcrumbToReplay(\n  breadcrumb,\n  hint,\n  options,\n) {\n  try {\n    const data = _prepareXhrData(breadcrumb, hint, options);\n\n    // Create a replay performance entry from this breadcrumb\n    const result = makeNetworkReplayBreadcrumb('resource.xhr', data);\n    addNetworkBreadcrumb(options.replay, result);\n  } catch (error) {\n    DEBUG_BUILD && logger.error('[Replay] Failed to capture xhr breadcrumb', error);\n  }\n}\n\n/**\n * Enrich a breadcrumb with additional data.\n * This has to be sync & mutate the given breadcrumb,\n * as the breadcrumb is afterwards consumed by other handlers.\n */\nfunction enrichXhrBreadcrumb(\n  breadcrumb,\n  hint,\n  options,\n) {\n  const { xhr, input } = hint;\n\n  if (!xhr) {\n    return;\n  }\n\n  const reqSize = getBodySize(input, options.textEncoder);\n  const resSize = xhr.getResponseHeader('content-length')\n    ? parseContentLengthHeader(xhr.getResponseHeader('content-length'))\n    : _getBodySize(xhr.response, xhr.responseType, options.textEncoder);\n\n  if (reqSize !== undefined) {\n    breadcrumb.data.request_body_size = reqSize;\n  }\n  if (resSize !== undefined) {\n    breadcrumb.data.response_body_size = resSize;\n  }\n}\n\nfunction _prepareXhrData(\n  breadcrumb,\n  hint,\n  options,\n) {\n  const now = Date.now();\n  const { startTimestamp = now, endTimestamp = now, input, xhr } = hint;\n\n  const {\n    url,\n    method,\n    status_code: statusCode = 0,\n    request_body_size: requestBodySize,\n    response_body_size: responseBodySize,\n  } = breadcrumb.data;\n\n  if (!url) {\n    return null;\n  }\n\n  if (!xhr || !urlMatches(url, options.networkDetailAllowUrls) || urlMatches(url, options.networkDetailDenyUrls)) {\n    const request = buildSkippedNetworkRequestOrResponse(requestBodySize);\n    const response = buildSkippedNetworkRequestOrResponse(responseBodySize);\n    return {\n      startTimestamp,\n      endTimestamp,\n      url,\n      method,\n      statusCode,\n      request,\n      response,\n    };\n  }\n\n  const xhrInfo = xhr[SENTRY_XHR_DATA_KEY];\n  const networkRequestHeaders = xhrInfo\n    ? getAllowedHeaders(xhrInfo.request_headers, options.networkRequestHeaders)\n    : {};\n  const networkResponseHeaders = getAllowedHeaders(getResponseHeaders(xhr), options.networkResponseHeaders);\n\n  const [requestBody, requestWarning] = options.networkCaptureBodies ? getBodyString(input) : [undefined];\n  const [responseBody, responseWarning] = options.networkCaptureBodies ? _getXhrResponseBody(xhr) : [undefined];\n\n  const request = buildNetworkRequestOrResponse(networkRequestHeaders, requestBodySize, requestBody);\n  const response = buildNetworkRequestOrResponse(networkResponseHeaders, responseBodySize, responseBody);\n\n  return {\n    startTimestamp,\n    endTimestamp,\n    url,\n    method,\n    statusCode,\n    request: requestWarning ? mergeWarning(request, requestWarning) : request,\n    response: responseWarning ? mergeWarning(response, responseWarning) : response,\n  };\n}\n\nfunction getResponseHeaders(xhr) {\n  const headers = xhr.getAllResponseHeaders();\n\n  if (!headers) {\n    return {};\n  }\n\n  return headers.split('\\r\\n').reduce((acc, line) => {\n    const [key, value] = line.split(': ');\n    acc[key.toLowerCase()] = value;\n    return acc;\n  }, {});\n}\n\nfunction _getXhrResponseBody(xhr) {\n  // We collect errors that happen, but only log them if we can't get any response body\n  const errors = [];\n\n  try {\n    return [xhr.responseText];\n  } catch (e) {\n    errors.push(e);\n  }\n\n  // Try to manually parse the response body, if responseText fails\n  try {\n    return _parseXhrResponse(xhr.response, xhr.responseType);\n  } catch (e) {\n    errors.push(e);\n  }\n\n  DEBUG_BUILD && logger.warn('[Replay] Failed to get xhr response body', ...errors);\n\n  return [undefined];\n}\n\n/**\n * Get the string representation of the XHR response.\n * Based on MDN, these are the possible types of the response:\n * string\n * ArrayBuffer\n * Blob\n * Document\n * POJO\n *\n * Exported only for tests.\n */\nfunction _parseXhrResponse(\n  body,\n  responseType,\n) {\n  try {\n    if (typeof body === 'string') {\n      return [body];\n    }\n\n    if (body instanceof Document) {\n      return [body.body.outerHTML];\n    }\n\n    if (responseType === 'json' && body && typeof body === 'object') {\n      return [JSON.stringify(body)];\n    }\n\n    if (!body) {\n      return [undefined];\n    }\n  } catch (e2) {\n    DEBUG_BUILD && logger.warn('[Replay] Failed to serialize body', body);\n    return [undefined, 'BODY_PARSE_ERROR'];\n  }\n\n  DEBUG_BUILD && logger.info('[Replay] Skipping network body because of body type', body);\n\n  return [undefined, 'UNPARSEABLE_BODY_TYPE'];\n}\n\nfunction _getBodySize(\n  body,\n  responseType,\n  textEncoder,\n) {\n  try {\n    const bodyStr = responseType === 'json' && body && typeof body === 'object' ? JSON.stringify(body) : body;\n    return getBodySize(bodyStr, textEncoder);\n  } catch (e3) {\n    return undefined;\n  }\n}\n\n/**\n * This method does two things:\n * - It enriches the regular XHR/fetch breadcrumbs with request/response size data\n * - It captures the XHR/fetch breadcrumbs to the replay\n *   (enriching it with further data that is _not_ added to the regular breadcrumbs)\n */\nfunction handleNetworkBreadcrumbs(replay) {\n  const client = getClient();\n\n  try {\n    const textEncoder = new TextEncoder();\n\n    const {\n      networkDetailAllowUrls,\n      networkDetailDenyUrls,\n      networkCaptureBodies,\n      networkRequestHeaders,\n      networkResponseHeaders,\n    } = replay.getOptions();\n\n    const options = {\n      replay,\n      textEncoder,\n      networkDetailAllowUrls,\n      networkDetailDenyUrls,\n      networkCaptureBodies,\n      networkRequestHeaders,\n      networkResponseHeaders,\n    };\n\n    if (client && client.on) {\n      client.on('beforeAddBreadcrumb', (breadcrumb, hint) => beforeAddNetworkBreadcrumb(options, breadcrumb, hint));\n    } else {\n      // Fallback behavior\n      addFetchInstrumentationHandler(handleFetchSpanListener(replay));\n      addXhrInstrumentationHandler(handleXhrSpanListener(replay));\n    }\n  } catch (e2) {\n    // Do nothing\n  }\n}\n\n/** just exported for tests */\nfunction beforeAddNetworkBreadcrumb(\n  options,\n  breadcrumb,\n  hint,\n) {\n  if (!breadcrumb.data) {\n    return;\n  }\n\n  try {\n    if (_isXhrBreadcrumb(breadcrumb) && _isXhrHint(hint)) {\n      // This has to be sync, as we need to ensure the breadcrumb is enriched in the same tick\n      // Because the hook runs synchronously, and the breadcrumb is afterwards passed on\n      // So any async mutations to it will not be reflected in the final breadcrumb\n      enrichXhrBreadcrumb(breadcrumb, hint, options);\n\n      // This call should not reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      captureXhrBreadcrumbToReplay(breadcrumb, hint, options);\n    }\n\n    if (_isFetchBreadcrumb(breadcrumb) && _isFetchHint(hint)) {\n      // This has to be sync, as we need to ensure the breadcrumb is enriched in the same tick\n      // Because the hook runs synchronously, and the breadcrumb is afterwards passed on\n      // So any async mutations to it will not be reflected in the final breadcrumb\n      enrichFetchBreadcrumb(breadcrumb, hint, options);\n\n      // This call should not reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      captureFetchBreadcrumbToReplay(breadcrumb, hint, options);\n    }\n  } catch (e) {\n    DEBUG_BUILD && logger.warn('Error when enriching network breadcrumb');\n  }\n}\n\nfunction _isXhrBreadcrumb(breadcrumb) {\n  return breadcrumb.category === 'xhr';\n}\n\nfunction _isFetchBreadcrumb(breadcrumb) {\n  return breadcrumb.category === 'fetch';\n}\n\nfunction _isXhrHint(hint) {\n  return hint && hint.xhr;\n}\n\nfunction _isFetchHint(hint) {\n  return hint && hint.response;\n}\n\nlet _LAST_BREADCRUMB = null;\n\nfunction isBreadcrumbWithCategory(breadcrumb) {\n  return !!breadcrumb.category;\n}\n\nconst handleScopeListener =\n  (replay) =>\n  (scope) => {\n    if (!replay.isEnabled()) {\n      return;\n    }\n\n    const result = handleScope(scope);\n\n    if (!result) {\n      return;\n    }\n\n    addBreadcrumbEvent(replay, result);\n  };\n\n/**\n * An event handler to handle scope changes.\n */\nfunction handleScope(scope) {\n  // TODO (v8): Remove this guard. This was put in place because we introduced\n  // Scope.getLastBreadcrumb mid-v7 which caused incompatibilities with older SDKs.\n  // For now, we'll just return null if the method doesn't exist but we should eventually\n  // get rid of this guard.\n  const newBreadcrumb = scope.getLastBreadcrumb && scope.getLastBreadcrumb();\n\n  // Listener can be called when breadcrumbs have not changed, so we store the\n  // reference to the last crumb and only return a crumb if it has changed\n  if (_LAST_BREADCRUMB === newBreadcrumb || !newBreadcrumb) {\n    return null;\n  }\n\n  _LAST_BREADCRUMB = newBreadcrumb;\n\n  if (\n    !isBreadcrumbWithCategory(newBreadcrumb) ||\n    ['fetch', 'xhr', 'sentry.event', 'sentry.transaction'].includes(newBreadcrumb.category) ||\n    newBreadcrumb.category.startsWith('ui.')\n  ) {\n    return null;\n  }\n\n  if (newBreadcrumb.category === 'console') {\n    return normalizeConsoleBreadcrumb(newBreadcrumb);\n  }\n\n  return createBreadcrumb(newBreadcrumb);\n}\n\n/** exported for tests only */\nfunction normalizeConsoleBreadcrumb(\n  breadcrumb,\n) {\n  const args = breadcrumb.data && breadcrumb.data.arguments;\n\n  if (!Array.isArray(args) || args.length === 0) {\n    return createBreadcrumb(breadcrumb);\n  }\n\n  let isTruncated = false;\n\n  // Avoid giant args captures\n  const normalizedArgs = args.map(arg => {\n    if (!arg) {\n      return arg;\n    }\n    if (typeof arg === 'string') {\n      if (arg.length > CONSOLE_ARG_MAX_SIZE) {\n        isTruncated = true;\n        return `${arg.slice(0, CONSOLE_ARG_MAX_SIZE)}…`;\n      }\n\n      return arg;\n    }\n    if (typeof arg === 'object') {\n      try {\n        const normalizedArg = normalize(arg, 7);\n        const stringified = JSON.stringify(normalizedArg);\n        if (stringified.length > CONSOLE_ARG_MAX_SIZE) {\n          isTruncated = true;\n          // We use the pretty printed JSON string here as a base\n          return `${JSON.stringify(normalizedArg, null, 2).slice(0, CONSOLE_ARG_MAX_SIZE)}…`;\n        }\n        return normalizedArg;\n      } catch (e) {\n        // fall back to default\n      }\n    }\n\n    return arg;\n  });\n\n  return createBreadcrumb({\n    ...breadcrumb,\n    data: {\n      ...breadcrumb.data,\n      arguments: normalizedArgs,\n      ...(isTruncated ? { _meta: { warnings: ['CONSOLE_ARG_TRUNCATED'] } } : {}),\n    },\n  });\n}\n\n/**\n * Add global listeners that cannot be removed.\n */\nfunction addGlobalListeners(replay) {\n  // Listeners from core SDK //\n  const scope = getCurrentScope();\n  const client = getClient();\n\n  scope.addScopeListener(handleScopeListener(replay));\n  addClickKeypressInstrumentationHandler(handleDomListener(replay));\n  addHistoryInstrumentationHandler(handleHistorySpanListener(replay));\n  handleNetworkBreadcrumbs(replay);\n\n  // Tag all (non replay) events that get sent to Sentry with the current\n  // replay ID so that we can reference them later in the UI\n  const eventProcessor = handleGlobalEventListener(replay, !hasHooks(client));\n  if (client && client.addEventProcessor) {\n    client.addEventProcessor(eventProcessor);\n  } else {\n    addEventProcessor(eventProcessor);\n  }\n\n  // If a custom client has no hooks yet, we continue to use the \"old\" implementation\n  if (hasHooks(client)) {\n    client.on('beforeSendEvent', handleBeforeSendEvent(replay));\n    client.on('afterSendEvent', handleAfterSendEvent(replay));\n    client.on('createDsc', (dsc) => {\n      const replayId = replay.getSessionId();\n      // We do not want to set the DSC when in buffer mode, as that means the replay has not been sent (yet)\n      if (replayId && replay.isEnabled() && replay.recordingMode === 'session') {\n        // Ensure to check that the session is still active - it could have expired in the meanwhile\n        const isSessionActive = replay.checkAndHandleExpiredSession();\n        if (isSessionActive) {\n          dsc.replay_id = replayId;\n        }\n      }\n    });\n\n    client.on('startTransaction', transaction => {\n      replay.lastTransaction = transaction;\n    });\n\n    // We may be missing the initial startTransaction due to timing issues,\n    // so we capture it on finish again.\n    client.on('finishTransaction', transaction => {\n      replay.lastTransaction = transaction;\n    });\n\n    // We want to flush replay\n    client.on('beforeSendFeedback', (feedbackEvent, options) => {\n      const replayId = replay.getSessionId();\n      if (options && options.includeReplay && replay.isEnabled() && replayId) {\n        // This should never reject\n        if (feedbackEvent.contexts && feedbackEvent.contexts.feedback) {\n          feedbackEvent.contexts.feedback.replay_id = replayId;\n        }\n      }\n    });\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction hasHooks(client) {\n  return !!(client && client.on);\n}\n\n/**\n * Create a \"span\" for the total amount of memory being used by JS objects\n * (including v8 internal objects).\n */\nasync function addMemoryEntry(replay) {\n  // window.performance.memory is a non-standard API and doesn't work on all browsers, so we try-catch this\n  try {\n    return Promise.all(\n      createPerformanceSpans(replay, [\n        // @ts-expect-error memory doesn't exist on type Performance as the API is non-standard (we check that it exists above)\n        createMemoryEntry(WINDOW.performance.memory),\n      ]),\n    );\n  } catch (error) {\n    // Do nothing\n    return [];\n  }\n}\n\nfunction createMemoryEntry(memoryEntry) {\n  const { jsHeapSizeLimit, totalJSHeapSize, usedJSHeapSize } = memoryEntry;\n  // we don't want to use `getAbsoluteTime` because it adds the event time to the\n  // time origin, so we get the current timestamp instead\n  const time = Date.now() / 1000;\n  return {\n    type: 'memory',\n    name: 'memory',\n    start: time,\n    end: time,\n    data: {\n      memory: {\n        jsHeapSizeLimit,\n        totalJSHeapSize,\n        usedJSHeapSize,\n      },\n    },\n  };\n}\n\n/**\n * Heavily simplified debounce function based on lodash.debounce.\n *\n * This function takes a callback function (@param fun) and delays its invocation\n * by @param wait milliseconds. Optionally, a maxWait can be specified in @param options,\n * which ensures that the callback is invoked at least once after the specified max. wait time.\n *\n * @param func the function whose invocation is to be debounced\n * @param wait the minimum time until the function is invoked after it was called once\n * @param options the options object, which can contain the `maxWait` property\n *\n * @returns the debounced version of the function, which needs to be called at least once to start the\n *          debouncing process. Subsequent calls will reset the debouncing timer and, in case @paramfunc\n *          was already invoked in the meantime, return @param func's return value.\n *          The debounced function has two additional properties:\n *          - `flush`: Invokes the debounced function immediately and returns its return value\n *          - `cancel`: Cancels the debouncing process and resets the debouncing timer\n */\nfunction debounce(func, wait, options) {\n  let callbackReturnValue;\n\n  let timerId;\n  let maxTimerId;\n\n  const maxWait = options && options.maxWait ? Math.max(options.maxWait, wait) : 0;\n\n  function invokeFunc() {\n    cancelTimers();\n    callbackReturnValue = func();\n    return callbackReturnValue;\n  }\n\n  function cancelTimers() {\n    timerId !== undefined && clearTimeout(timerId);\n    maxTimerId !== undefined && clearTimeout(maxTimerId);\n    timerId = maxTimerId = undefined;\n  }\n\n  function flush() {\n    if (timerId !== undefined || maxTimerId !== undefined) {\n      return invokeFunc();\n    }\n    return callbackReturnValue;\n  }\n\n  function debounced() {\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n    timerId = setTimeout(invokeFunc, wait);\n\n    if (maxWait && maxTimerId === undefined) {\n      maxTimerId = setTimeout(invokeFunc, maxWait);\n    }\n\n    return callbackReturnValue;\n  }\n\n  debounced.cancel = cancelTimers;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Handler for recording events.\n *\n * Adds to event buffer, and has varying flushing behaviors if the event was a checkout.\n */\nfunction getHandleRecordingEmit(replay) {\n  let hadFirstEvent = false;\n\n  return (event, _isCheckout) => {\n    // If this is false, it means session is expired, create and a new session and wait for checkout\n    if (!replay.checkAndHandleExpiredSession()) {\n      DEBUG_BUILD && logger.warn('[Replay] Received replay event after session expired.');\n\n      return;\n    }\n\n    // `_isCheckout` is only set when the checkout is due to `checkoutEveryNms`\n    // We also want to treat the first event as a checkout, so we handle this specifically here\n    const isCheckout = _isCheckout || !hadFirstEvent;\n    hadFirstEvent = true;\n\n    if (replay.clickDetector) {\n      updateClickDetectorForRecordingEvent(replay.clickDetector, event);\n    }\n\n    // The handler returns `true` if we do not want to trigger debounced flush, `false` if we want to debounce flush.\n    replay.addUpdate(() => {\n      // The session is always started immediately on pageload/init, but for\n      // error-only replays, it should reflect the most recent checkout\n      // when an error occurs. Clear any state that happens before this current\n      // checkout. This needs to happen before `addEvent()` which updates state\n      // dependent on this reset.\n      if (replay.recordingMode === 'buffer' && isCheckout) {\n        replay.setInitialState();\n      }\n\n      // If the event is not added (e.g. due to being paused, disabled, or out of the max replay duration),\n      // Skip all further steps\n      if (!addEventSync(replay, event, isCheckout)) {\n        // Return true to skip scheduling a debounced flush\n        return true;\n      }\n\n      // Different behavior for full snapshots (type=2), ignore other event types\n      // See https://github.com/rrweb-io/rrweb/blob/d8f9290ca496712aa1e7d472549480c4e7876594/packages/rrweb/src/types.ts#L16\n      if (!isCheckout) {\n        return false;\n      }\n\n      // Additionally, create a meta event that will capture certain SDK settings.\n      // In order to handle buffer mode, this needs to either be done when we\n      // receive checkout events or at flush time.\n      //\n      // `isCheckout` is always true, but want to be explicit that it should\n      // only be added for checkouts\n      addSettingsEvent(replay, isCheckout);\n\n      // If there is a previousSessionId after a full snapshot occurs, then\n      // the replay session was started due to session expiration. The new session\n      // is started before triggering a new checkout and contains the id\n      // of the previous session. Do not immediately flush in this case\n      // to avoid capturing only the checkout and instead the replay will\n      // be captured if they perform any follow-up actions.\n      if (replay.session && replay.session.previousSessionId) {\n        return true;\n      }\n\n      // When in buffer mode, make sure we adjust the session started date to the current earliest event of the buffer\n      // this should usually be the timestamp of the checkout event, but to be safe...\n      if (replay.recordingMode === 'buffer' && replay.session && replay.eventBuffer) {\n        const earliestEvent = replay.eventBuffer.getEarliestTimestamp();\n        if (earliestEvent) {\n          logInfo(\n            `[Replay] Updating session start time to earliest event in buffer to ${new Date(earliestEvent)}`,\n            replay.getOptions()._experiments.traceInternals,\n          );\n\n          replay.session.started = earliestEvent;\n\n          if (replay.getOptions().stickySession) {\n            saveSession(replay.session);\n          }\n        }\n      }\n\n      if (replay.recordingMode === 'session') {\n        // If the full snapshot is due to an initial load, we will not have\n        // a previous session ID. In this case, we want to buffer events\n        // for a set amount of time before flushing. This can help avoid\n        // capturing replays of users that immediately close the window.\n\n        // This should never reject\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        void replay.flush();\n      }\n\n      return true;\n    });\n  };\n}\n\n/**\n * Exported for tests\n */\nfunction createOptionsEvent(replay) {\n  const options = replay.getOptions();\n  return {\n    type: EventType.Custom,\n    timestamp: Date.now(),\n    data: {\n      tag: 'options',\n      payload: {\n        shouldRecordCanvas: replay.isRecordingCanvas(),\n        sessionSampleRate: options.sessionSampleRate,\n        errorSampleRate: options.errorSampleRate,\n        useCompressionOption: options.useCompression,\n        blockAllMedia: options.blockAllMedia,\n        maskAllText: options.maskAllText,\n        maskAllInputs: options.maskAllInputs,\n        useCompression: replay.eventBuffer ? replay.eventBuffer.type === 'worker' : false,\n        networkDetailHasUrls: options.networkDetailAllowUrls.length > 0,\n        networkCaptureBodies: options.networkCaptureBodies,\n        networkRequestHasHeaders: options.networkRequestHeaders.length > 0,\n        networkResponseHasHeaders: options.networkResponseHeaders.length > 0,\n      },\n    },\n  };\n}\n\n/**\n * Add a \"meta\" event that contains a simplified view on current configuration\n * options. This should only be included on the first segment of a recording.\n */\nfunction addSettingsEvent(replay, isCheckout) {\n  // Only need to add this event when sending the first segment\n  if (!isCheckout || !replay.session || replay.session.segmentId !== 0) {\n    return;\n  }\n\n  addEventSync(replay, createOptionsEvent(replay), false);\n}\n\n/**\n * Create a replay envelope ready to be sent.\n * This includes both the replay event, as well as the recording data.\n */\nfunction createReplayEnvelope(\n  replayEvent,\n  recordingData,\n  dsn,\n  tunnel,\n) {\n  return createEnvelope(\n    createEventEnvelopeHeaders(replayEvent, getSdkMetadataForEnvelopeHeader(replayEvent), tunnel, dsn),\n    [\n      [{ type: 'replay_event' }, replayEvent],\n      [\n        {\n          type: 'replay_recording',\n          // If string then we need to encode to UTF8, otherwise will have\n          // wrong size. TextEncoder has similar browser support to\n          // MutationObserver, although it does not accept IE11.\n          length:\n            typeof recordingData === 'string' ? new TextEncoder().encode(recordingData).length : recordingData.length,\n        },\n        recordingData,\n      ],\n    ],\n  );\n}\n\n/**\n * Prepare the recording data ready to be sent.\n */\nfunction prepareRecordingData({\n  recordingData,\n  headers,\n}\n\n) {\n  let payloadWithSequence;\n\n  // XXX: newline is needed to separate sequence id from events\n  const replayHeaders = `${JSON.stringify(headers)}\n`;\n\n  if (typeof recordingData === 'string') {\n    payloadWithSequence = `${replayHeaders}${recordingData}`;\n  } else {\n    const enc = new TextEncoder();\n    // XXX: newline is needed to separate sequence id from events\n    const sequence = enc.encode(replayHeaders);\n    // Merge the two Uint8Arrays\n    payloadWithSequence = new Uint8Array(sequence.length + recordingData.length);\n    payloadWithSequence.set(sequence);\n    payloadWithSequence.set(recordingData, sequence.length);\n  }\n\n  return payloadWithSequence;\n}\n\n/**\n * Prepare a replay event & enrich it with the SDK metadata.\n */\nasync function prepareReplayEvent({\n  client,\n  scope,\n  replayId: event_id,\n  event,\n}\n\n) {\n  const integrations =\n    typeof client._integrations === 'object' && client._integrations !== null && !Array.isArray(client._integrations)\n      ? Object.keys(client._integrations)\n      : undefined;\n\n  const eventHint = { event_id, integrations };\n\n  if (client.emit) {\n    client.emit('preprocessEvent', event, eventHint);\n  }\n\n  const preparedEvent = (await prepareEvent(\n    client.getOptions(),\n    event,\n    eventHint,\n    scope,\n    client,\n    getIsolationScope(),\n  )) ;\n\n  // If e.g. a global event processor returned null\n  if (!preparedEvent) {\n    return null;\n  }\n\n  // This normally happens in browser client \"_prepareEvent\"\n  // but since we do not use this private method from the client, but rather the plain import\n  // we need to do this manually.\n  preparedEvent.platform = preparedEvent.platform || 'javascript';\n\n  // extract the SDK name because `client._prepareEvent` doesn't add it to the event\n  const metadata = client.getSdkMetadata && client.getSdkMetadata();\n  const { name, version } = (metadata && metadata.sdk) || {};\n\n  preparedEvent.sdk = {\n    ...preparedEvent.sdk,\n    name: name || 'sentry.javascript.unknown',\n    version: version || '0.0.0',\n  };\n\n  return preparedEvent;\n}\n\n/**\n * Send replay attachment using `fetch()`\n */\nasync function sendReplayRequest({\n  recordingData,\n  replayId,\n  segmentId: segment_id,\n  eventContext,\n  timestamp,\n  session,\n}) {\n  const preparedRecordingData = prepareRecordingData({\n    recordingData,\n    headers: {\n      segment_id,\n    },\n  });\n\n  const { urls, errorIds, traceIds, initialTimestamp } = eventContext;\n\n  const client = getClient();\n  const scope = getCurrentScope();\n  const transport = client && client.getTransport();\n  const dsn = client && client.getDsn();\n\n  if (!client || !transport || !dsn || !session.sampled) {\n    return;\n  }\n\n  const baseEvent = {\n    type: REPLAY_EVENT_NAME,\n    replay_start_timestamp: initialTimestamp / 1000,\n    timestamp: timestamp / 1000,\n    error_ids: errorIds,\n    trace_ids: traceIds,\n    urls,\n    replay_id: replayId,\n    segment_id,\n    replay_type: session.sampled,\n  };\n\n  const replayEvent = await prepareReplayEvent({ scope, client, replayId, event: baseEvent });\n\n  if (!replayEvent) {\n    // Taken from baseclient's `_processEvent` method, where this is handled for errors/transactions\n    client.recordDroppedEvent('event_processor', 'replay', baseEvent);\n    logInfo('An event processor returned `null`, will not send event.');\n    return;\n  }\n\n  /*\n  For reference, the fully built event looks something like this:\n  {\n      \"type\": \"replay_event\",\n      \"timestamp\": 1670837008.634,\n      \"error_ids\": [\n          \"errorId\"\n      ],\n      \"trace_ids\": [\n          \"traceId\"\n      ],\n      \"urls\": [\n          \"https://example.com\"\n      ],\n      \"replay_id\": \"eventId\",\n      \"segment_id\": 3,\n      \"replay_type\": \"error\",\n      \"platform\": \"javascript\",\n      \"event_id\": \"eventId\",\n      \"environment\": \"production\",\n      \"sdk\": {\n          \"integrations\": [\n              \"BrowserTracing\",\n              \"Replay\"\n          ],\n          \"name\": \"sentry.javascript.browser\",\n          \"version\": \"7.25.0\"\n      },\n      \"sdkProcessingMetadata\": {},\n      \"contexts\": {\n      },\n  }\n  */\n\n  // Prevent this data (which, if it exists, was used in earlier steps in the processing pipeline) from being sent to\n  // sentry. (Note: Our use of this property comes and goes with whatever we might be debugging, whatever hacks we may\n  // have temporarily added, etc. Even if we don't happen to be using it at some point in the future, let's not get rid\n  // of this `delete`, lest we miss putting it back in the next time the property is in use.)\n  delete replayEvent.sdkProcessingMetadata;\n\n  const envelope = createReplayEnvelope(replayEvent, preparedRecordingData, dsn, client.getOptions().tunnel);\n\n  let response;\n\n  try {\n    response = await transport.send(envelope);\n  } catch (err) {\n    const error = new Error(UNABLE_TO_SEND_REPLAY);\n\n    try {\n      // In case browsers don't allow this property to be writable\n      // @ts-expect-error This needs lib es2022 and newer\n      error.cause = err;\n    } catch (e) {\n      // nothing to do\n    }\n    throw error;\n  }\n\n  // TODO (v8): we can remove this guard once transport.send's type signature doesn't include void anymore\n  if (!response) {\n    return response;\n  }\n\n  // If the status code is invalid, we want to immediately stop & not retry\n  if (typeof response.statusCode === 'number' && (response.statusCode < 200 || response.statusCode >= 300)) {\n    throw new TransportStatusCodeError(response.statusCode);\n  }\n\n  const rateLimits = updateRateLimits({}, response);\n  if (isRateLimited(rateLimits, 'replay')) {\n    throw new RateLimitError(rateLimits);\n  }\n\n  return response;\n}\n\n/**\n * This error indicates that the transport returned an invalid status code.\n */\nclass TransportStatusCodeError extends Error {\n   constructor(statusCode) {\n    super(`Transport returned status code ${statusCode}`);\n  }\n}\n\n/**\n * This error indicates that we hit a rate limit API error.\n */\nclass RateLimitError extends Error {\n\n   constructor(rateLimits) {\n    super('Rate limit hit');\n    this.rateLimits = rateLimits;\n  }\n}\n\n/**\n * Finalize and send the current replay event to Sentry\n */\nasync function sendReplay(\n  replayData,\n  retryConfig = {\n    count: 0,\n    interval: RETRY_BASE_INTERVAL,\n  },\n) {\n  const { recordingData, options } = replayData;\n\n  // short circuit if there's no events to upload (this shouldn't happen as _runFlush makes this check)\n  if (!recordingData.length) {\n    return;\n  }\n\n  try {\n    await sendReplayRequest(replayData);\n    return true;\n  } catch (err) {\n    if (err instanceof TransportStatusCodeError || err instanceof RateLimitError) {\n      throw err;\n    }\n\n    // Capture error for every failed replay\n    setContext('Replays', {\n      _retryCount: retryConfig.count,\n    });\n\n    if (DEBUG_BUILD && options._experiments && options._experiments.captureExceptions) {\n      captureException(err);\n    }\n\n    // If an error happened here, it's likely that uploading the attachment\n    // failed, we'll can retry with the same events payload\n    if (retryConfig.count >= RETRY_MAX_COUNT) {\n      const error = new Error(`${UNABLE_TO_SEND_REPLAY} - max retries exceeded`);\n\n      try {\n        // In case browsers don't allow this property to be writable\n        // @ts-expect-error This needs lib es2022 and newer\n        error.cause = err;\n      } catch (e) {\n        // nothing to do\n      }\n\n      throw error;\n    }\n\n    // will retry in intervals of 5, 10, 30\n    retryConfig.interval *= ++retryConfig.count;\n\n    return new Promise((resolve, reject) => {\n      setTimeout(async () => {\n        try {\n          await sendReplay(replayData, retryConfig);\n          resolve(true);\n        } catch (err) {\n          reject(err);\n        }\n      }, retryConfig.interval);\n    });\n  }\n}\n\nconst THROTTLED = '__THROTTLED';\nconst SKIPPED = '__SKIPPED';\n\n/**\n * Create a throttled function off a given function.\n * When calling the throttled function, it will call the original function only\n * if it hasn't been called more than `maxCount` times in the last `durationSeconds`.\n *\n * Returns `THROTTLED` if throttled for the first time, after that `SKIPPED`,\n * or else the return value of the original function.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction throttle(\n  fn,\n  maxCount,\n  durationSeconds,\n) {\n  const counter = new Map();\n\n  const _cleanup = (now) => {\n    const threshold = now - durationSeconds;\n    counter.forEach((_value, key) => {\n      if (key < threshold) {\n        counter.delete(key);\n      }\n    });\n  };\n\n  const _getTotalCount = () => {\n    return [...counter.values()].reduce((a, b) => a + b, 0);\n  };\n\n  let isThrottled = false;\n\n  return (...rest) => {\n    // Date in second-precision, which we use as basis for the throttling\n    const now = Math.floor(Date.now() / 1000);\n\n    // First, make sure to delete any old entries\n    _cleanup(now);\n\n    // If already over limit, do nothing\n    if (_getTotalCount() >= maxCount) {\n      const wasThrottled = isThrottled;\n      isThrottled = true;\n      return wasThrottled ? SKIPPED : THROTTLED;\n    }\n\n    isThrottled = false;\n    const count = counter.get(now) || 0;\n    counter.set(now, count + 1);\n\n    return fn(...rest);\n  };\n}\n\n/* eslint-disable max-lines */ // TODO: We might want to split this file up\n\n/**\n * The main replay container class, which holds all the state and methods for recording and sending replays.\n */\nclass ReplayContainer  {\n\n  /**\n   * Recording can happen in one of three modes:\n   *   - session: Record the whole session, sending it continuously\n   *   - buffer: Always keep the last 60s of recording, requires:\n   *     - having replaysOnErrorSampleRate > 0 to capture replay when an error occurs\n   *     - or calling `flush()` to send the replay\n   */\n\n  /**\n   * The current or last active transcation.\n   * This is only available when performance is enabled.\n   */\n\n  /**\n   * These are here so we can overwrite them in tests etc.\n   * @hidden\n   */\n\n  /**\n   * Options to pass to `rrweb.record()`\n   */\n\n  /**\n   * Timestamp of the last user activity. This lives across sessions.\n   */\n\n  /**\n   * Is the integration currently active?\n   */\n\n  /**\n   * Paused is a state where:\n   * - DOM Recording is not listening at all\n   * - Nothing will be added to event buffer (e.g. core SDK events)\n   */\n\n  /**\n   * Have we attached listeners to the core SDK?\n   * Note we have to track this as there is no way to remove instrumentation handlers.\n   */\n\n  /**\n   * Function to stop recording\n   */\n\n  /**\n   * Internal use for canvas recording options\n   */\n\n   constructor({\n    options,\n    recordingOptions,\n  }\n\n) {ReplayContainer.prototype.__init.call(this);ReplayContainer.prototype.__init2.call(this);ReplayContainer.prototype.__init3.call(this);ReplayContainer.prototype.__init4.call(this);ReplayContainer.prototype.__init5.call(this);ReplayContainer.prototype.__init6.call(this);\n    this.eventBuffer = null;\n    this.performanceEntries = [];\n    this.replayPerformanceEntries = [];\n    this.recordingMode = 'session';\n    this.timeouts = {\n      sessionIdlePause: SESSION_IDLE_PAUSE_DURATION,\n      sessionIdleExpire: SESSION_IDLE_EXPIRE_DURATION,\n    } ;\n    this._lastActivity = Date.now();\n    this._isEnabled = false;\n    this._isPaused = false;\n    this._hasInitializedCoreListeners = false;\n    this._context = {\n      errorIds: new Set(),\n      traceIds: new Set(),\n      urls: [],\n      initialTimestamp: Date.now(),\n      initialUrl: '',\n    };\n\n    this._recordingOptions = recordingOptions;\n    this._options = options;\n\n    this._debouncedFlush = debounce(() => this._flush(), this._options.flushMinDelay, {\n      maxWait: this._options.flushMaxDelay,\n    });\n\n    this._throttledAddEvent = throttle(\n      (event, isCheckout) => addEvent(this, event, isCheckout),\n      // Max 300 events...\n      300,\n      // ... per 5s\n      5,\n    );\n\n    const { slowClickTimeout, slowClickIgnoreSelectors } = this.getOptions();\n\n    const slowClickConfig = slowClickTimeout\n      ? {\n          threshold: Math.min(SLOW_CLICK_THRESHOLD, slowClickTimeout),\n          timeout: slowClickTimeout,\n          scrollTimeout: SLOW_CLICK_SCROLL_TIMEOUT,\n          ignoreSelector: slowClickIgnoreSelectors ? slowClickIgnoreSelectors.join(',') : '',\n        }\n      : undefined;\n\n    if (slowClickConfig) {\n      this.clickDetector = new ClickDetector(this, slowClickConfig);\n    }\n  }\n\n  /** Get the event context. */\n   getContext() {\n    return this._context;\n  }\n\n  /** If recording is currently enabled. */\n   isEnabled() {\n    return this._isEnabled;\n  }\n\n  /** If recording is currently paused. */\n   isPaused() {\n    return this._isPaused;\n  }\n\n  /**\n   * Determine if canvas recording is enabled\n   */\n   isRecordingCanvas() {\n    return Boolean(this._canvas);\n  }\n\n  /** Get the replay integration options. */\n   getOptions() {\n    return this._options;\n  }\n\n  /**\n   * Initializes the plugin based on sampling configuration. Should not be\n   * called outside of constructor.\n   */\n   initializeSampling(previousSessionId) {\n    const { errorSampleRate, sessionSampleRate } = this._options;\n\n    // If neither sample rate is > 0, then do nothing - user will need to call one of\n    // `start()` or `startBuffering` themselves.\n    if (errorSampleRate <= 0 && sessionSampleRate <= 0) {\n      return;\n    }\n\n    // Otherwise if there is _any_ sample rate set, try to load an existing\n    // session, or create a new one.\n    this._initializeSessionForSampling(previousSessionId);\n\n    if (!this.session) {\n      // This should not happen, something wrong has occurred\n      this._handleException(new Error('Unable to initialize and create session'));\n      return;\n    }\n\n    if (this.session.sampled === false) {\n      // This should only occur if `errorSampleRate` is 0 and was unsampled for\n      // session-based replay. In this case there is nothing to do.\n      return;\n    }\n\n    // If segmentId > 0, it means we've previously already captured this session\n    // In this case, we still want to continue in `session` recording mode\n    this.recordingMode = this.session.sampled === 'buffer' && this.session.segmentId === 0 ? 'buffer' : 'session';\n\n    logInfoNextTick(\n      `[Replay] Starting replay in ${this.recordingMode} mode`,\n      this._options._experiments.traceInternals,\n    );\n\n    this._initializeRecording();\n  }\n\n  /**\n   * Start a replay regardless of sampling rate. Calling this will always\n   * create a new session. Will throw an error if replay is already in progress.\n   *\n   * Creates or loads a session, attaches listeners to varying events (DOM,\n   * _performanceObserver, Recording, Sentry SDK, etc)\n   */\n   start() {\n    if (this._isEnabled && this.recordingMode === 'session') {\n      throw new Error('Replay recording is already in progress');\n    }\n\n    if (this._isEnabled && this.recordingMode === 'buffer') {\n      throw new Error('Replay buffering is in progress, call `flush()` to save the replay');\n    }\n\n    logInfoNextTick('[Replay] Starting replay in session mode', this._options._experiments.traceInternals);\n\n    // Required as user activity is initially set in\n    // constructor, so if `start()` is called after\n    // session idle expiration, a replay will not be\n    // created due to an idle timeout.\n    this._updateUserActivity();\n\n    const session = loadOrCreateSession(\n      {\n        maxReplayDuration: this._options.maxReplayDuration,\n        sessionIdleExpire: this.timeouts.sessionIdleExpire,\n        traceInternals: this._options._experiments.traceInternals,\n      },\n      {\n        stickySession: this._options.stickySession,\n        // This is intentional: create a new session-based replay when calling `start()`\n        sessionSampleRate: 1,\n        allowBuffering: false,\n      },\n    );\n\n    this.session = session;\n\n    this._initializeRecording();\n  }\n\n  /**\n   * Start replay buffering. Buffers until `flush()` is called or, if\n   * `replaysOnErrorSampleRate` > 0, an error occurs.\n   */\n   startBuffering() {\n    if (this._isEnabled) {\n      throw new Error('Replay recording is already in progress');\n    }\n\n    logInfoNextTick('[Replay] Starting replay in buffer mode', this._options._experiments.traceInternals);\n\n    const session = loadOrCreateSession(\n      {\n        sessionIdleExpire: this.timeouts.sessionIdleExpire,\n        maxReplayDuration: this._options.maxReplayDuration,\n        traceInternals: this._options._experiments.traceInternals,\n      },\n      {\n        stickySession: this._options.stickySession,\n        sessionSampleRate: 0,\n        allowBuffering: true,\n      },\n    );\n\n    this.session = session;\n\n    this.recordingMode = 'buffer';\n    this._initializeRecording();\n  }\n\n  /**\n   * Start recording.\n   *\n   * Note that this will cause a new DOM checkout\n   */\n   startRecording() {\n    try {\n      const canvasOptions = this._canvas;\n\n      this._stopRecording = record({\n        ...this._recordingOptions,\n        // When running in error sampling mode, we need to overwrite `checkoutEveryNms`\n        // Without this, it would record forever, until an error happens, which we don't want\n        // instead, we'll always keep the last 60 seconds of replay before an error happened\n        ...(this.recordingMode === 'buffer' && { checkoutEveryNms: BUFFER_CHECKOUT_TIME }),\n        emit: getHandleRecordingEmit(this),\n        onMutation: this._onMutationHandler,\n        ...(canvasOptions\n          ? {\n              recordCanvas: canvasOptions.recordCanvas,\n              getCanvasManager: canvasOptions.getCanvasManager,\n              sampling: canvasOptions.sampling,\n              dataURLOptions: canvasOptions.dataURLOptions,\n            }\n          : {}),\n      });\n    } catch (err) {\n      this._handleException(err);\n    }\n  }\n\n  /**\n   * Stops the recording, if it was running.\n   *\n   * Returns true if it was previously stopped, or is now stopped,\n   * otherwise false.\n   */\n   stopRecording() {\n    try {\n      if (this._stopRecording) {\n        this._stopRecording();\n        this._stopRecording = undefined;\n      }\n\n      return true;\n    } catch (err) {\n      this._handleException(err);\n      return false;\n    }\n  }\n\n  /**\n   * Currently, this needs to be manually called (e.g. for tests). Sentry SDK\n   * does not support a teardown\n   */\n   async stop({ forceFlush = false, reason } = {}) {\n    if (!this._isEnabled) {\n      return;\n    }\n\n    // We can't move `_isEnabled` after awaiting a flush, otherwise we can\n    // enter into an infinite loop when `stop()` is called while flushing.\n    this._isEnabled = false;\n\n    try {\n      logInfo(\n        `[Replay] Stopping Replay${reason ? ` triggered by ${reason}` : ''}`,\n        this._options._experiments.traceInternals,\n      );\n\n      this._removeListeners();\n      this.stopRecording();\n\n      this._debouncedFlush.cancel();\n      // See comment above re: `_isEnabled`, we \"force\" a flush, ignoring the\n      // `_isEnabled` state of the plugin since it was disabled above.\n      if (forceFlush) {\n        await this._flush({ force: true });\n      }\n\n      // After flush, destroy event buffer\n      this.eventBuffer && this.eventBuffer.destroy();\n      this.eventBuffer = null;\n\n      // Clear session from session storage, note this means if a new session\n      // is started after, it will not have `previousSessionId`\n      clearSession(this);\n    } catch (err) {\n      this._handleException(err);\n    }\n  }\n\n  /**\n   * Pause some replay functionality. See comments for `_isPaused`.\n   * This differs from stop as this only stops DOM recording, it is\n   * not as thorough of a shutdown as `stop()`.\n   */\n   pause() {\n    if (this._isPaused) {\n      return;\n    }\n\n    this._isPaused = true;\n    this.stopRecording();\n\n    logInfo('[Replay] Pausing replay', this._options._experiments.traceInternals);\n  }\n\n  /**\n   * Resumes recording, see notes for `pause().\n   *\n   * Note that calling `startRecording()` here will cause a\n   * new DOM checkout.`\n   */\n   resume() {\n    if (!this._isPaused || !this._checkSession()) {\n      return;\n    }\n\n    this._isPaused = false;\n    this.startRecording();\n\n    logInfo('[Replay] Resuming replay', this._options._experiments.traceInternals);\n  }\n\n  /**\n   * If not in \"session\" recording mode, flush event buffer which will create a new replay.\n   * Unless `continueRecording` is false, the replay will continue to record and\n   * behave as a \"session\"-based replay.\n   *\n   * Otherwise, queue up a flush.\n   */\n   async sendBufferedReplayOrFlush({ continueRecording = true } = {}) {\n    if (this.recordingMode === 'session') {\n      return this.flushImmediate();\n    }\n\n    const activityTime = Date.now();\n\n    logInfo('[Replay] Converting buffer to session', this._options._experiments.traceInternals);\n\n    // Allow flush to complete before resuming as a session recording, otherwise\n    // the checkout from `startRecording` may be included in the payload.\n    // Prefer to keep the error replay as a separate (and smaller) segment\n    // than the session replay.\n    await this.flushImmediate();\n\n    const hasStoppedRecording = this.stopRecording();\n\n    if (!continueRecording || !hasStoppedRecording) {\n      return;\n    }\n\n    // To avoid race conditions where this is called multiple times, we check here again that we are still buffering\n    if ((this.recordingMode ) === 'session') {\n      return;\n    }\n\n    // Re-start recording in session-mode\n    this.recordingMode = 'session';\n\n    // Once this session ends, we do not want to refresh it\n    if (this.session) {\n      this._updateUserActivity(activityTime);\n      this._updateSessionActivity(activityTime);\n      this._maybeSaveSession();\n    }\n\n    this.startRecording();\n  }\n\n  /**\n   * We want to batch uploads of replay events. Save events only if\n   * `<flushMinDelay>` milliseconds have elapsed since the last event\n   * *OR* if `<flushMaxDelay>` milliseconds have elapsed.\n   *\n   * Accepts a callback to perform side-effects and returns true to stop batch\n   * processing and hand back control to caller.\n   */\n   addUpdate(cb) {\n    // We need to always run `cb` (e.g. in the case of `this.recordingMode == 'buffer'`)\n    const cbResult = cb();\n\n    // If this option is turned on then we will only want to call `flush`\n    // explicitly\n    if (this.recordingMode === 'buffer') {\n      return;\n    }\n\n    // If callback is true, we do not want to continue with flushing -- the\n    // caller will need to handle it.\n    if (cbResult === true) {\n      return;\n    }\n\n    // addUpdate is called quite frequently - use _debouncedFlush so that it\n    // respects the flush delays and does not flush immediately\n    this._debouncedFlush();\n  }\n\n  /**\n   * Updates the user activity timestamp and resumes recording. This should be\n   * called in an event handler for a user action that we consider as the user\n   * being \"active\" (e.g. a mouse click).\n   */\n   triggerUserActivity() {\n    this._updateUserActivity();\n\n    // This case means that recording was once stopped due to inactivity.\n    // Ensure that recording is resumed.\n    if (!this._stopRecording) {\n      // Create a new session, otherwise when the user action is flushed, it\n      // will get rejected due to an expired session.\n      if (!this._checkSession()) {\n        return;\n      }\n\n      // Note: This will cause a new DOM checkout\n      this.resume();\n      return;\n    }\n\n    // Otherwise... recording was never suspended, continue as normalish\n    this.checkAndHandleExpiredSession();\n\n    this._updateSessionActivity();\n  }\n\n  /**\n   * Updates the user activity timestamp *without* resuming\n   * recording. Some user events (e.g. keydown) can be create\n   * low-value replays that only contain the keypress as a\n   * breadcrumb. Instead this would require other events to\n   * create a new replay after a session has expired.\n   */\n   updateUserActivity() {\n    this._updateUserActivity();\n    this._updateSessionActivity();\n  }\n\n  /**\n   * Only flush if `this.recordingMode === 'session'`\n   */\n   conditionalFlush() {\n    if (this.recordingMode === 'buffer') {\n      return Promise.resolve();\n    }\n\n    return this.flushImmediate();\n  }\n\n  /**\n   * Flush using debounce flush\n   */\n   flush() {\n    return this._debouncedFlush() ;\n  }\n\n  /**\n   * Always flush via `_debouncedFlush` so that we do not have flushes triggered\n   * from calling both `flush` and `_debouncedFlush`. Otherwise, there could be\n   * cases of mulitple flushes happening closely together.\n   */\n   flushImmediate() {\n    this._debouncedFlush();\n    // `.flush` is provided by the debounced function, analogously to lodash.debounce\n    return this._debouncedFlush.flush() ;\n  }\n\n  /**\n   * Cancels queued up flushes.\n   */\n   cancelFlush() {\n    this._debouncedFlush.cancel();\n  }\n\n  /** Get the current sesion (=replay) ID */\n   getSessionId() {\n    return this.session && this.session.id;\n  }\n\n  /**\n   * Checks if recording should be stopped due to user inactivity. Otherwise\n   * check if session is expired and create a new session if so. Triggers a new\n   * full snapshot on new session.\n   *\n   * Returns true if session is not expired, false otherwise.\n   * @hidden\n   */\n   checkAndHandleExpiredSession() {\n    // Prevent starting a new session if the last user activity is older than\n    // SESSION_IDLE_PAUSE_DURATION. Otherwise non-user activity can trigger a new\n    // session+recording. This creates noisy replays that do not have much\n    // content in them.\n    if (\n      this._lastActivity &&\n      isExpired(this._lastActivity, this.timeouts.sessionIdlePause) &&\n      this.session &&\n      this.session.sampled === 'session'\n    ) {\n      // Pause recording only for session-based replays. Otherwise, resuming\n      // will create a new replay and will conflict with users who only choose\n      // to record error-based replays only. (e.g. the resumed replay will not\n      // contain a reference to an error)\n      this.pause();\n      return;\n    }\n\n    // --- There is recent user activity --- //\n    // This will create a new session if expired, based on expiry length\n    if (!this._checkSession()) {\n      // Check session handles the refreshing itself\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Capture some initial state that can change throughout the lifespan of the\n   * replay. This is required because otherwise they would be captured at the\n   * first flush.\n   */\n   setInitialState() {\n    const urlPath = `${WINDOW.location.pathname}${WINDOW.location.hash}${WINDOW.location.search}`;\n    const url = `${WINDOW.location.origin}${urlPath}`;\n\n    this.performanceEntries = [];\n    this.replayPerformanceEntries = [];\n\n    // Reset _context as well\n    this._clearContext();\n\n    this._context.initialUrl = url;\n    this._context.initialTimestamp = Date.now();\n    this._context.urls.push(url);\n  }\n\n  /**\n   * Add a breadcrumb event, that may be throttled.\n   * If it was throttled, we add a custom breadcrumb to indicate that.\n   */\n   throttledAddEvent(\n    event,\n    isCheckout,\n  ) {\n    const res = this._throttledAddEvent(event, isCheckout);\n\n    // If this is THROTTLED, it means we have throttled the event for the first time\n    // In this case, we want to add a breadcrumb indicating that something was skipped\n    if (res === THROTTLED) {\n      const breadcrumb = createBreadcrumb({\n        category: 'replay.throttled',\n      });\n\n      this.addUpdate(() => {\n        // Return `false` if the event _was_ added, as that means we schedule a flush\n        return !addEventSync(this, {\n          type: ReplayEventTypeCustom,\n          timestamp: breadcrumb.timestamp || 0,\n          data: {\n            tag: 'breadcrumb',\n            payload: breadcrumb,\n            metric: true,\n          },\n        });\n      });\n    }\n\n    return res;\n  }\n\n  /**\n   * This will get the parametrized route name of the current page.\n   * This is only available if performance is enabled, and if an instrumented router is used.\n   */\n   getCurrentRoute() {\n    // eslint-disable-next-line deprecation/deprecation\n    const lastTransaction = this.lastTransaction || getCurrentScope().getTransaction();\n\n    const attributes = (lastTransaction && spanToJSON(lastTransaction).data) || {};\n    const source = attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n    if (!lastTransaction || !source || !['route', 'custom'].includes(source)) {\n      return undefined;\n    }\n\n    return spanToJSON(lastTransaction).description;\n  }\n\n  /**\n   * Initialize and start all listeners to varying events (DOM,\n   * Performance Observer, Recording, Sentry SDK, etc)\n   */\n   _initializeRecording() {\n    this.setInitialState();\n\n    // this method is generally called on page load or manually - in both cases\n    // we should treat it as an activity\n    this._updateSessionActivity();\n\n    this.eventBuffer = createEventBuffer({\n      useCompression: this._options.useCompression,\n      workerUrl: this._options.workerUrl,\n    });\n\n    this._removeListeners();\n    this._addListeners();\n\n    // Need to set as enabled before we start recording, as `record()` can trigger a flush with a new checkout\n    this._isEnabled = true;\n    this._isPaused = false;\n\n    this.startRecording();\n  }\n\n  /** A wrapper to conditionally capture exceptions. */\n   _handleException(error) {\n    DEBUG_BUILD && logger.error('[Replay]', error);\n\n    if (DEBUG_BUILD && this._options._experiments && this._options._experiments.captureExceptions) {\n      captureException(error);\n    }\n  }\n\n  /**\n   * Loads (or refreshes) the current session.\n   */\n   _initializeSessionForSampling(previousSessionId) {\n    // Whenever there is _any_ error sample rate, we always allow buffering\n    // Because we decide on sampling when an error occurs, we need to buffer at all times if sampling for errors\n    const allowBuffering = this._options.errorSampleRate > 0;\n\n    const session = loadOrCreateSession(\n      {\n        sessionIdleExpire: this.timeouts.sessionIdleExpire,\n        maxReplayDuration: this._options.maxReplayDuration,\n        traceInternals: this._options._experiments.traceInternals,\n        previousSessionId,\n      },\n      {\n        stickySession: this._options.stickySession,\n        sessionSampleRate: this._options.sessionSampleRate,\n        allowBuffering,\n      },\n    );\n\n    this.session = session;\n  }\n\n  /**\n   * Checks and potentially refreshes the current session.\n   * Returns false if session is not recorded.\n   */\n   _checkSession() {\n    // If there is no session yet, we do not want to refresh anything\n    // This should generally not happen, but to be safe....\n    if (!this.session) {\n      return false;\n    }\n\n    const currentSession = this.session;\n\n    if (\n      shouldRefreshSession(currentSession, {\n        sessionIdleExpire: this.timeouts.sessionIdleExpire,\n        maxReplayDuration: this._options.maxReplayDuration,\n      })\n    ) {\n      // This should never reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this._refreshSession(currentSession);\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Refresh a session with a new one.\n   * This stops the current session (without forcing a flush, as that would never work since we are expired),\n   * and then does a new sampling based on the refreshed session.\n   */\n   async _refreshSession(session) {\n    if (!this._isEnabled) {\n      return;\n    }\n    await this.stop({ reason: 'refresh session' });\n    this.initializeSampling(session.id);\n  }\n\n  /**\n   * Adds listeners to record events for the replay\n   */\n   _addListeners() {\n    try {\n      WINDOW.document.addEventListener('visibilitychange', this._handleVisibilityChange);\n      WINDOW.addEventListener('blur', this._handleWindowBlur);\n      WINDOW.addEventListener('focus', this._handleWindowFocus);\n      WINDOW.addEventListener('keydown', this._handleKeyboardEvent);\n\n      if (this.clickDetector) {\n        this.clickDetector.addListeners();\n      }\n\n      // There is no way to remove these listeners, so ensure they are only added once\n      if (!this._hasInitializedCoreListeners) {\n        addGlobalListeners(this);\n\n        this._hasInitializedCoreListeners = true;\n      }\n    } catch (err) {\n      this._handleException(err);\n    }\n\n    this._performanceCleanupCallback = setupPerformanceObserver(this);\n  }\n\n  /**\n   * Cleans up listeners that were created in `_addListeners`\n   */\n   _removeListeners() {\n    try {\n      WINDOW.document.removeEventListener('visibilitychange', this._handleVisibilityChange);\n\n      WINDOW.removeEventListener('blur', this._handleWindowBlur);\n      WINDOW.removeEventListener('focus', this._handleWindowFocus);\n      WINDOW.removeEventListener('keydown', this._handleKeyboardEvent);\n\n      if (this.clickDetector) {\n        this.clickDetector.removeListeners();\n      }\n\n      if (this._performanceCleanupCallback) {\n        this._performanceCleanupCallback();\n      }\n    } catch (err) {\n      this._handleException(err);\n    }\n  }\n\n  /**\n   * Handle when visibility of the page content changes. Opening a new tab will\n   * cause the state to change to hidden because of content of current page will\n   * be hidden. Likewise, moving a different window to cover the contents of the\n   * page will also trigger a change to a hidden state.\n   */\n   __init() {this._handleVisibilityChange = () => {\n    if (WINDOW.document.visibilityState === 'visible') {\n      this._doChangeToForegroundTasks();\n    } else {\n      this._doChangeToBackgroundTasks();\n    }\n  };}\n\n  /**\n   * Handle when page is blurred\n   */\n   __init2() {this._handleWindowBlur = () => {\n    const breadcrumb = createBreadcrumb({\n      category: 'ui.blur',\n    });\n\n    // Do not count blur as a user action -- it's part of the process of them\n    // leaving the page\n    this._doChangeToBackgroundTasks(breadcrumb);\n  };}\n\n  /**\n   * Handle when page is focused\n   */\n   __init3() {this._handleWindowFocus = () => {\n    const breadcrumb = createBreadcrumb({\n      category: 'ui.focus',\n    });\n\n    // Do not count focus as a user action -- instead wait until they focus and\n    // interactive with page\n    this._doChangeToForegroundTasks(breadcrumb);\n  };}\n\n  /** Ensure page remains active when a key is pressed. */\n   __init4() {this._handleKeyboardEvent = (event) => {\n    handleKeyboardEvent(this, event);\n  };}\n\n  /**\n   * Tasks to run when we consider a page to be hidden (via blurring and/or visibility)\n   */\n   _doChangeToBackgroundTasks(breadcrumb) {\n    if (!this.session) {\n      return;\n    }\n\n    const expired = isSessionExpired(this.session, {\n      maxReplayDuration: this._options.maxReplayDuration,\n      sessionIdleExpire: this.timeouts.sessionIdleExpire,\n    });\n\n    if (expired) {\n      return;\n    }\n\n    if (breadcrumb) {\n      this._createCustomBreadcrumb(breadcrumb);\n    }\n\n    // Send replay when the page/tab becomes hidden. There is no reason to send\n    // replay if it becomes visible, since no actions we care about were done\n    // while it was hidden\n    // This should never reject\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    void this.conditionalFlush();\n  }\n\n  /**\n   * Tasks to run when we consider a page to be visible (via focus and/or visibility)\n   */\n   _doChangeToForegroundTasks(breadcrumb) {\n    if (!this.session) {\n      return;\n    }\n\n    const isSessionActive = this.checkAndHandleExpiredSession();\n\n    if (!isSessionActive) {\n      // If the user has come back to the page within SESSION_IDLE_PAUSE_DURATION\n      // ms, we will re-use the existing session, otherwise create a new\n      // session\n      logInfo('[Replay] Document has become active, but session has expired');\n      return;\n    }\n\n    if (breadcrumb) {\n      this._createCustomBreadcrumb(breadcrumb);\n    }\n  }\n\n  /**\n   * Update user activity (across session lifespans)\n   */\n   _updateUserActivity(_lastActivity = Date.now()) {\n    this._lastActivity = _lastActivity;\n  }\n\n  /**\n   * Updates the session's last activity timestamp\n   */\n   _updateSessionActivity(_lastActivity = Date.now()) {\n    if (this.session) {\n      this.session.lastActivity = _lastActivity;\n      this._maybeSaveSession();\n    }\n  }\n\n  /**\n   * Helper to create (and buffer) a replay breadcrumb from a core SDK breadcrumb\n   */\n   _createCustomBreadcrumb(breadcrumb) {\n    this.addUpdate(() => {\n      // This should never reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.throttledAddEvent({\n        type: EventType.Custom,\n        timestamp: breadcrumb.timestamp || 0,\n        data: {\n          tag: 'breadcrumb',\n          payload: breadcrumb,\n        },\n      });\n    });\n  }\n\n  /**\n   * Observed performance events are added to `this.performanceEntries`. These\n   * are included in the replay event before it is finished and sent to Sentry.\n   */\n   _addPerformanceEntries() {\n    const performanceEntries = createPerformanceEntries(this.performanceEntries).concat(this.replayPerformanceEntries);\n\n    this.performanceEntries = [];\n    this.replayPerformanceEntries = [];\n\n    return Promise.all(createPerformanceSpans(this, performanceEntries));\n  }\n\n  /**\n   * Clear _context\n   */\n   _clearContext() {\n    // XXX: `initialTimestamp` and `initialUrl` do not get cleared\n    this._context.errorIds.clear();\n    this._context.traceIds.clear();\n    this._context.urls = [];\n  }\n\n  /** Update the initial timestamp based on the buffer content. */\n   _updateInitialTimestampFromEventBuffer() {\n    const { session, eventBuffer } = this;\n    if (!session || !eventBuffer) {\n      return;\n    }\n\n    // we only ever update this on the initial segment\n    if (session.segmentId) {\n      return;\n    }\n\n    const earliestEvent = eventBuffer.getEarliestTimestamp();\n    if (earliestEvent && earliestEvent < this._context.initialTimestamp) {\n      this._context.initialTimestamp = earliestEvent;\n    }\n  }\n\n  /**\n   * Return and clear _context\n   */\n   _popEventContext() {\n    const _context = {\n      initialTimestamp: this._context.initialTimestamp,\n      initialUrl: this._context.initialUrl,\n      errorIds: Array.from(this._context.errorIds),\n      traceIds: Array.from(this._context.traceIds),\n      urls: this._context.urls,\n    };\n\n    this._clearContext();\n\n    return _context;\n  }\n\n  /**\n   * Flushes replay event buffer to Sentry.\n   *\n   * Performance events are only added right before flushing - this is\n   * due to the buffered performance observer events.\n   *\n   * Should never be called directly, only by `flush`\n   */\n   async _runFlush() {\n    const replayId = this.getSessionId();\n\n    if (!this.session || !this.eventBuffer || !replayId) {\n      DEBUG_BUILD && logger.error('[Replay] No session or eventBuffer found to flush.');\n      return;\n    }\n\n    await this._addPerformanceEntries();\n\n    // Check eventBuffer again, as it could have been stopped in the meanwhile\n    if (!this.eventBuffer || !this.eventBuffer.hasEvents) {\n      return;\n    }\n\n    // Only attach memory event if eventBuffer is not empty\n    await addMemoryEntry(this);\n\n    // Check eventBuffer again, as it could have been stopped in the meanwhile\n    if (!this.eventBuffer) {\n      return;\n    }\n\n    // if this changed in the meanwhile, e.g. because the session was refreshed or similar, we abort here\n    if (replayId !== this.getSessionId()) {\n      return;\n    }\n\n    try {\n      // This uses the data from the eventBuffer, so we need to call this before `finish()\n      this._updateInitialTimestampFromEventBuffer();\n\n      const timestamp = Date.now();\n\n      // Check total duration again, to avoid sending outdated stuff\n      // We leave 30s wiggle room to accomodate late flushing etc.\n      // This _could_ happen when the browser is suspended during flushing, in which case we just want to stop\n      if (timestamp - this._context.initialTimestamp > this._options.maxReplayDuration + 30000) {\n        throw new Error('Session is too long, not sending replay');\n      }\n\n      const eventContext = this._popEventContext();\n      // Always increment segmentId regardless of outcome of sending replay\n      const segmentId = this.session.segmentId++;\n      this._maybeSaveSession();\n\n      // Note this empties the event buffer regardless of outcome of sending replay\n      const recordingData = await this.eventBuffer.finish();\n\n      await sendReplay({\n        replayId,\n        recordingData,\n        segmentId,\n        eventContext,\n        session: this.session,\n        options: this.getOptions(),\n        timestamp,\n      });\n    } catch (err) {\n      this._handleException(err);\n\n      // This means we retried 3 times and all of them failed,\n      // or we ran into a problem we don't want to retry, like rate limiting.\n      // In this case, we want to completely stop the replay - otherwise, we may get inconsistent segments\n      // This should never reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.stop({ reason: 'sendReplay' });\n\n      const client = getClient();\n\n      if (client) {\n        client.recordDroppedEvent('send_error', 'replay');\n      }\n    }\n  }\n\n  /**\n   * Flush recording data to Sentry. Creates a lock so that only a single flush\n   * can be active at a time. Do not call this directly.\n   */\n   __init5() {this._flush = async ({\n    force = false,\n  }\n\n = {}) => {\n    if (!this._isEnabled && !force) {\n      // This can happen if e.g. the replay was stopped because of exceeding the retry limit\n      return;\n    }\n\n    if (!this.checkAndHandleExpiredSession()) {\n      DEBUG_BUILD && logger.error('[Replay] Attempting to finish replay event after session expired.');\n      return;\n    }\n\n    if (!this.session) {\n      // should never happen, as we would have bailed out before\n      return;\n    }\n\n    const start = this.session.started;\n    const now = Date.now();\n    const duration = now - start;\n\n    // A flush is about to happen, cancel any queued flushes\n    this._debouncedFlush.cancel();\n\n    // If session is too short, or too long (allow some wiggle room over maxReplayDuration), do not send it\n    // This _should_ not happen, but it may happen if flush is triggered due to a page activity change or similar\n    const tooShort = duration < this._options.minReplayDuration;\n    const tooLong = duration > this._options.maxReplayDuration + 5000;\n    if (tooShort || tooLong) {\n      logInfo(\n        `[Replay] Session duration (${Math.floor(duration / 1000)}s) is too ${\n          tooShort ? 'short' : 'long'\n        }, not sending replay.`,\n        this._options._experiments.traceInternals,\n      );\n\n      if (tooShort) {\n        this._debouncedFlush();\n      }\n      return;\n    }\n\n    const eventBuffer = this.eventBuffer;\n    if (eventBuffer && this.session.segmentId === 0 && !eventBuffer.hasCheckout) {\n      logInfo('[Replay] Flushing initial segment without checkout.', this._options._experiments.traceInternals);\n      // TODO FN: Evaluate if we want to stop here, or remove this again?\n    }\n\n    // this._flushLock acts as a lock so that future calls to `_flush()`\n    // will be blocked until this promise resolves\n    if (!this._flushLock) {\n      this._flushLock = this._runFlush();\n      await this._flushLock;\n      this._flushLock = undefined;\n      return;\n    }\n\n    // Wait for previous flush to finish, then call the debounced `_flush()`.\n    // It's possible there are other flush requests queued and waiting for it\n    // to resolve. We want to reduce all outstanding requests (as well as any\n    // new flush requests that occur within a second of the locked flush\n    // completing) into a single flush.\n\n    try {\n      await this._flushLock;\n    } catch (err) {\n      DEBUG_BUILD && logger.error(err);\n    } finally {\n      this._debouncedFlush();\n    }\n  };}\n\n  /** Save the session, if it is sticky */\n   _maybeSaveSession() {\n    if (this.session && this._options.stickySession) {\n      saveSession(this.session);\n    }\n  }\n\n  /** Handler for rrweb.record.onMutation */\n   __init6() {this._onMutationHandler = (mutations) => {\n    const count = mutations.length;\n\n    const mutationLimit = this._options.mutationLimit;\n    const mutationBreadcrumbLimit = this._options.mutationBreadcrumbLimit;\n    const overMutationLimit = mutationLimit && count > mutationLimit;\n\n    // Create a breadcrumb if a lot of mutations happen at the same time\n    // We can show this in the UI as an information with potential performance improvements\n    if (count > mutationBreadcrumbLimit || overMutationLimit) {\n      const breadcrumb = createBreadcrumb({\n        category: 'replay.mutations',\n        data: {\n          count,\n          limit: overMutationLimit,\n        },\n      });\n      this._createCustomBreadcrumb(breadcrumb);\n    }\n\n    // Stop replay if over the mutation limit\n    if (overMutationLimit) {\n      // This should never reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.stop({ reason: 'mutationLimit', forceFlush: this.recordingMode === 'session' });\n      return false;\n    }\n\n    // `true` means we use the regular mutation handling by rrweb\n    return true;\n  };}\n}\n\nfunction getOption(\n  selectors,\n  defaultSelectors,\n  deprecatedClassOption,\n  deprecatedSelectorOption,\n) {\n  const deprecatedSelectors = typeof deprecatedSelectorOption === 'string' ? deprecatedSelectorOption.split(',') : [];\n\n  const allSelectors = [\n    ...selectors,\n    // @deprecated\n    ...deprecatedSelectors,\n\n    // sentry defaults\n    ...defaultSelectors,\n  ];\n\n  // @deprecated\n  if (typeof deprecatedClassOption !== 'undefined') {\n    // NOTE: No support for RegExp\n    if (typeof deprecatedClassOption === 'string') {\n      allSelectors.push(`.${deprecatedClassOption}`);\n    }\n\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[Replay] You are using a deprecated configuration item for privacy. Read the documentation on how to use the new privacy configuration.',\n      );\n    });\n  }\n\n  return allSelectors.join(',');\n}\n\n/**\n * Returns privacy related configuration for use in rrweb\n */\nfunction getPrivacyOptions({\n  mask,\n  unmask,\n  block,\n  unblock,\n  ignore,\n\n  // eslint-disable-next-line deprecation/deprecation\n  blockClass,\n  // eslint-disable-next-line deprecation/deprecation\n  blockSelector,\n  // eslint-disable-next-line deprecation/deprecation\n  maskTextClass,\n  // eslint-disable-next-line deprecation/deprecation\n  maskTextSelector,\n  // eslint-disable-next-line deprecation/deprecation\n  ignoreClass,\n}) {\n  const defaultBlockedElements = ['base[href=\"/\"]'];\n\n  const maskSelector = getOption(mask, ['.sentry-mask', '[data-sentry-mask]'], maskTextClass, maskTextSelector);\n  const unmaskSelector = getOption(unmask, ['.sentry-unmask', '[data-sentry-unmask]']);\n\n  const options = {\n    // We are making the decision to make text and input selectors the same\n    maskTextSelector: maskSelector,\n    unmaskTextSelector: unmaskSelector,\n\n    blockSelector: getOption(\n      block,\n      ['.sentry-block', '[data-sentry-block]', ...defaultBlockedElements],\n      blockClass,\n      blockSelector,\n    ),\n    unblockSelector: getOption(unblock, ['.sentry-unblock', '[data-sentry-unblock]']),\n    ignoreSelector: getOption(ignore, ['.sentry-ignore', '[data-sentry-ignore]', 'input[type=\"file\"]'], ignoreClass),\n  };\n\n  if (blockClass instanceof RegExp) {\n    options.blockClass = blockClass;\n  }\n\n  if (maskTextClass instanceof RegExp) {\n    options.maskTextClass = maskTextClass;\n  }\n\n  return options;\n}\n\n/**\n * Masks an attribute if necessary, otherwise return attribute value as-is.\n */\nfunction maskAttribute({\n  el,\n  key,\n  maskAttributes,\n  maskAllText,\n  privacyOptions,\n  value,\n}) {\n  // We only mask attributes if `maskAllText` is true\n  if (!maskAllText) {\n    return value;\n  }\n\n  // unmaskTextSelector takes precendence\n  if (privacyOptions.unmaskTextSelector && el.matches(privacyOptions.unmaskTextSelector)) {\n    return value;\n  }\n\n  if (\n    maskAttributes.includes(key) ||\n    // Need to mask `value` attribute for `<input>` if it's a button-like\n    // type\n    (key === 'value' && el.tagName === 'INPUT' && ['submit', 'button'].includes(el.getAttribute('type') || ''))\n  ) {\n    return value.replace(/[\\S]/g, '*');\n  }\n\n  return value;\n}\n\nconst MEDIA_SELECTORS =\n  'img,image,svg,video,object,picture,embed,map,audio,link[rel=\"icon\"],link[rel=\"apple-touch-icon\"]';\n\nconst DEFAULT_NETWORK_HEADERS = ['content-length', 'content-type', 'accept'];\n\nlet _initialized = false;\n\nconst replayIntegration$1 = ((options) => {\n  // eslint-disable-next-line deprecation/deprecation\n  return new Replay$1(options);\n}) ;\n\n/**\n * The main replay integration class, to be passed to `init({  integrations: [] })`.\n * @deprecated Use `replayIntegration()` instead.\n */\nclass Replay$1  {\n  /**\n   * @inheritDoc\n   */\n   static __initStatic() {this.id = 'Replay';}\n\n  /**\n   * @inheritDoc\n   */\n\n  /**\n   * Options to pass to `rrweb.record()`\n   */\n\n  /**\n   * Initial options passed to the replay integration, merged with default values.\n   * Note: `sessionSampleRate` and `errorSampleRate` are not required here, as they\n   * can only be finally set when setupOnce() is called.\n   *\n   * @private\n   */\n\n   constructor({\n    flushMinDelay = DEFAULT_FLUSH_MIN_DELAY,\n    flushMaxDelay = DEFAULT_FLUSH_MAX_DELAY,\n    minReplayDuration = MIN_REPLAY_DURATION,\n    maxReplayDuration = MAX_REPLAY_DURATION,\n    stickySession = true,\n    useCompression = true,\n    workerUrl,\n    _experiments = {},\n    sessionSampleRate,\n    errorSampleRate,\n    maskAllText = true,\n    maskAllInputs = true,\n    blockAllMedia = true,\n\n    mutationBreadcrumbLimit = 750,\n    mutationLimit = 10000,\n\n    slowClickTimeout = 7000,\n    slowClickIgnoreSelectors = [],\n\n    networkDetailAllowUrls = [],\n    networkDetailDenyUrls = [],\n    networkCaptureBodies = true,\n    networkRequestHeaders = [],\n    networkResponseHeaders = [],\n\n    mask = [],\n    maskAttributes = ['title', 'placeholder'],\n    unmask = [],\n    block = [],\n    unblock = [],\n    ignore = [],\n    maskFn,\n\n    beforeAddRecordingEvent,\n    beforeErrorSampling,\n\n    // eslint-disable-next-line deprecation/deprecation\n    blockClass,\n    // eslint-disable-next-line deprecation/deprecation\n    blockSelector,\n    // eslint-disable-next-line deprecation/deprecation\n    maskInputOptions,\n    // eslint-disable-next-line deprecation/deprecation\n    maskTextClass,\n    // eslint-disable-next-line deprecation/deprecation\n    maskTextSelector,\n    // eslint-disable-next-line deprecation/deprecation\n    ignoreClass,\n  } = {}) {\n    // eslint-disable-next-line deprecation/deprecation\n    this.name = Replay$1.id;\n\n    const privacyOptions = getPrivacyOptions({\n      mask,\n      unmask,\n      block,\n      unblock,\n      ignore,\n      blockClass,\n      blockSelector,\n      maskTextClass,\n      maskTextSelector,\n      ignoreClass,\n    });\n\n    this._recordingOptions = {\n      maskAllInputs,\n      maskAllText,\n      maskInputOptions: { ...(maskInputOptions || {}), password: true },\n      maskTextFn: maskFn,\n      maskInputFn: maskFn,\n      maskAttributeFn: (key, value, el) =>\n        maskAttribute({\n          maskAttributes,\n          maskAllText,\n          privacyOptions,\n          key,\n          value,\n          el,\n        }),\n\n      ...privacyOptions,\n\n      // Our defaults\n      slimDOMOptions: 'all',\n      inlineStylesheet: true,\n      // Disable inline images as it will increase segment/replay size\n      inlineImages: false,\n      // collect fonts, but be aware that `sentry.io` needs to be an allowed\n      // origin for playback\n      collectFonts: true,\n      errorHandler: (err) => {\n        try {\n          err.__rrweb__ = true;\n        } catch (error) {\n          // ignore errors here\n          // this can happen if the error is frozen or does not allow mutation for other reasons\n        }\n      },\n    };\n\n    this._initialOptions = {\n      flushMinDelay,\n      flushMaxDelay,\n      minReplayDuration: Math.min(minReplayDuration, MIN_REPLAY_DURATION_LIMIT),\n      maxReplayDuration: Math.min(maxReplayDuration, MAX_REPLAY_DURATION),\n      stickySession,\n      sessionSampleRate,\n      errorSampleRate,\n      useCompression,\n      workerUrl,\n      blockAllMedia,\n      maskAllInputs,\n      maskAllText,\n      mutationBreadcrumbLimit,\n      mutationLimit,\n      slowClickTimeout,\n      slowClickIgnoreSelectors,\n      networkDetailAllowUrls,\n      networkDetailDenyUrls,\n      networkCaptureBodies,\n      networkRequestHeaders: _getMergedNetworkHeaders(networkRequestHeaders),\n      networkResponseHeaders: _getMergedNetworkHeaders(networkResponseHeaders),\n      beforeAddRecordingEvent,\n      beforeErrorSampling,\n\n      _experiments,\n    };\n\n    if (typeof sessionSampleRate === 'number') {\n      // eslint-disable-next-line\n      console.warn(\n        `[Replay] You are passing \\`sessionSampleRate\\` to the Replay integration.\nThis option is deprecated and will be removed soon.\nInstead, configure \\`replaysSessionSampleRate\\` directly in the SDK init options, e.g.:\nSentry.init({ replaysSessionSampleRate: ${sessionSampleRate} })`,\n      );\n\n      this._initialOptions.sessionSampleRate = sessionSampleRate;\n    }\n\n    if (typeof errorSampleRate === 'number') {\n      // eslint-disable-next-line\n      console.warn(\n        `[Replay] You are passing \\`errorSampleRate\\` to the Replay integration.\nThis option is deprecated and will be removed soon.\nInstead, configure \\`replaysOnErrorSampleRate\\` directly in the SDK init options, e.g.:\nSentry.init({ replaysOnErrorSampleRate: ${errorSampleRate} })`,\n      );\n\n      this._initialOptions.errorSampleRate = errorSampleRate;\n    }\n\n    if (this._initialOptions.blockAllMedia) {\n      // `blockAllMedia` is a more user friendly option to configure blocking\n      // embedded media elements\n      this._recordingOptions.blockSelector = !this._recordingOptions.blockSelector\n        ? MEDIA_SELECTORS\n        : `${this._recordingOptions.blockSelector},${MEDIA_SELECTORS}`;\n    }\n\n    if (this._isInitialized && isBrowser()) {\n      throw new Error('Multiple Sentry Session Replay instances are not supported');\n    }\n\n    this._isInitialized = true;\n  }\n\n  /** If replay has already been initialized */\n   get _isInitialized() {\n    return _initialized;\n  }\n\n  /** Update _isInitialized */\n   set _isInitialized(value) {\n    _initialized = value;\n  }\n\n  /**\n   * Setup and initialize replay container\n   */\n   setupOnce() {\n    if (!isBrowser()) {\n      return;\n    }\n\n    this._setup();\n\n    // Once upon a time, we tried to create a transaction in `setupOnce` and it would\n    // potentially create a transaction before some native SDK integrations have run\n    // and applied their own global event processor. An example is:\n    // https://github.com/getsentry/sentry-javascript/blob/b47ceafbdac7f8b99093ce6023726ad4687edc48/packages/browser/src/integrations/useragent.ts\n    //\n    // So we call `this._initialize()` in next event loop as a workaround to wait for other\n    // global event processors to finish. This is no longer needed, but keeping it\n    // here to avoid any future issues.\n    setTimeout(() => this._initialize());\n  }\n\n  /**\n   * Start a replay regardless of sampling rate. Calling this will always\n   * create a new session. Will throw an error if replay is already in progress.\n   *\n   * Creates or loads a session, attaches listeners to varying events (DOM,\n   * PerformanceObserver, Recording, Sentry SDK, etc)\n   */\n   start() {\n    if (!this._replay) {\n      return;\n    }\n\n    this._replay.start();\n  }\n\n  /**\n   * Start replay buffering. Buffers until `flush()` is called or, if\n   * `replaysOnErrorSampleRate` > 0, until an error occurs.\n   */\n   startBuffering() {\n    if (!this._replay) {\n      return;\n    }\n\n    this._replay.startBuffering();\n  }\n\n  /**\n   * Currently, this needs to be manually called (e.g. for tests). Sentry SDK\n   * does not support a teardown\n   */\n   stop() {\n    if (!this._replay) {\n      return Promise.resolve();\n    }\n\n    return this._replay.stop({ forceFlush: this._replay.recordingMode === 'session' });\n  }\n\n  /**\n   * If not in \"session\" recording mode, flush event buffer which will create a new replay.\n   * Unless `continueRecording` is false, the replay will continue to record and\n   * behave as a \"session\"-based replay.\n   *\n   * Otherwise, queue up a flush.\n   */\n   flush(options) {\n    if (!this._replay || !this._replay.isEnabled()) {\n      return Promise.resolve();\n    }\n\n    return this._replay.sendBufferedReplayOrFlush(options);\n  }\n\n  /**\n   * Get the current session ID.\n   */\n   getReplayId() {\n    if (!this._replay || !this._replay.isEnabled()) {\n      return;\n    }\n\n    return this._replay.getSessionId();\n  }\n\n  /**\n   * Initializes replay.\n   */\n   _initialize() {\n    if (!this._replay) {\n      return;\n    }\n\n    // We have to run this in _initialize, because this runs in setTimeout\n    // So when this runs all integrations have been added\n    // Before this, we cannot access integrations on the client,\n    // so we need to mutate the options here\n    this._maybeLoadFromReplayCanvasIntegration();\n\n    this._replay.initializeSampling();\n  }\n\n  /** Setup the integration. */\n   _setup() {\n    // Client is not available in constructor, so we need to wait until setupOnce\n    const finalOptions = loadReplayOptionsFromClient(this._initialOptions);\n\n    this._replay = new ReplayContainer({\n      options: finalOptions,\n      recordingOptions: this._recordingOptions,\n    });\n  }\n\n  /** Get canvas options from ReplayCanvas integration, if it is also added. */\n   _maybeLoadFromReplayCanvasIntegration() {\n    // To save bundle size, we skip checking for stuff here\n    // and instead just try-catch everything - as generally this should all be defined\n    /* eslint-disable @typescript-eslint/no-non-null-assertion */\n    try {\n      const client = getClient();\n      const canvasIntegration = client.getIntegrationByName('ReplayCanvas')\n\n;\n      if (!canvasIntegration) {\n        return;\n      }\n\n      this._replay['_canvas'] = canvasIntegration.getOptions();\n    } catch (e) {\n      // ignore errors here\n    }\n    /* eslint-enable @typescript-eslint/no-non-null-assertion */\n  }\n}Replay$1.__initStatic();\n\n/** Parse Replay-related options from SDK options */\nfunction loadReplayOptionsFromClient(initialOptions) {\n  const client = getClient();\n  const opt = client && (client.getOptions() );\n\n  const finalOptions = { sessionSampleRate: 0, errorSampleRate: 0, ...dropUndefinedKeys(initialOptions) };\n\n  if (!opt) {\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn('SDK client is not available.');\n    });\n    return finalOptions;\n  }\n\n  if (\n    initialOptions.sessionSampleRate == null && // TODO remove once deprecated rates are removed\n    initialOptions.errorSampleRate == null && // TODO remove once deprecated rates are removed\n    opt.replaysSessionSampleRate == null &&\n    opt.replaysOnErrorSampleRate == null\n  ) {\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'Replay is disabled because neither `replaysSessionSampleRate` nor `replaysOnErrorSampleRate` are set.',\n      );\n    });\n  }\n\n  if (typeof opt.replaysSessionSampleRate === 'number') {\n    finalOptions.sessionSampleRate = opt.replaysSessionSampleRate;\n  }\n\n  if (typeof opt.replaysOnErrorSampleRate === 'number') {\n    finalOptions.errorSampleRate = opt.replaysOnErrorSampleRate;\n  }\n\n  return finalOptions;\n}\n\nfunction _getMergedNetworkHeaders(headers) {\n  return [...DEFAULT_NETWORK_HEADERS, ...headers.map(header => header.toLowerCase())];\n}\n\n/**\n * This is a small utility to get a type-safe instance of the Replay integration.\n */\n// eslint-disable-next-line deprecation/deprecation\nfunction getReplay$1() {\n  const client = getClient();\n  return (\n    client && client.getIntegrationByName && client.getIntegrationByName('Replay')\n  );\n}\n\n// eslint-disable-next-line deprecation/deprecation\n\n/** @deprecated Use the export from `@sentry/replay` or from framework-specific SDKs like `@sentry/react` or `@sentry/vue` */\nconst getReplay = getReplay$1;\n\n/** @deprecated Use the export from `@sentry/replay` or from framework-specific SDKs like `@sentry/react` or `@sentry/vue` */\nconst replayIntegration = replayIntegration$1;\n\n/** @deprecated Use the export from `@sentry/replay` or from framework-specific SDKs like `@sentry/react` or `@sentry/vue` */\n// eslint-disable-next-line deprecation/deprecation\nclass Replay extends Replay$1 {}\n\nexport { Replay$1 as InternalReplay, Replay, getReplay, getReplay$1 as internalGetReplay, replayIntegration$1 as internalReplayIntegration, replayIntegration };\n//# sourceMappingURL=index.js.map\n"],"names":["canvasService","canvasCtx","errorHandler","wrappedEmit","_takeFullSnapshot","handlers","NodeType","EventType2","IncrementalSource2","MouseInteractions2","PointerTypes2","NodeType$1","WINDOW","_sentry_utils__WEBPACK_IMPORTED_MODULE_0__","GLOBAL_OBJ","REPLAY_SESSION_KEY","UNABLE_TO_SEND_REPLAY","_optionalChain$5","ops","lastAccessLHS","value","i","length","op","fn","args","call","undefined","isShadowRoot","n","host","_","_2","shadowRoot","isNativeShadowDom","Object","prototype","toString","stringifyStylesheet","s","cssText","rules","cssRules","Array","from","stringifyRule","join","includes","replace","error","rule","importStringified","styleSheet","escapeImportStatement","split","statement","JSON","stringify","href","layerName","push","supportsText","media","mediaText","isCSSStyleRule","selectorText","cssStringified","Mirror","constructor","idNodeMap","Map","nodeMetaMap","WeakMap","getId","id","_3","getMeta","_4","_5","getNode","get","getIds","keys","removeNodeFromMap","delete","childNodes","forEach","childNode","has","hasNode","node","add","meta","set","oldNode","reset","shouldMaskInput","maskInputOptions","tagName","type","Boolean","toLowerCase","maskInputValue","isMasked","element","maskInputFn","text","repeat","str","toUpperCase","ORIGINAL_ATTRIBUTE_NAME","getInputType","hasAttribute","getInputValue","el","getAttribute","_id","tagNameRegex","genId","URL_IN_CSS_REF","URL_PROTOCOL_MATCH","URL_WWW_MATCH","DATA_URI","absoluteToStylesheet","origin","quote1","path1","quote2","path2","path3","filePath","maybeQuote","test","url","indexOf","slice","stack","parts","part","pop","SRCSET_NOT_SPACES","SRCSET_COMMAS_OR_SPACES","absoluteToDoc","doc","attributeValue","trim","a","createElement","getHref","document","transformAttribute","name","maskAttributeFn","getAbsoluteSrcsetString","pos","collectCharacters","regEx","chars","match","exec","substring","output","descriptorsStr","inParens","c","charAt","ignoreAttribute","_value","distanceToMatch","matchPredicate","limit","Infinity","distance","nodeType","ELEMENT_NODE","parentNode","createMatchPredicate","className","selector","matches","elementClassMatchesRegex","regex","eIndex","classList","e2","needMaskingText","maskTextClass","maskTextSelector","unmaskTextClass","unmaskTextSelector","maskAllText","parentElement","autocomplete","disallowedAutocompleteValues","maskDistance","unmaskDistance","e","lowerIfExists","maybeAttr","serializeNodeWithId","options","mirror","blockClass","blockSelector","unblockSelector","skipChild","inlineStylesheet","maskTextFn","slimDOMOptions","dataURLOptions","inlineImages","recordCanvas","onSerialize","onIframeLoad","iframeLoadTimeout","onStylesheetLoad","stylesheetLoadTimeout","keepIframeSrcFn","newlyAddedElement","preserveWhiteSpace","_serializedNode","serializeNode","rootId","getRootId","docId","DOCUMENT_NODE","compatMode","Document","DOCUMENT_TYPE_NODE","DocumentType","publicId","systemId","serializeElementNode","isCustomElement","needBlock","_isBlockedElement","contains","getValidTagName","HTMLFormElement","processedTagName","attributes","len","attr","stylesheet","styleSheets","find","rel","_cssText","sheet","innerText","textContent","checked","forceMask","selected","__context","is2DCanvasBlank","canvas","ctx","getContext","x","width","y","height","getImageData","originalGetImageData","pixelBuffer","Uint32Array","Math","min","data","buffer","some","pixel","rr_dataURL","toDataURL","quality","canvasDataURL","blankCanvas","blankCanvasDataURL","oldValue","image","crossOrigin","recordInlineImage","removeEventListener","naturalWidth","naturalHeight","drawImage","err","console","warn","currentSrc","removeAttribute","complete","addEventListener","rr_mediaState","paused","rr_mediaCurrentTime","currentTime","scrollLeft","rr_scrollLeft","scrollTop","rr_scrollTop","getBoundingClientRect","class","rr_width","rr_height","src","contentDocument","rr_src","customElements","Element","isSVG","isSVGElement","ownerSVGElement","isCustom","TEXT_NODE","serializeTextNode","parentTagName","isStyle","isScript","isTextarea","nextSibling","previousSibling","_6","_7","_8","textarea","isInputMasked","Text","CDATA_SECTION_NODE","CDATA","COMMENT_NODE","Comment","slimDOMExcluded","sn","comment","script","as","endsWith","headFavicon","headMetaDescKeywords","headMetaSocial","property","headMetaRobots","headMetaHttpEquiv","headMetaAuthorship","headMetaVerification","serializedNode","assign","recordChild","isShadowHost","headWhitespace","bypassOptions","childN","serializedChildNode","isElement$1","isShadow","onceIframeLoaded","iframeEl","listener","readyState","win","contentWindow","fired","timer","setTimeout","clearTimeout","blankUrl","location","iframeDoc","serializedIframeNode","onceStylesheetLoaded","link","styleSheetLoadTimeout","styleSheetLoaded","serializedLinkNode","_optionalChain$4","on","target","capture","passive","DEPARTED_MIRROR_ACCESS_WARNING","_mirror","map","throttle$1","func","wait","timeout","previous","now","Date","leading","remaining","context","clearTimeout$1","rest","getImplementation","apply","trailing","setTimeout$1","patch","source","replacement","original","wrapped","defineProperties","__rrweb_original__","enumerable","window","Proxy","Reflect","prop","receiver","nowTimestamp","getWindowScroll","left","scrollingElement","pageXOffset","documentElement","body","top","pageYOffset","_9","_10","_11","_12","_13","_14","getWindowHeight","innerHeight","clientHeight","getWindowWidth","innerWidth","clientWidth","closestElementOfNode","isBlocked","checkAncestors","blockedPredicate","isUnblocked","blockDistance","unblockDistance","isIgnored","legacy_isTouchEvent","event","changedTouches","isSerializedIframe","nodeName","isSerializedStylesheet","hasShadowRoot","_18","getTime","StyleSheetMirror","styleIDMap","idStyleMap","_sentry_utils__WEBPACK_IMPORTED_MODULE_1__","h","newId","getStyle","generateId","getShadowHost","shadowHost","_19","getRootNode","_20","_21","Node","DOCUMENT_FRAGMENT_NODE","inDom","ownerDocument","shadowHostInDom","getRootShadowHost","rootShadowHost","cachedImplementations","cached","impl","sandbox","hidden","head","appendChild","removeChild","bind","EventType","IncrementalSource","MouseInteractions","PointerTypes","DoubleLinkedList","tail","position","current","index","_optionalChain$3","next","addNode","__ln","removeNode","moveKey","parentId","MutationBuffer","frozen","locked","texts","attributeMap","removes","mapRemoves","movedMap","addedSet","Set","movedSet","droppedSet","processMutations","mutations","processMutation","emit","adds","addedIds","addList","getNextId","ns","nextId","pushAdd","currentN","iframeManager","addIframe","stylesheetManager","trackLinkElement","shadowDomManager","addShadowRoot","iframe","childSn","attachIframe","observeAttachShadow","attachLinkElement","shift","isParentRemoved","isAncestorInSet","candidate","tailNode","_node","unhandledNode","payload","filter","attribute","style","diffAsStr","styleDiff","unchangedAsStr","_unchangedStyles","mutationCb","m","attributeName","item","setAttribute","unattachedDoc","implementation","createHTMLDocument","old","pname","newValue","getPropertyValue","newPriority","getPropertyPriority","addedNodes","genAdds","removedNodes","nodeId","deepDelete","isAncestorRemoved","processedNodeManager","inOtherBuffer","targetId","init","key","freeze","canvasManager","unfreeze","isFrozen","lock","unlock","addsSet","_isParentRemoved","r","size","_isAncestorInSet","callbackWrapper","cb","_optionalChain$2","mutationBuffers","getEventTarget","path","composedPath","initMutationObserver","rootEl","mutationBuffer","mutationObserverCtor","MutationObserver","__rrMutationObserver","angularZoneSymbol","Zone","__symbol__","observer","onMutation","observe","attributeOldValue","characterData","characterDataOldValue","childList","subtree","initScrollObserver","scrollCb","sampling","updatePosition","evt","defaultView","scrollLeftTop","scroll","INPUT_TAGS","lastInputValueMap","getNestedCSSRulePositions","recurse","childRule","parentRule","CSSGroupingRule","hasNestedCSSRule","CSSMediaRule","CSSSupportsRule","CSSConditionRule","unshift","parentStyleSheet","getIdAndStyleId","styleMirror","styleId","ownerNode","initAdoptedStyleSheetObserver","hostId","patchTarget","ShadowRoot","originalPropertyDescriptor","getOwnPropertyDescriptor","defineProperty","configurable","sheets","result","_15","_16","adoptStyleSheets","initObservers","o","_hooks","currentWindow","mutationObserver","mousemoveHandler","initMoveObserver","mousemoveCb","timeBaseline","mousemove","threshold","callbackThreshold","mousemoveCallback","positions","wrappedCb","totalOffset","p","timeOffset","clientX","clientY","DragEvent","Drag","MouseEvent","MouseMove","TouchMove","mouseInteractionHandler","initMouseInteractionObserver","mouseInteractionCb","mouseInteraction","disableMap","currentPointerType","getHandler","pointerType","thisEventKey","eventKey","Mouse","Touch","Pen","MouseDown","MouseUp","startsWith","Click","Number","isNaN","eventName","handler","PointerEvent","TouchStart","TouchEnd","scrollHandler","viewportResizeHandler","initViewportResizeObserver","viewportResizeCb","lastH","lastW","updateDimension","inputHandler","initInputObserver","inputCb","ignoreClass","ignoreSelector","userTriggeredOnInput","eventHandler","userTriggered","isTrusted","isChecked","cbWithDedup","querySelectorAll","v","lastInputValue","events","input","propertyDescriptor","HTMLInputElement","hookProperties","HTMLSelectElement","HTMLTextAreaElement","HTMLOptionElement","hookSetter","d","isRevoked","mediaInteractionHandler","initMediaInteractionObserver","mediaInteractionCb","volume","muted","playbackRate","styleSheetObserver","initStyleSheetObserver","styleSheetRuleCb","replaceSync","CSSStyleSheet","insertRule","thisArg","argumentsList","deleteRule","supportedNestedCSSRuleTypes","canMonkeyPatchNestedCSSRule","unmodifiedFunctions","entries","typeKey","adoptedStyleSheetObserver","styleDeclarationObserver","initStyleDeclarationObserver","styleDeclarationCb","ignoreCSSAttributes","setProperty","CSSStyleDeclaration","priority","_17","removeProperty","remove","fontObserver","collectFonts","initFontObserver","fontCb","fontMap","originalFontFace","FontFace","family","descriptors","fontFace","fontSource","Uint8Array","restoreHandler","fonts","selectionObserver","initSelectionObserver","param","selectionCb","collapsed","updateSelection","selection","getSelection","isCollapsed","ranges","count","rangeCount","range","getRangeAt","startContainer","startOffset","endContainer","endOffset","blocked","start","end","customElementObserver","initCustomElementObserver","customElementCb","define","pluginHandlers","plugin","plugins","callback","b","disconnect","CrossOriginIframeMirror","generateIdFn","iframeIdToRemoteIdMap","iframeRemoteIdToIdMap","remoteId","idToRemoteMap","remoteToIdMap","idToRemoteIdMap","getIdToRemoteIdMap","remoteIdToIdMap","getRemoteIdToIdMap","getRemoteId","getRemoteIds","ids","_optionalChain$1","IframeManagerNoop","crossOriginIframeMirror","crossOriginIframeRootIdMap","addLoadListener","IframeManager","iframes","crossOriginIframeMap","recordCrossOriginIframes","crossOriginIframeStyleMirror","handleMessage","loadListener","isAttachIframe","adoptedStyleSheets","message","crossOriginMessageEvent","iframeSourceWindow","transformedEvent","transformCrossOriginEvent","isCheckout","FullSnapshot","replaceIdOnNode","patchRootIdOnNode","timestamp","IncrementalSnapshot","Mutation","Meta","Load","DomContentLoaded","Plugin","Custom","replaceIds","ViewportResize","MediaInteraction","MouseInteraction","Scroll","CanvasMutation","Input","StyleSheetRule","StyleDeclaration","replaceStyleIds","Font","Selection","AdoptedStyleSheet","styles","iframeMirror","obj","isArray","child","ShadowDomManagerNoop","ShadowDomManager","shadowDoms","WeakSet","restoreHandlers","patchAttachShadow","iframeElement","manager","option","CanvasManagerNoop","snapshot","StylesheetManager","trackedLinkElements","adoptedStyleSheetCb","linkEl","trackStylesheetInLinkElement","adoptedStyleSheetData","styleIds","CSSRule","ProcessedNodeManager","nodeMap","loop","periodicallyClear","onRequestAnimationFrame","clear","thisBuffer","buffers","destroy","record","lastFullSnapshotEvent","checkoutEveryNms","checkoutEveryNth","maskAllInputs","_maskInputOptions","_slimDOMOptions","maxCanvasSize","packFn","mousemoveWait","recordAfter","getCanvasManager","inEmittingFrame","parent","passEmitsToParent","color","date","email","month","number","search","tel","time","week","select","radio","checkbox","polyfill","NodeList","DOMTokenList","incrementalSnapshotCount","eventProcessor","_sentry_utils__WEBPACK_IMPORTED_MODULE_2__","buf","postMessage","exceedCount","exceedTime","takeFullSnapshot","wrappedMutationEmit","wrappedScrollEmit","wrappedCanvasMutationEmit","__RRWEB_EXCLUDE_IFRAME__","getMirror","nodeMirror","_getCanvasManager","getCanvasManagerFn","__RRWEB_EXCLUDE_SHADOW_DOM__","slimDOM","initialOffset","canvasMutationCb","CustomElement","timestampToMs","isMs","timestampToS","addBreadcrumbEvent","replay","breadcrumb","category","triggerUserActivity","checkAndHandleExpiredSession","addUpdate","throttledAddEvent","tag","_sentry_utils__WEBPACK_IMPORTED_MODULE_3__","Fv","getClosestInteractive","closestInteractive","closest","getClickTargetNode","getTargetNode","ClickDetector","slowClickConfig","_addBreadcrumbEvent","_lastMutation","_lastScroll","_clicks","_timeout","_threshold","_scollTimeout","scrollTimeout","_replay","_ignoreSelector","addListeners","cleanupWindowOpen","nowInSeconds","_sentry_utils__WEBPACK_IMPORTED_MODULE_4__","hl","originalWindowOpen","splice","_teardown","removeListeners","_checkClickTimeout","handleClick","ignoreElement","SLOW_CLICK_TAGS","newClick","clickBreadcrumb","clickCount","click","abs","_scheduleCheckClicks","registerMutation","registerScroll","registerClick","_handleMultiClick","_getClicks","_checkClicks","timedOutClicks","mutationAfter","scrollAfter","_generateBreadcrumbs","hadScroll","hadMutation","timeAfterClickMs","endReason","route","getCurrentRoute","metric","createBreadcrumb","ATTRIBUTES_TO_RECORD","handleDomListener","isEnabled","handleDom","handlerData","getDomTarget","isClick","_sentry_utils__WEBPACK_IMPORTED_MODULE_5__","Rt","maxStringLength","getBaseDomBreadcrumb","clickDetector","altKey","metaKey","ctrlKey","shiftKey","getAttributesToRecord","normalizedKey","ENTRY_TYPES","resource","entry","entryType","initiatorType","responseEnd","startTime","decodedBodySize","encodedBodySize","responseStatus","transferSize","getAbsoluteTime","statusCode","paint","duration","navigation","domComplete","domContentLoadedEventStart","domContentLoadedEventEnd","domInteractive","loadEventStart","loadEventEnd","redirectCount","createPerformanceEntry","_sentry_utils__WEBPACK_IMPORTED_MODULE_6__","Z1","performance","timeOrigin","DEBUG_BUILD","__SENTRY_DEBUG__","logInfo","shouldAddBreadcrumb","_sentry_utils__WEBPACK_IMPORTED_MODULE_8__","kg","info","addLogBreadcrumb","logInfoNextTick","_sentry_core__WEBPACK_IMPORTED_MODULE_9__","n_","logger","level","EventBufferSizeExceededError","Error","EventBufferArray","_totalSize","hasCheckout","hasEvents","addEvent","eventSize","finish","Promise","resolve","eventsRet","getEarliestTimestamp","sort","WorkerHandler","worker","_worker","ensureReady","_ensureReadyPromise","reject","success","once","terminate","method","arg","_getAndIncrementId","response","EventBufferCompressionWorker","_earliestTimestamp","_sendEventToWorker","_finishRequest","then","EventBufferProxy","_fallback","_compression","_used","_ensureWorkerIsLoadedPromise","_ensureWorkerIsLoaded","ensureWorkerIsLoaded","_switchToCompressionWorker","addEventPromises","all","hasSessionStorage","sessionStorage","isSampled","sampleRate","random","makeSession","session","_sentry_utils__WEBPACK_IMPORTED_MODULE_10__","DM","started","lastActivity","segmentId","sampled","previousSessionId","saveSession","setItem","createSession","sessionSampleRate","allowBuffering","stickySession","isExpired","initialTime","expiry","targetTime","isSessionExpired","maxReplayDuration","sessionIdleExpire","shouldRefreshSession","loadOrCreateSession","traceInternals","sessionOptions","existingSession","fetchSession","sessionStringFromStorage","getItem","sessionObj","parse","addEventSync","shouldAddEvent","_addEvent","eventBuffer","recordingMode","replayOptions","getOptions","eventAfterPossibleCallback","maybeApplyCallback","beforeAddRecordingEvent","reason","stop","client","s3","recordDroppedEvent","isPaused","timestampInMs","timeouts","sessionIdlePause","initialTimestamp","_experiments","isTransactionEvent","isFeedbackEvent","handleAfterSendEvent","enforceStatusCode","isBaseTransportSend","transport","getTransport","send","__sentry__baseTransport__","sendResponse","handleTransactionEvent","replayContext","contexts","trace","trace_id","traceIds","handleErrorEvent","event_id","errorIds","tags","replayId","beforeErrorSampling","sendBufferedReplayOrFlush","createPerformanceSpans","description","startTimestamp","endTimestamp","addNetworkBreadcrumb","_sentry_core__WEBPACK_IMPORTED_MODULE_11__","W","getBodySize","textEncoder","encode","URLSearchParams","FormData","formDataStr","_serializeFormData","Blob","ArrayBuffer","byteLength","parseContentLengthHeader","header","parseInt","getBodyString","mergeWarning","warning","headers","_meta","warnings","newMeta","existingWarnings","makeNetworkReplayBreadcrumb","request","Jr","buildSkippedNetworkRequestOrResponse","bodySize","buildNetworkRequestOrResponse","normalizedBody","normalizeNetworkBody","exceedsSizeLimit","isProbablyJson","_strIsProbablyJson","first","last","truncatedBody","jsonBody","e3","getAllowedHeaders","allowedHeaders","reduce","filteredHeaders","formData","urlMatches","urls","fullUrl","getFullUrl","baseURI","fixedUrl","URL","_sentry_utils__WEBPACK_IMPORTED_MODULE_13__","U0","captureFetchBreadcrumbToReplay","hint","_prepareFetchData","status_code","request_body_size","requestBodySize","response_body_size","responseBodySize","captureDetails","networkDetailAllowUrls","networkDetailDenyUrls","_getRequestInfo","networkCaptureBodies","networkRequestHeaders","fetchArgs","getHeadersFromOptions","requestBody","_getFetchRequestArgBody","bodyStr","_getResponseInfo","networkResponseHeaders","getAllHeaders","bodyText","_parseFetchResponseBody","getResponseData","res","_tryCloneResponse","clone","_getResponseText","txt","finally","allHeaders","Headers","captureXhrBreadcrumbToReplay","_prepareXhrData","xhr","xhrInfo","_sentry_utils__WEBPACK_IMPORTED_MODULE_12__","xU","request_headers","getResponseHeaders","getAllResponseHeaders","acc","line","requestWarning","responseBody","responseWarning","_getXhrResponseBody","errors","responseText","_parseXhrResponse","responseType","outerHTML","_LAST_BREADCRUMB","handleScopeListener","handleScope","scope","newBreadcrumb","getLastBreadcrumb","normalizeConsoleBreadcrumb","arguments","isTruncated","normalizedArgs","normalizedArg","stringified","addMemoryEntry","createMemoryEntry","memoryEntry","jsHeapSizeLimit","totalJSHeapSize","usedJSHeapSize","memory","prepareReplayEvent","integrations","_integrations","eventHint","preparedEvent","_sentry_core__WEBPACK_IMPORTED_MODULE_19__","R","_sentry_core__WEBPACK_IMPORTED_MODULE_20__","aF","platform","metadata","getSdkMetadata","version","sdk","sendReplayRequest","recordingData","segment_id","eventContext","tunnel","preparedRecordingData","prepareRecordingData","payloadWithSequence","replayHeaders","enc","TextEncoder","sequence","nZ","dsn","getDsn","baseEvent","replay_start_timestamp","error_ids","trace_ids","replay_id","replay_type","replayEvent","sdkProcessingMetadata","envelope","_sentry_utils__WEBPACK_IMPORTED_MODULE_18__","Jd","Cd","HY","cause","TransportStatusCodeError","rateLimits","_sentry_utils__WEBPACK_IMPORTED_MODULE_21__","WG","Q","RateLimitError","sendReplay","replayData","retryConfig","interval","_retryCount","captureExceptions","Tb","THROTTLED","ReplayContainer","recordingOptions","__init","__init2","__init3","__init4","__init5","__init6","performanceEntries","replayPerformanceEntries","_lastActivity","_isEnabled","_isPaused","_hasInitializedCoreListeners","_context","initialUrl","_recordingOptions","_options","_debouncedFlush","debounce","callbackReturnValue","timerId","maxTimerId","maxWait","max","invokeFunc","cancelTimers","debounced","cancel","flush","_flush","flushMinDelay","flushMaxDelay","_throttledAddEvent","throttle","maxCount","durationSeconds","counter","_cleanup","_getTotalCount","values","isThrottled","floor","wasThrottled","slowClickTimeout","slowClickIgnoreSelectors","isRecordingCanvas","_canvas","initializeSampling","errorSampleRate","_initializeSessionForSampling","_handleException","_initializeRecording","_updateUserActivity","startBuffering","startRecording","hadFirstEvent","canvasOptions","_stopRecording","_isCheckout","updateClickDetectorForRecordingEvent","HTMLElement","setInitialState","createOptionsEvent","shouldRecordCanvas","useCompressionOption","useCompression","blockAllMedia","networkDetailHasUrls","networkRequestHasHeaders","networkResponseHasHeaders","earliestEvent","_onMutationHandler","stopRecording","forceFlush","_removeListeners","force","deleteSession","removeItem","pause","resume","_checkSession","continueRecording","flushImmediate","activityTime","hasStoppedRecording","_updateSessionActivity","_maybeSaveSession","cbResult","updateUserActivity","conditionalFlush","cancelFlush","getSessionId","urlPath","pathname","hash","_clearContext","lastTransaction","getTransaction","_sentry_core__WEBPACK_IMPORTED_MODULE_22__","XU","_sentry_core__WEBPACK_IMPORTED_MODULE_23__","Zj","createEventBuffer","workerUrl","customWorkerUrl","Worker","_loadWorker","__SENTRY_EXCLUDE_REPLAY_WORKER__","createObjectURL","_addListeners","currentSession","_refreshSession","_handleVisibilityChange","_handleWindowBlur","_handleWindowFocus","_handleKeyboardEvent","addGlobalListeners","addScopeListener","_sentry_utils__WEBPACK_IMPORTED_MODULE_15__","O","_sentry_utils__WEBPACK_IMPORTED_MODULE_16__","handleHistory","to","handleNetworkBreadcrumbs","beforeAddNetworkBreadcrumb","_isXhrBreadcrumb","enrichXhrBreadcrumb","reqSize","resSize","getResponseHeader","_getBodySize","_isFetchBreadcrumb","enrichFetchBreadcrumb","_sentry_utils__WEBPACK_IMPORTED_MODULE_14__","U","handleFetch","fetchData","status","UK","handleXhr","sentryXhrData","handleGlobalEventListener","includeAfterSendEventHandling","afterSendHandler","breadcrumbs","isSessionActive","feedback","feedbackId","exception","originalException","__rrweb__","log","isErrorEventSampled","shouldTagReplayId","addEventProcessor","_sentry_core__WEBPACK_IMPORTED_MODULE_17__","handleHydrationError","exceptionValue","dsc","transaction","feedbackEvent","includeReplay","_performanceCleanupCallback","setupPerformanceObserver","addPerformanceEntry","onEntries","clearCallbacks","_sentry_internal_tracing__WEBPACK_IMPORTED_MODULE_7__","_j","$A","getLargestContentfulPaint","lastEntry","clearCallback","visibilityState","_doChangeToForegroundTasks","_doChangeToBackgroundTasks","handleKeyboardEvent","getKeyboardBreadcrumb","isContentEditable","isCharacterKey","baseBreadcrumb","expired","_createCustomBreadcrumb","_addPerformanceEntries","createPerformanceEntries","concat","_updateInitialTimestampFromEventBuffer","_popEventContext","_runFlush","tooShort","minReplayDuration","tooLong","_flushLock","mutationLimit","mutationBreadcrumbLimit","overMutationLimit","getOption","selectors","defaultSelectors","deprecatedClassOption","deprecatedSelectorOption","deprecatedSelectors","allSelectors","Cf","MEDIA_SELECTORS","DEFAULT_NETWORK_HEADERS","_initialized","Replay$1","__initStatic","mask","maskAttributes","unmask","block","unblock","ignore","maskFn","privacyOptions","getPrivacyOptions","maskSelector","unmaskSelector","RegExp","password","maskAttribute","_initialOptions","_getMergedNetworkHeaders","_isInitialized","_sentry_utils__WEBPACK_IMPORTED_MODULE_24__","j","setupOnce","_setup","_initialize","getReplayId","_maybeLoadFromReplayCanvasIntegration","finalOptions","loadReplayOptionsFromClient","initialOptions","opt","replaysSessionSampleRate","replaysOnErrorSampleRate","canvasIntegration","getIntegrationByName"],"sourceRoot":""}